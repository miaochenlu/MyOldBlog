{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"source/img/image-20200805135526277.png","path":"img/image-20200805135526277.png","modified":0,"renderable":0},{"_id":"source/img/image-20200710192039991.png","path":"img/image-20200710192039991.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/img/achive.png","path":"img/achive.png","modified":0,"renderable":1},{"_id":"source/img/image-20200807160507597.png","path":"img/image-20200807160507597.png","modified":0,"renderable":0},{"_id":"source/img/image-20200806160700160.png","path":"img/image-20200806160700160.png","modified":0,"renderable":0},{"_id":"source/img/image-20190930101228492.png","path":"img/image-20190930101228492.png","modified":0,"renderable":0},{"_id":"source/img/image-20191021110018403.png","path":"img/image-20191021110018403.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/fluid/.DS_Store","hash":"91c6b607755fab8411095080299d21c3b13800f1","modified":1596624512729},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1595300800000},{"_id":"source/.DS_Store","hash":"f96e67d1ab34799acb2aeac373909517f71a1462","modified":1596810597469},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1595300800000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1595300800000},{"_id":"themes/fluid/README.md","hash":"0ff14201b4a4799d5e3b1387da8e06ead1681970","modified":1595300800000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1595300800000},{"_id":"themes/fluid/_config.yml","hash":"66f111c6895831381ec1e2ac4ee98bd2145caf89","modified":1596692941643},{"_id":"themes/fluid/_static_prefix.yml","hash":"dd94756c6967838bf656735a46047bb7b0031ca1","modified":1595300800000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1595300800000},{"_id":"themes/fluid/README_en.md","hash":"99412f14c91c3bc188953eb5b347481a618facd3","modified":1595300800000},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1595300800000},{"_id":"themes/fluid/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1595300800000},{"_id":"themes/fluid/package.json","hash":"d37c2637ed470ed61dd63142ab1291233267abdb","modified":1595300800000},{"_id":"source/_data/fluid_config.yml","hash":"66f111c6895831381ec1e2ac4ee98bd2145caf89","modified":1596692938463},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1595918910609},{"_id":"source/about/index.md","hash":"3aa868451111df13a4577348179d1a9113de0534","modified":1596616149238},{"_id":"source/_posts/img.md","hash":"45c63d3a6c19d05324933d64af209cd1a28e0c67","modified":1595920274558},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1595300800000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1595300800000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1595300800000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1595300800000},{"_id":"themes/fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":1595300800000},{"_id":"themes/fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":1595300800000},{"_id":"themes/fluid/layout/categories.ejs","hash":"3b8589675338c7b3e1849104b7bb15ac477fce4e","modified":1595300800000},{"_id":"themes/fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":1595300800000},{"_id":"themes/fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":1595300800000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7450c3db44b03c1b1c859f2770f6aa77dcebd379","modified":1595300800000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1595300800000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1595300800000},{"_id":"themes/fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":1595300800000},{"_id":"themes/fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":1595300800000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1595300800000},{"_id":"themes/fluid/source/.DS_Store","hash":"6c35dd70ce730b7ed5cf90cd1554e14b1d753bb1","modified":1596624512727},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":1595300800000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"867ed2bb90863934b72b7586ec7c31abf9863182","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"93cf5e1f1e0362adee0f63f4edcc7738cd4fc842","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"21964c2e5c68ee3806ef80465ef5de92174cdc3a","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"03defcd4409dce27447aa8dfe7ce41a2d47e373b","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"4359f8598a21b133d392f71772c3f9adb5de96a0","modified":1596637203959},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"afa8b2d53452609a5ee7cf32ad5f00d5a80de72e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0d818a43079d9a2da12d9c974426d675cc0b66ea","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1595300800000},{"_id":"themes/fluid/scripts/events/index.js","hash":"36b137b75c76ff08523016dc8eac702f397d771b","modified":1595300800000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":1595300800000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bb90a128a999b276c10a822c44851fa27d6d64ae","modified":1595300800000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"f64d2121d99225e9f6d12ce646af618232f5f366","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"48e1b46b4c34b79a128dda7a0592b43be47cf955","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"c131fb22805cec89d647e643299508487fc72576","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"d50f5aeb1a95adbc88cea9cca4a07165d6725408","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1595300800000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1595300800000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1595300800000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1595300800000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"ebd69685697b17878a5f9c7542e29f595a189d47","modified":1596624521605},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1595300800000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"6ba340eef77b2daf14c8fbb6b4f7bda9becb2526","modified":1595300800000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1595300800000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1595300800000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1595300800000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1595300800000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1595300800000},{"_id":"themes/fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1595300800000},{"_id":"themes/fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"d27313450311ebadf4a92f71d269db367475c1a4","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"2c516fe751fccab093d16eccc4331251942caf0a","modified":1596609460079},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"f151bc3453a67213cfdcb944c23764fb3a780722","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"0977e642c65e34d2ca2980a77b16d9ad2d3936fc","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"38334350425008d1f64323de221457ee0948af0e","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"4adf895fa1157aaf5a194f8b760332b6215656ef","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"ee7dfef805af96195c11223cca53983deace8bda","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"374583fd419ac6477dfca69e09756db543d7ec80","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"5fed24e25662a1b08fd857fde2d770fdc6250475","modified":1595300800000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1595300800000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1595300800000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"1678c5bbb1aa2e17681f8e88776ecb802bc85b69","modified":1595300800000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"7e07e44fa0e77ddbdd3aa0c0abdb3be6822df2e0","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"7231920523d634670344a452908f933b29a452be","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"439fce1b41bc1134399e7f2ce6ffe5aa64568acd","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"c443551deb389102e65cbb2441f60e8c20712ee8","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"f8f5503443f26354dacd139606e245f19aceb4a0","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1595300800000},{"_id":"themes/fluid/source/img/favicon.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595923664734},{"_id":"themes/fluid/source/img/avatar.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595923664734},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"5f8738c43539c27ad2ce7635a53b2cac522f1c13","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f1cd98a5b8d98535d707a99dba6a00f1f3978c81","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1595300800000},{"_id":"themes/fluid/source/img/default.png","hash":"40217ddf4aa1f7598ed3c89d7d55775c47b34987","modified":1596611234977},{"_id":"public/local-search.xml","hash":"ddd1a07b756eee2d076b1288739597b663b69603","modified":1596810805695},{"_id":"public/about/index.html","hash":"137160ed65ac31d624cce5acbefc83531ce11203","modified":1596636471113},{"_id":"public/2020/07/28/hello-world/index.html","hash":"926a0f4b1b7960a06b185ca5e8d76e15bbde8036","modified":1596610873762},{"_id":"public/archives/index.html","hash":"0a619b072a67fbc97622ab3b0eb09150f466aea2","modified":1596810805695},{"_id":"public/archives/2020/index.html","hash":"f579460029367cec8f13797ddaefbca7583a54c5","modified":1596810805695},{"_id":"public/archives/2020/07/index.html","hash":"1596af30a4e3085c313d8af6e720eef7b38d6bdc","modified":1596610873762},{"_id":"public/index.html","hash":"7b11a699ae4ef2f4149b098889054e17d3038ad6","modified":1596810805695},{"_id":"public/tags/image/index.html","hash":"1bd79742b32d1bd5882f0e33733b60fe8e0713a0","modified":1596610873762},{"_id":"public/404.html","hash":"0752fa97786e89e004212722686fc8e66c2f614f","modified":1596636471113},{"_id":"public/tags/index.html","hash":"9f790f570d09c23e8b4cfb402ace1801166089d5","modified":1596810805695},{"_id":"public/categories/index.html","hash":"7e997cde1cdf51c0f300e5dd3152b9dd4778e4c5","modified":1596810805695},{"_id":"public/links/index.html","hash":"767872d90cbafac9e0a8986d530f2d3461888dd9","modified":1596636471113},{"_id":"public/2020/07/28/img/index.html","hash":"f2da5d914def5a5778f444f14cc9215f807efef4","modified":1596610873762},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1595924104455},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1595924104455},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1595924104455},{"_id":"public/js/color-schema.js","hash":"6ba340eef77b2daf14c8fbb6b4f7bda9becb2526","modified":1595924104455},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1595924104455},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1595924104455},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1595924104455},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1595924104455},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1595924104455},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1595924104455},{"_id":"public/css/main.css","hash":"65f7421b6952cfd77811c470b8f99f40feefe2d6","modified":1595924104455},{"_id":"public/img/favicon.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595924104455},{"_id":"public/img/avatar.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595924104455},{"_id":"public/img/default.png","hash":"40217ddf4aa1f7598ed3c89d7d55775c47b34987","modified":1596618326353},{"_id":"source/_posts/today-md.md","hash":"7663f737488173921d57668d5e56e730a71086b5","modified":1596612039671},{"_id":"public/2020/08/05/today-md/index.html","hash":"22cf84fb6976506b14b959b38a5c60b40141576e","modified":1596610873762},{"_id":"public/archives/2020/08/index.html","hash":"f579460029367cec8f13797ddaefbca7583a54c5","modified":1596810805695},{"_id":"themes/fluid/source/img/未确认 672818.crdownload","hash":"708fdf7f654b1cf047adbf7e400b21b99a4d236b","modified":1596611047459},{"_id":"themes/fluid/source/img/default","hash":"708fdf7f654b1cf047adbf7e400b21b99a4d236b","modified":1596611047459},{"_id":"themes/fluid/source/img/73twhs.webp","hash":"708fdf7f654b1cf047adbf7e400b21b99a4d236b","modified":1596611166085},{"_id":"themes/fluid/source/img/截屏2020-08-05 下午3.07.03.png","hash":"40217ddf4aa1f7598ed3c89d7d55775c47b34987","modified":1596611234977},{"_id":"themes/fluid/source/img/1.png","hash":"7bcf6b4d00be4be44026e096abf3cc76f7e12b67","modified":1575734892788},{"_id":"public/img/73twhs.webp","hash":"708fdf7f654b1cf047adbf7e400b21b99a4d236b","modified":1596611265473},{"_id":"public/img/default","hash":"708fdf7f654b1cf047adbf7e400b21b99a4d236b","modified":1596611265473},{"_id":"public/img/1.png","hash":"7bcf6b4d00be4be44026e096abf3cc76f7e12b67","modified":1596611265473},{"_id":"source/_posts/StrategyMethod.md","hash":"b79856e8b030056353bd17ee4a6b537a16475600","modified":1596614897218},{"_id":"source/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"public/tags/DesignPatterns/index.html","hash":"746697a60ab343f65ff471184be51c77eb95b09b","modified":1596612564760},{"_id":"public/2020/08/05/StrategyMethod/index.html","hash":"d2f11ae9bb736bd45dccb115000b349f6ac7c034","modified":1596615152270},{"_id":"public/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596612564760},{"_id":"themes/fluid/source/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/.DS_Store","hash":"3cfbcf0e55f88868b6b44dec3b3836349584cc43","modified":1596810586834},{"_id":"source/_posts/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/img/.DS_Store","hash":"d74aec70bb334da3b15a0bba2b3d96aea14d074d","modified":1596612971432},{"_id":"source/img/image-20200805135526277 下午3.38.10.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/img/.DS_Store","hash":"f0367f4f3e43244bac8440ba31123418b5eb6e47","modified":1596615392841},{"_id":"source/img/image-20200805135526277png.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/today.md","hash":"f6a648ae9afc361a1d38e91bd174932b790d6ed1","modified":1596614010727},{"_id":"source/_posts/today/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"public/2020/08/05/today/index.html","hash":"edffba3fc2995b34a49fe06b1223c5457c66e468","modified":1596613570034},{"_id":"public/2020/08/05/today/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596613570034},{"_id":"source/img/image-20200805135526277-6613948.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"public/img/image-20200805135526277-6613948.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596614064725},{"_id":"source/_posts/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/StrategyMethod/.DS_Store","hash":"7a5178989e10029d0bc2b5b00920419850839cf4","modified":1596614110447},{"_id":"public/2020/08/05/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596614303295},{"_id":"source/_posts/TemplateMethod.md","hash":"6a95006349bd988ee55963be87ba0ebc42ef83ae","modified":1596615457730},{"_id":"source/_posts/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1594379424077},{"_id":"source/_posts/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1594379957990},{"_id":"source/_posts/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1594380039993},{"_id":"source/_posts/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1594379532501},{"_id":"public/tags/Design-Patterns/index.html","hash":"92307a86dd4008c6df071d8ccff0411c3b0cbdba","modified":1596810805695},{"_id":"public/2020/08/05/TemplateMethod/index.html","hash":"45d6e775bcbcd766dc56e084e24cda7ceab91305","modified":1596615310635},{"_id":"public/2020/08/05/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1596615152270},{"_id":"public/2020/08/05/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1596615152270},{"_id":"public/2020/08/05/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1596615152270},{"_id":"public/2020/08/05/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1596615152270},{"_id":"source/img/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1594379957990},{"_id":"public/img/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1596615310635},{"_id":"source/img/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1594380039993},{"_id":"source/_posts/Untitled.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596615471727},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1594379957990},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1594379424077},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1594379532501},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1594380039993},{"_id":"source/_posts/DesignPatterns/TemplateMethod/StrategyMethod/.DS_Store","hash":"7a5178989e10029d0bc2b5b00920419850839cf4","modified":1596614110447},{"_id":"source/_posts/DesignPatterns/TemplateMethod/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/DesignPatterns/StrategyMethod.md","hash":"93a7ad6a9dd9c2f10ca3a1d1d056861bcac6aabd","modified":1596702643543},{"_id":"source/_posts/DesignPatterns/StrategyMethod/.DS_Store","hash":"7a5178989e10029d0bc2b5b00920419850839cf4","modified":1596614110447},{"_id":"source/_posts/DesignPatterns/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/DesignPatterns/TemplateMethod.md","hash":"d683a3786ad55f0164f4b68c1cc3c61ae176b600","modified":1596702627487},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/index.html","hash":"f4d39ae9d40c0b748ff11ea217fda7e50fb7206d","modified":1596788050069},{"_id":"public/2020/08/05/DesignPatterns/StrategyMethod/index.html","hash":"e34c716d950fa8333ae1d231c8c7e55d20e76fbd","modified":1596810805695},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1596615544736},{"_id":"public/img/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1596615544736},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1596615544736},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1596615544736},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1596615544736},{"_id":"public/2020/08/05/DesignPatterns/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596615544736},{"_id":"themes/fluid/source/img/achive.png","hash":"bfdf73f8656f6c2559587659051d801aae61e49d","modified":1596624121939},{"_id":"public/img/achive.png","hash":"bfdf73f8656f6c2559587659051d801aae61e49d","modified":1596624540123},{"_id":"source/_posts/Principle.md","hash":"24d29b9f97e9aad659a7ae4dc32c753889c4825c","modified":1596698815389},{"_id":"source/_posts/Observer.md","hash":"c7431786622090b484e1f5c8b48e9d4753f949ab","modified":1596696282404},{"_id":"source/_posts/Decorator.md","hash":"6570321756604b4f8ef3010b7c1af043332edba2","modified":1596788038950},{"_id":"source/_posts/DesignPatterns/Observer.md","hash":"d565052ca68515927994d08ff65a1a7235e098b0","modified":1596702594267},{"_id":"source/img/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596787768905},{"_id":"source/img/image-20200806160700160.png","hash":"cb4ed64f80eefb8d68cc969a59d3548eab709298","modified":1596701220162},{"_id":"source/_posts/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596787768905},{"_id":"source/_posts/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1596782303920},{"_id":"source/_posts/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1596781348610},{"_id":"source/_posts/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1596782242319},{"_id":"source/_posts/DesignPatterns/Observer/image-20200806160700160.png","hash":"b6abb80ce592d70dcdd4087f4833aa8f489b8b97","modified":1596701745439},{"_id":"public/2020/08/06/Principle/index.html","hash":"63eb07b573dc1e0e6c545fc51137a6ae87dd0ff2","modified":1596788050069},{"_id":"public/categories/Design-Patterns/index.html","hash":"f8c8d68ee2bca2f39dfe1880068398440e24db24","modified":1596810805695},{"_id":"public/2020/08/07/Decorator/index.html","hash":"37adb625c4200c89618dde6a0091fcdf3361e8c5","modified":1596788050069},{"_id":"public/2020/08/06/DesignPatterns/Observer/index.html","hash":"2ee113877febb9788054ce8e93d9e59c0e3690f0","modified":1596810805695},{"_id":"public/img/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596788050069},{"_id":"public/2020/08/07/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596788050069},{"_id":"public/img/image-20200806160700160.png","hash":"cb4ed64f80eefb8d68cc969a59d3548eab709298","modified":1596788050069},{"_id":"public/2020/08/07/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1596788050069},{"_id":"public/2020/08/06/DesignPatterns/Observer/image-20200806160700160.png","hash":"b6abb80ce592d70dcdd4087f4833aa8f489b8b97","modified":1596788050069},{"_id":"public/2020/08/07/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1596788050069},{"_id":"public/2020/08/07/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1596788050069},{"_id":"source/_posts/instructionSet.md","hash":"13ec747c54a0ee7869714739c1b2c782ad1bc1f4","modified":1596809661634},{"_id":"source/_posts/DesignPatterns/Decorator.md","hash":"6570321756604b4f8ef3010b7c1af043332edba2","modified":1596788038950},{"_id":"source/_posts/DesignPatterns/Principle.md","hash":"24d29b9f97e9aad659a7ae4dc32c753889c4825c","modified":1596698815389},{"_id":"source/_posts/instructionSet/image-20190930115553486.png","hash":"19bf3b073b628e77d94993d5c5856bdfc4b5e30d","modified":1569815753487},{"_id":"source/_posts/instructionSet/image-20191014101250484.png","hash":"8995a0952ec6b94d54acc6306d1fc9ace992e439","modified":1571019170486},{"_id":"source/_posts/instructionSet/image-20191014101429477.png","hash":"8120a468d556522033b61c265b9891678d061eb7","modified":1571019269478},{"_id":"source/_posts/instructionSet/image-20191218224444341.png","hash":"b9315496fc79f7642dab00ee3433eb6e845a351a","modified":1576680284344},{"_id":"source/_posts/instructionSet/image-20190930102555608.png","hash":"75e056666f70d2c76c31eab1e90a50f81a56b925","modified":1569810355609},{"_id":"source/_posts/instructionSet/image-20191218224500000.png","hash":"fad4c5a5318827aeb32f4c6d09bcfdac67811924","modified":1576680300001},{"_id":"source/_posts/instructionSet/image-20190930115734010.png","hash":"45fcad3501f67c87cf3563619d9f96ae122d2210","modified":1569815854012},{"_id":"source/_posts/instructionSet/image-20190930115635931.png","hash":"2747827050deb3511974e4c92084800d09eddb31","modified":1569815795932},{"_id":"source/_posts/instructionSet/image-20190930103037853.png","hash":"902eed4b090889daf19ffbe8e058fdde55a6f7aa","modified":1569810637855},{"_id":"source/_posts/instructionSet/image-20190930103000391.png","hash":"0477a87305b6e830f817f08bb00ef67dbfcd7359","modified":1569810600393},{"_id":"source/_posts/instructionSet/image-20190930102855084.png","hash":"9bceece48b5757f8dbd5a27b170e90c6179903be","modified":1569810535085},{"_id":"source/_posts/instructionSet/image-20190930103101742.png","hash":"84a6ad40d7a6aad1ffc8602e1fd154096000ada6","modified":1569810661743},{"_id":"source/_posts/instructionSet/image-20190930115804883.png","hash":"a86d148db1885f7fba2e25bb251cf34a39bdd830","modified":1569815884884},{"_id":"source/_posts/instructionSet/image-20191014101703881.png","hash":"6b746f0193bed5af739f1df76d3184c1bebacb54","modified":1571019423881},{"_id":"source/_posts/instructionSet/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1569809548496},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596787768905},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1596782303920},{"_id":"source/_posts/instructionSet/image-20191014102744097.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/instructionSet/image-20191014102744097-6809392.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1596781348610},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1596782242319},{"_id":"source/_posts/instructionSet/image-20191218224924929.png","hash":"2d175c9613c241344d7871e2b506f8b3b64ed260","modified":1576680564933},{"_id":"source/_posts/pipeline.md","hash":"68c49afadc03beedcd308fe2bc6930bd39f4577d","modified":1596810785026},{"_id":"source/img/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1569809548496},{"_id":"source/_posts/pipeline/ca20190908-1.png","hash":"4f0ffcb0dda688b0ed8f5d1b35bec84ffe7acb2a","modified":1567914712626},{"_id":"source/_posts/pipeline/ca20190908-2.png","hash":"dc8cf5eba98d5ba7d3b46d113cbbcc2ffe2351b3","modified":1567914898236},{"_id":"source/_posts/pipeline/image-20191013133054888.png","hash":"cd502b027b044546b48ed7e8eff21b9301c4e2de","modified":1570944654891},{"_id":"source/_posts/pipeline/image-20191013143518878.png","hash":"992264195c872e4a3ea4b8f37ea291f5e05f8c91","modified":1570948518880},{"_id":"source/_posts/pipeline/image-20191013151122898.png","hash":"657069acd344b946ade7c698b4c3010c80f5ca08","modified":1570950682900},{"_id":"source/_posts/pipeline/image-20191013151314878.png","hash":"dd19b7966043be8bdb26c847c27d846703d79efe","modified":1570950794878},{"_id":"source/_posts/pipeline/截屏2019-10-21上午9.51.11.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1571622678316},{"_id":"source/_posts/pipeline/image-20191021095111.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1571622678316},{"_id":"source/_posts/pipeline/.DS_Store","hash":"90c15d9d95c004904045ac50b3370799ce14d223","modified":1596809966688},{"_id":"source/_posts/pipeline/image-20191014112116582.png","hash":"89bead8581feddd734ecc24a68412d446559527a","modified":1571023276582},{"_id":"source/_posts/pipeline/image-20191021095901298.png","hash":"4492923d9852ef3c72f4389c20a69028feab7fbc","modified":1571623141300},{"_id":"source/_posts/pipeline/image-20191021101747938.png","hash":"dcf84f066ecf6d36beb5d3a63d2e45dfe3ae64c8","modified":1571624267940},{"_id":"source/_posts/pipeline/image-20191021103246990.png","hash":"11eb72a34395488b6b409d8d0b24451ef633a6c8","modified":1571625166992},{"_id":"source/_posts/pipeline/image-20191021105802697.png","hash":"080abe7582c0904544de412b9fe7fbca446ed915","modified":1571626682700},{"_id":"source/_posts/pipeline/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1571626818404},{"_id":"source/_posts/pipeline/image-20191021115323894.png","hash":"faec8817b6f39cf58c25c52e2968cdb19732eb2c","modified":1571630003897},{"_id":"source/_posts/pipeline/IMG_C3E4F59B24C4.png","hash":"39e53400ac4e421ec5fed4b00034b2a05a4d5289","modified":1577063576000},{"_id":"source/_posts/pipeline/image-20191111103138887.png","hash":"ed8ec52aaec56c1a3549c45ee5c98baa255056cf","modified":1573439498889},{"_id":"source/_posts/pipeline/image-20191111104720076.png","hash":"0bd547e5d7b7e119e04ecd3d10daf304c525038f","modified":1573440440077},{"_id":"source/_posts/pipeline/image-20191111103409484.png","hash":"64d8120f30ad13b0d243d59c2cb4e72ed74f2fad","modified":1573439649487},{"_id":"source/_posts/pipeline/image-20191111103455864.png","hash":"cc3d257ce8f4f30fabcb2998a6df7d13d3903832","modified":1573439695866},{"_id":"source/_posts/pipeline/image-20191111103637824.png","hash":"3ebf0712366e2a12e28676ee7665141dbb14aa89","modified":1573439797827},{"_id":"source/_posts/pipeline/image-20191111104058863.png","hash":"158589f60813a7da61e45418bb9eec011b4271ca","modified":1573440058863},{"_id":"source/img/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1571626818404},{"_id":"public/2020/08/06/DesignPatterns/Principle/index.html","hash":"7decfb1871668ed4e9a6e4759be1a9f56e5dd10c","modified":1596810805695},{"_id":"public/categories/Computer-Architecture/index.html","hash":"0d7b10b90250a0e9bbb6295380b3c0b8d3090151","modified":1596810805695},{"_id":"public/tags/Computer-Architecture/index.html","hash":"f175ef4a113f4197a736509ac1b3da725a4ab269","modified":1596810805695},{"_id":"public/archives/2019/index.html","hash":"073917a0bb22aea9bd874f4df8fc23336dbb18df","modified":1596810805695},{"_id":"public/archives/2019/09/index.html","hash":"522d06a187947ce3e0bc5fdc3db0e5fad45dab2b","modified":1596810805695},{"_id":"public/archives/2019/10/index.html","hash":"eca6eb728aad6e048d0ca0d12e23e7a266d72be0","modified":1596810805695},{"_id":"public/2020/08/07/DesignPatterns/Decorator/index.html","hash":"2a6db9e886ab074fe2581eebb8026c2b41ab3a6d","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/index.html","hash":"0896025a9917a794ec244361ddf3575bb5bf46e7","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/index.html","hash":"35a81d47b6a8a98cf46c448de0136d7ed8cdbd26","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930115553486.png","hash":"19bf3b073b628e77d94993d5c5856bdfc4b5e30d","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191014101250484.png","hash":"8995a0952ec6b94d54acc6306d1fc9ace992e439","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191014101429477.png","hash":"8120a468d556522033b61c265b9891678d061eb7","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191218224444341.png","hash":"b9315496fc79f7642dab00ee3433eb6e845a351a","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021101747938.png","hash":"dcf84f066ecf6d36beb5d3a63d2e45dfe3ae64c8","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111103138887.png","hash":"ed8ec52aaec56c1a3549c45ee5c98baa255056cf","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930102555608.png","hash":"75e056666f70d2c76c31eab1e90a50f81a56b925","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191218224500000.png","hash":"fad4c5a5318827aeb32f4c6d09bcfdac67811924","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021095111.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930103037853.png","hash":"902eed4b090889daf19ffbe8e058fdde55a6f7aa","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930115734010.png","hash":"45fcad3501f67c87cf3563619d9f96ae122d2210","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930115804883.png","hash":"a86d148db1885f7fba2e25bb251cf34a39bdd830","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930115635931.png","hash":"2747827050deb3511974e4c92084800d09eddb31","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/ca20190908-1.png","hash":"4f0ffcb0dda688b0ed8f5d1b35bec84ffe7acb2a","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191013151314878.png","hash":"dd19b7966043be8bdb26c847c27d846703d79efe","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/IMG_C3E4F59B24C4.png","hash":"39e53400ac4e421ec5fed4b00034b2a05a4d5289","modified":1596810805695},{"_id":"public/img/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930103000391.png","hash":"0477a87305b6e830f817f08bb00ef67dbfcd7359","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930102855084.png","hash":"9bceece48b5757f8dbd5a27b170e90c6179903be","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930103101742.png","hash":"84a6ad40d7a6aad1ffc8602e1fd154096000ada6","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191013151122898.png","hash":"657069acd344b946ade7c698b4c3010c80f5ca08","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191013143518878.png","hash":"992264195c872e4a3ea4b8f37ea291f5e05f8c91","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191014112116582.png","hash":"89bead8581feddd734ecc24a68412d446559527a","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021095901298.png","hash":"4492923d9852ef3c72f4389c20a69028feab7fbc","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021103246990.png","hash":"11eb72a34395488b6b409d8d0b24451ef633a6c8","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111104720076.png","hash":"0bd547e5d7b7e119e04ecd3d10daf304c525038f","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111103455864.png","hash":"cc3d257ce8f4f30fabcb2998a6df7d13d3903832","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111103409484.png","hash":"64d8120f30ad13b0d243d59c2cb4e72ed74f2fad","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111103637824.png","hash":"3ebf0712366e2a12e28676ee7665141dbb14aa89","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191111104058863.png","hash":"158589f60813a7da61e45418bb9eec011b4271ca","modified":1596810805695},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021105802697.png","hash":"080abe7582c0904544de412b9fe7fbca446ed915","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191014101703881.png","hash":"6b746f0193bed5af739f1df76d3184c1bebacb54","modified":1596810805695},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/ca20190908-2.png","hash":"dc8cf5eba98d5ba7d3b46d113cbbcc2ffe2351b3","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191013133054888.png","hash":"cd502b027b044546b48ed7e8eff21b9301c4e2de","modified":1596810805695},{"_id":"public/img/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1596810805695},{"_id":"public/2019/10/13/pipeline/image-20191021115323894.png","hash":"faec8817b6f39cf58c25c52e2968cdb19732eb2c","modified":1596810805695},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1596810805695},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191014102744097-6809392.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191014102744097.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1596810805695},{"_id":"public/2019/09/08/instructionSet/image-20191218224924929.png","hash":"2d175c9613c241344d7871e2b506f8b3b64ed260","modified":1596810805695}],"Category":[{"name":"Design Patterns","_id":"ckdjycnu00001iuuf2yqza5sa"},{"name":"Computer Architecture","_id":"ckdkb8xio0001xmuf2acn8555"}],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2020-07-28T06:51:36.000Z","layout":"about","_content":"\n<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n              \t<li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-28 14:51:36\nlayout: about\n---\n\n<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n              \t<li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>","updated":"2020-08-05T08:29:09.238Z","path":"about/index.html","_id":"ckd5o08k40001g5ufagrtauom","comments":1,"content":"<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                  <li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"#ffffff","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"20px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&acute; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                  <li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>"}],"Post":[{"title":"Strategy Method","date":"2020-08-05T07:53:57.000Z","index_img":"/img/image-20200805135526277.png","_content":"\n## 动机\n\n在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担\n\n如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？\n\n\n\n## Strategy Method定义\n\n定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。\n\n\n\n## 代码示例\n\n考虑一下计算税的例子\n\n* 第一种实现方式\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        //***\n    }\n}\n```\n\n有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在`TaxBase`中中增加一个`FR_Tax`, 还需要在`SalesOrder`中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    /***加入France***/\n    FR_Tax,\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        /***加入France***/\n        else if(tax == FR_Tax) {\n          \n        }\n        //***\n    }\n}\n```\n\n\n\n* 考虑另一种实现方式\n\n```cpp\nclass TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) = 0;\n    virtual ~TaxStrategy() {}\n};\n\nclass CNTax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n};\n\nclass USTax: public TaxStrategy {\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\nclass DETax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n```cpp\nclass SalesOrder {\nprivate:\n    TaxStrategy* strategy;\npublic:\n    SalesOrder(StrategyFactory* strategyFactory) {\n        this->strategy = strategyFactory->NewStrategy();\n    }\n    \n    ~SalesOrder() {\n        delete this->strategy;\n    }\n    \n    public double CalculateTax() {\n        //...\n        Context context();\n        \n        double val = \n            \tsrtategy->Calculate(context);//多态调用\n    }\n}\n```\n\n如果要增加法国，只需增加一个`FRTax`类\n\n```cpp\nclass FRTax: public TaxStrategy {\npublic:\n    virtual doubel Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。\n\n复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件\n\n\n\n## 结构\n\n\n\n![image-20200805135526277](image-20200805135526277.png) \n\n\n\n## 总结\n\n* Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。\n\n* Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。\n\n* 如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销\n\n\n\n\n\n","source":"_posts/DesignPatterns/StrategyMethod.md","raw":"---\ntitle: Strategy Method\ndate: 2020-08-05 15:53:57\nindex_img: /img/image-20200805135526277.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## 动机\n\n在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担\n\n如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？\n\n\n\n## Strategy Method定义\n\n定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。\n\n\n\n## 代码示例\n\n考虑一下计算税的例子\n\n* 第一种实现方式\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        //***\n    }\n}\n```\n\n有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在`TaxBase`中中增加一个`FR_Tax`, 还需要在`SalesOrder`中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    /***加入France***/\n    FR_Tax,\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        /***加入France***/\n        else if(tax == FR_Tax) {\n          \n        }\n        //***\n    }\n}\n```\n\n\n\n* 考虑另一种实现方式\n\n```cpp\nclass TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) = 0;\n    virtual ~TaxStrategy() {}\n};\n\nclass CNTax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n};\n\nclass USTax: public TaxStrategy {\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\nclass DETax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n```cpp\nclass SalesOrder {\nprivate:\n    TaxStrategy* strategy;\npublic:\n    SalesOrder(StrategyFactory* strategyFactory) {\n        this->strategy = strategyFactory->NewStrategy();\n    }\n    \n    ~SalesOrder() {\n        delete this->strategy;\n    }\n    \n    public double CalculateTax() {\n        //...\n        Context context();\n        \n        double val = \n            \tsrtategy->Calculate(context);//多态调用\n    }\n}\n```\n\n如果要增加法国，只需增加一个`FRTax`类\n\n```cpp\nclass FRTax: public TaxStrategy {\npublic:\n    virtual doubel Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。\n\n复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件\n\n\n\n## 结构\n\n\n\n![image-20200805135526277](image-20200805135526277.png) \n\n\n\n## 总结\n\n* Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。\n\n* Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。\n\n* 如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销\n\n\n\n\n\n","slug":"DesignPatterns/StrategyMethod","published":1,"updated":"2020-08-06T08:30:43.543Z","_id":"ckdh3nd2c00026xufglbcalag","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担</p>\n<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>\n<h2 id=\"Strategy-Method定义\"><a href=\"#Strategy-Method定义\" class=\"headerlink\" title=\"Strategy Method定义\"></a>Strategy Method定义</h2><p>定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一下计算税的例子</p>\n<ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在<code>TaxBase</code>中中增加一个<code>FR_Tax</code>, 还需要在<code>SalesOrder</code>中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    <span class=\"hljs-comment\">/***加入France***/</span>\n    FR_Tax,\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">/***加入France***/</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == FR_Tax) &#123;\n          \n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<ul>\n<li>考虑另一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TaxStrategy</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~TaxStrategy() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CNTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">USTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DETax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n<span class=\"hljs-keyword\">private</span>:\n    TaxStrategy* strategy;\n<span class=\"hljs-keyword\">public</span>:\n    SalesOrder(StrategyFactory* strategyFactory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();\n    &#125;\n    \n    ~SalesOrder() &#123;\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>-&gt;strategy;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        <span class=\"hljs-function\">Context <span class=\"hljs-title\">context</span><span class=\"hljs-params\">()</span></span>;\n        \n        <span class=\"hljs-keyword\">double</span> val = \n            \tsrtategy-&gt;Calculate(context);<span class=\"hljs-comment\">//多态调用</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>如果要增加法国，只需增加一个<code>FRTax</code>类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FRTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> doubel <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。</p>\n<p>复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200805135526277.png\" srcset=\"/img/loading.gif\" alt=\"image-20200805135526277\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。</p>\n</li>\n<li><p>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。</p>\n</li>\n<li><p>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担</p>\n<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>\n<h2 id=\"Strategy-Method定义\"><a href=\"#Strategy-Method定义\" class=\"headerlink\" title=\"Strategy Method定义\"></a>Strategy Method定义</h2><p>定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一下计算税的例子</p>\n<ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在<code>TaxBase</code>中中增加一个<code>FR_Tax</code>, 还需要在<code>SalesOrder</code>中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    <span class=\"hljs-comment\">/***加入France***/</span>\n    FR_Tax,\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">/***加入France***/</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == FR_Tax) &#123;\n          \n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<ul>\n<li>考虑另一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TaxStrategy</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~TaxStrategy() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CNTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">USTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DETax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n<span class=\"hljs-keyword\">private</span>:\n    TaxStrategy* strategy;\n<span class=\"hljs-keyword\">public</span>:\n    SalesOrder(StrategyFactory* strategyFactory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();\n    &#125;\n    \n    ~SalesOrder() &#123;\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>-&gt;strategy;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        <span class=\"hljs-function\">Context <span class=\"hljs-title\">context</span><span class=\"hljs-params\">()</span></span>;\n        \n        <span class=\"hljs-keyword\">double</span> val = \n            \tsrtategy-&gt;Calculate(context);<span class=\"hljs-comment\">//多态调用</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>如果要增加法国，只需增加一个<code>FRTax</code>类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FRTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> doubel <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。</p>\n<p>复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200805135526277.png\" srcset=\"/img/loading.gif\" alt=\"image-20200805135526277\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。</p>\n</li>\n<li><p>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。</p>\n</li>\n<li><p>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销</p>\n</li>\n</ul>\n"},{"title":"Template Method","date":"2020-08-05T08:10:25.000Z","index_img":"/img/image-20200710192039991.png","_content":"\n## 动机\n\n在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。\n\n核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。\n\n如何在确定**稳定操作结构**的前提下，来灵活应对**各个子步骤的变化**或者**晚期实现需求**？\n\n假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的\n\n<img src=\"image-20200710191024075.png\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n## 结构化软件流程设计\n\n<img src=\"image-20200710191212499.png\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Step1() {\n        //...\n    }\n    void Step3() {\n        //...\n    }\n    void Step5() {\n        //...\n    }\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application {\npublic:\n    bool Step2() {\n        //...\n    }\n    void Step4() {\n        //...\n    }\n}\n```\n\n主程序\n\n```cpp\nint main() {\n    Library lib();\n    Application app();\n    \n    lib.Step1();\n    \n    if(app.Step2()) {\n        lib.Step3();\n    }\n    for(int i = 0; i < 4; i++) {\n        app.Step4();\n    }\n    lib.Step5();\n}\n```\n\n\n\n## 用模板方法的代码重构为\n\n<img src=\"image-20200710191917988.png\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Run() {\n        Step1();\n        if(Step2()) {\n            Step3();\n        }\n        for(int i = 0; i < 4; i++) {\n            Step4();\n        }\n        Step5();\n    }\n    \n    virtual ~Library() {}\nprotected:\n    void Step1() { //稳定\n        //...\n    }\n    void Step3() { //稳定\n        //...\n    }\n    void Step5() { //稳定\n        //...\n    }\n    \n    virtual bool Step2() = 0; //变化\n    virtual void Step4() = 0; //变化\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application: public Library {\nprotected:\n    virtual bool Step2() {\n        //...\n    }\n    virtual void Step4() {\n        //...\n    }\n};\n```\n\n主程序\n\n```cpp\nint main() {\n    Library* pLib = new Application();\n    lib.Run();\n    delete pLib;\n}\n```\n\n\n\n## 总结\n\n这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定\n\n<img src=\"image-20200710192039991.png\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。\n\n","source":"_posts/DesignPatterns/TemplateMethod.md","raw":"---\ntitle: Template Method\ndate: 2020-08-05 16:10:25\nindex_img: /img/image-20200710192039991.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## 动机\n\n在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。\n\n核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。\n\n如何在确定**稳定操作结构**的前提下，来灵活应对**各个子步骤的变化**或者**晚期实现需求**？\n\n假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的\n\n<img src=\"image-20200710191024075.png\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n## 结构化软件流程设计\n\n<img src=\"image-20200710191212499.png\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Step1() {\n        //...\n    }\n    void Step3() {\n        //...\n    }\n    void Step5() {\n        //...\n    }\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application {\npublic:\n    bool Step2() {\n        //...\n    }\n    void Step4() {\n        //...\n    }\n}\n```\n\n主程序\n\n```cpp\nint main() {\n    Library lib();\n    Application app();\n    \n    lib.Step1();\n    \n    if(app.Step2()) {\n        lib.Step3();\n    }\n    for(int i = 0; i < 4; i++) {\n        app.Step4();\n    }\n    lib.Step5();\n}\n```\n\n\n\n## 用模板方法的代码重构为\n\n<img src=\"image-20200710191917988.png\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Run() {\n        Step1();\n        if(Step2()) {\n            Step3();\n        }\n        for(int i = 0; i < 4; i++) {\n            Step4();\n        }\n        Step5();\n    }\n    \n    virtual ~Library() {}\nprotected:\n    void Step1() { //稳定\n        //...\n    }\n    void Step3() { //稳定\n        //...\n    }\n    void Step5() { //稳定\n        //...\n    }\n    \n    virtual bool Step2() = 0; //变化\n    virtual void Step4() = 0; //变化\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application: public Library {\nprotected:\n    virtual bool Step2() {\n        //...\n    }\n    virtual void Step4() {\n        //...\n    }\n};\n```\n\n主程序\n\n```cpp\nint main() {\n    Library* pLib = new Application();\n    lib.Run();\n    delete pLib;\n}\n```\n\n\n\n## 总结\n\n这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定\n\n<img src=\"image-20200710192039991.png\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。\n\n","slug":"DesignPatterns/TemplateMethod","published":1,"updated":"2020-08-06T08:30:27.487Z","_id":"ckdh3nmky00046xufa4pw5hqd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p>\n<p>核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。</p>\n<p>如何在确定<strong>稳定操作结构</strong>的前提下，来灵活应对<strong>各个子步骤的变化</strong>或者<strong>晚期实现需求</strong>？</p>\n<p>假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的</p>\n<img src=\"image-20200710191024075.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n<h2 id=\"结构化软件流程设计\"><a href=\"#结构化软件流程设计\" class=\"headerlink\" title=\"结构化软件流程设计\"></a>结构化软件流程设计</h2><img src=\"image-20200710191212499.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-function\">Library <span class=\"hljs-title\">lib</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\">Application <span class=\"hljs-title\">app</span><span class=\"hljs-params\">()</span></span>;\n    \n    lib.Step1();\n    \n    <span class=\"hljs-keyword\">if</span>(app.Step2()) &#123;\n        lib.Step3();\n    &#125;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n        app.Step4();\n    &#125;\n    lib.Step5();\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"用模板方法的代码重构为\"><a href=\"#用模板方法的代码重构为\" class=\"headerlink\" title=\"用模板方法的代码重构为\"></a>用模板方法的代码重构为</h2><img src=\"image-20200710191917988.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Step1();\n        <span class=\"hljs-keyword\">if</span>(Step2()) &#123;\n            Step3();\n        &#125;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n            Step4();\n        &#125;\n        Step5();\n    &#125;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Library() &#123;&#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n&#125;</code></pre></div>\n\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span>:</span> <span class=\"hljs-keyword\">public</span> Library &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;</code></pre></div>\n\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    Library* pLib = <span class=\"hljs-keyword\">new</span> Application();\n    lib.Run();\n    <span class=\"hljs-keyword\">delete</span> pLib;\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定</p>\n<img src=\"image-20200710192039991.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n<p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p>\n<p>核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。</p>\n<p>如何在确定<strong>稳定操作结构</strong>的前提下，来灵活应对<strong>各个子步骤的变化</strong>或者<strong>晚期实现需求</strong>？</p>\n<p>假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的</p>\n<img src=\"image-20200710191024075.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n<h2 id=\"结构化软件流程设计\"><a href=\"#结构化软件流程设计\" class=\"headerlink\" title=\"结构化软件流程设计\"></a>结构化软件流程设计</h2><img src=\"image-20200710191212499.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-function\">Library <span class=\"hljs-title\">lib</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\">Application <span class=\"hljs-title\">app</span><span class=\"hljs-params\">()</span></span>;\n    \n    lib.Step1();\n    \n    <span class=\"hljs-keyword\">if</span>(app.Step2()) &#123;\n        lib.Step3();\n    &#125;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n        app.Step4();\n    &#125;\n    lib.Step5();\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"用模板方法的代码重构为\"><a href=\"#用模板方法的代码重构为\" class=\"headerlink\" title=\"用模板方法的代码重构为\"></a>用模板方法的代码重构为</h2><img src=\"image-20200710191917988.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Step1();\n        <span class=\"hljs-keyword\">if</span>(Step2()) &#123;\n            Step3();\n        &#125;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n            Step4();\n        &#125;\n        Step5();\n    &#125;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Library() &#123;&#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n&#125;</code></pre></div>\n\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span>:</span> <span class=\"hljs-keyword\">public</span> Library &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;</code></pre></div>\n\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    Library* pLib = <span class=\"hljs-keyword\">new</span> Application();\n    lib.Run();\n    <span class=\"hljs-keyword\">delete</span> pLib;\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定</p>\n<img src=\"image-20200710192039991.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n<p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。</p>\n"},{"title":"Observer 观察者模式","date":"2020-08-06T06:22:25.000Z","index_img":"/img/image-20200806160700160.png","_content":"\n\n\n## 动机\n\n在软件构建过程中，我们需要为某些对象建立一种\"通知依赖关系\" \n\n<u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。\n\n使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。\n\n\n\n## 模式定义\n\n定义对象间的一种<u>***一对多***</u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u>***自动更新***</u>。\n\n\n\n## 代码示例\n\n考虑一个文件分割器程序，将一个大文件分割成几个小文件。\n\n我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割\n\n代码如下\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n        }\n    }\n}\n```\n\n\n\n#### 需求1：文件分割进度条\n\n* 第一种实现方式\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n/***增加progress bar***/\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n/***增加progres bar***/\n    ProgressBar* m_progressBar;\npublic:\n/***增加初始化参数***/\n    FileSplitter(const strign& filePath, int fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n/***更新progress bar***/\n            if(m_progressBar != NULL) {\n                m_progressBar->setValue((i + 1) / m_fileNumber);\n            }\n        }\n    }\n}\n```\n\n{% note warning%}\n\n但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。\n\n{% endnote %}\n\n\n\n* 第二种实现方式\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            if(m_iprogress != NULL) {\n                float progressValue = m_fileNumber;\n                progressValue = (i + 1) / progressValue;\n                m_iprogress->DoProgress(progressValue); //更新进度条\n            }\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n```\n\nC++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况\n\n* 再修改一下\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        if(m_iprogress != NULL) {\n\t        m_iprogress->DoProgress(value);\t//更新进度条\n        }\n    }\n}\n```\n\n\n\n\n\n#### 需求2: 多观察者\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    List<IProgress*> m_iprogressList; //抽象通知机制, 支持多个观察者\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void addIProgress(IProgress* iprogress) {\n        m_iprogressList.add(iprogress);\n    }\n    \n    void removeIProgress(IProgress* iprogress) {\n        m_iprogressList.remove(iprogress);\n    }\n    \n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        List<IProgress*>::iterator it = m_iprogressList.begin();\n        \n\t\twhile(it != m_iprogressList.end()) {\n            (*it)->DoProgress(value);\n            it++;\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        ConsoleNotifier cn;\n        FileSplitter splitter(filePath, number);\n        \n        splitter.addIprogress(this);\n        splitter.addIprogress(&cn);\n        \n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n\nclass ConsoleNotifier: public IProgress {\npublic:\n    virtual void DoProgress(float value) {\n        cout << \".\";\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200806160700160.png\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n## 总结\n\n* 使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 \n\n* 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。\n\n* 观察者自己决定是否需要订阅通知，目标对象对此一无所知。 \n* Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。","source":"_posts/DesignPatterns/Observer.md","raw":"---\ntitle: Observer 观察者模式\ndate: 2020-08-06 14:22:25\nindex_img: /img/image-20200806160700160.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n\n\n## 动机\n\n在软件构建过程中，我们需要为某些对象建立一种\"通知依赖关系\" \n\n<u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。\n\n使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。\n\n\n\n## 模式定义\n\n定义对象间的一种<u>***一对多***</u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u>***自动更新***</u>。\n\n\n\n## 代码示例\n\n考虑一个文件分割器程序，将一个大文件分割成几个小文件。\n\n我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割\n\n代码如下\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n        }\n    }\n}\n```\n\n\n\n#### 需求1：文件分割进度条\n\n* 第一种实现方式\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n/***增加progress bar***/\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n/***增加progres bar***/\n    ProgressBar* m_progressBar;\npublic:\n/***增加初始化参数***/\n    FileSplitter(const strign& filePath, int fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n/***更新progress bar***/\n            if(m_progressBar != NULL) {\n                m_progressBar->setValue((i + 1) / m_fileNumber);\n            }\n        }\n    }\n}\n```\n\n{% note warning%}\n\n但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。\n\n{% endnote %}\n\n\n\n* 第二种实现方式\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            if(m_iprogress != NULL) {\n                float progressValue = m_fileNumber;\n                progressValue = (i + 1) / progressValue;\n                m_iprogress->DoProgress(progressValue); //更新进度条\n            }\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n```\n\nC++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况\n\n* 再修改一下\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        if(m_iprogress != NULL) {\n\t        m_iprogress->DoProgress(value);\t//更新进度条\n        }\n    }\n}\n```\n\n\n\n\n\n#### 需求2: 多观察者\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    List<IProgress*> m_iprogressList; //抽象通知机制, 支持多个观察者\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void addIProgress(IProgress* iprogress) {\n        m_iprogressList.add(iprogress);\n    }\n    \n    void removeIProgress(IProgress* iprogress) {\n        m_iprogressList.remove(iprogress);\n    }\n    \n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        List<IProgress*>::iterator it = m_iprogressList.begin();\n        \n\t\twhile(it != m_iprogressList.end()) {\n            (*it)->DoProgress(value);\n            it++;\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        ConsoleNotifier cn;\n        FileSplitter splitter(filePath, number);\n        \n        splitter.addIprogress(this);\n        splitter.addIprogress(&cn);\n        \n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n\nclass ConsoleNotifier: public IProgress {\npublic:\n    virtual void DoProgress(float value) {\n        cout << \".\";\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200806160700160.png\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n## 总结\n\n* 使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 \n\n* 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。\n\n* 观察者自己决定是否需要订阅通知，目标对象对此一无所知。 \n* Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。","slug":"DesignPatterns/Observer","published":1,"updated":"2020-08-06T08:29:54.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdjycnun0004iuufhngofylt","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，我们需要为某些对象建立一种”通知依赖关系” </p>\n<p><u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。</p>\n<p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义对象间的一种<u><strong><em>一对多</em></strong></u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u><strong><em>自动更新</em></strong></u>。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一个文件分割器程序，将一个大文件分割成几个小文件。</p>\n<p>我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割</p>\n<p>代码如下</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<h4 id=\"需求1：文件分割进度条\"><a href=\"#需求1：文件分割进度条\" class=\"headerlink\" title=\"需求1：文件分割进度条\"></a>需求1：文件分割进度条</h4><ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-comment\">/***增加progress bar***/</span>\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-comment\">/***增加progres bar***/</span>\n    ProgressBar* m_progressBar;\n<span class=\"hljs-keyword\">public</span>:\n<span class=\"hljs-comment\">/***增加初始化参数***/</span>\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-comment\">/***更新progress bar***/</span>\n            <span class=\"hljs-keyword\">if</span>(m_progressBar != <span class=\"hljs-literal\">NULL</span>) &#123;\n                m_progressBar-&gt;setValue((i + <span class=\"hljs-number\">1</span>) / m_fileNumber);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"note note-warning\">\n            <p>但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。</p>\n          </div>\n\n\n\n<ul>\n<li>第二种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n                <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n                progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n                m_iprogress-&gt;DoProgress(progressValue); <span class=\"hljs-comment\">//更新进度条</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;</code></pre></div>\n\n<p>C++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况</p>\n<ul>\n<li>再修改一下</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n\t        m_iprogress-&gt;DoProgress(value);\t<span class=\"hljs-comment\">//更新进度条</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n\n\n<h4 id=\"需求2-多观察者\"><a href=\"#需求2-多观察者\" class=\"headerlink\" title=\"需求2: 多观察者\"></a>需求2: 多观察者</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    List&lt;IProgress*&gt; m_iprogressList; <span class=\"hljs-comment\">//抽象通知机制, 支持多个观察者</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.add(iprogress);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.remove(iprogress);\n    &#125;\n    \n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        List&lt;IProgress*&gt;::iterator it = m_iprogressList.begin();\n        \n\t\t<span class=\"hljs-keyword\">while</span>(it != m_iprogressList.end()) &#123;\n            (*it)-&gt;DoProgress(value);\n            it++;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        ConsoleNotifier cn;\n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        \n        splitter.addIprogress(<span class=\"hljs-keyword\">this</span>);\n        splitter.addIprogress(&amp;cn);\n        \n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsoleNotifier</span>:</span> <span class=\"hljs-keyword\">public</span> IProgress &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\".\"</span>;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><img src=\"image-20200806160700160.png\" srcset=\"/img/loading.gif\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 </p>\n</li>\n<li><p>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</p>\n</li>\n<li><p>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </p>\n</li>\n<li><p>Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，我们需要为某些对象建立一种”通知依赖关系” </p>\n<p><u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。</p>\n<p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义对象间的一种<u><strong><em>一对多</em></strong></u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u><strong><em>自动更新</em></strong></u>。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一个文件分割器程序，将一个大文件分割成几个小文件。</p>\n<p>我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割</p>\n<p>代码如下</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<h4 id=\"需求1：文件分割进度条\"><a href=\"#需求1：文件分割进度条\" class=\"headerlink\" title=\"需求1：文件分割进度条\"></a>需求1：文件分割进度条</h4><ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-comment\">/***增加progress bar***/</span>\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-comment\">/***增加progres bar***/</span>\n    ProgressBar* m_progressBar;\n<span class=\"hljs-keyword\">public</span>:\n<span class=\"hljs-comment\">/***增加初始化参数***/</span>\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-comment\">/***更新progress bar***/</span>\n            <span class=\"hljs-keyword\">if</span>(m_progressBar != <span class=\"hljs-literal\">NULL</span>) &#123;\n                m_progressBar-&gt;setValue((i + <span class=\"hljs-number\">1</span>) / m_fileNumber);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"note note-warning\">\n            <p>但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。</p>\n          </div>\n\n\n\n<ul>\n<li>第二种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n                <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n                progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n                m_iprogress-&gt;DoProgress(progressValue); <span class=\"hljs-comment\">//更新进度条</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;</code></pre></div>\n\n<p>C++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况</p>\n<ul>\n<li>再修改一下</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n\t        m_iprogress-&gt;DoProgress(value);\t<span class=\"hljs-comment\">//更新进度条</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n\n\n<h4 id=\"需求2-多观察者\"><a href=\"#需求2-多观察者\" class=\"headerlink\" title=\"需求2: 多观察者\"></a>需求2: 多观察者</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    List&lt;IProgress*&gt; m_iprogressList; <span class=\"hljs-comment\">//抽象通知机制, 支持多个观察者</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.add(iprogress);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.remove(iprogress);\n    &#125;\n    \n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        List&lt;IProgress*&gt;::iterator it = m_iprogressList.begin();\n        \n\t\t<span class=\"hljs-keyword\">while</span>(it != m_iprogressList.end()) &#123;\n            (*it)-&gt;DoProgress(value);\n            it++;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        ConsoleNotifier cn;\n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        \n        splitter.addIprogress(<span class=\"hljs-keyword\">this</span>);\n        splitter.addIprogress(&amp;cn);\n        \n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsoleNotifier</span>:</span> <span class=\"hljs-keyword\">public</span> IProgress &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\".\"</span>;\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><img src=\"image-20200806160700160.png\" srcset=\"/img/loading.gif\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 </p>\n</li>\n<li><p>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</p>\n</li>\n<li><p>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </p>\n</li>\n<li><p>Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。</p>\n</li>\n</ul>\n"},{"title":"CA - Instruction Set","date":"2019-09-08T14:04:07.000Z","index_img":"/img/image-20190930101228492.png","_content":"\n# <a name=\"ISA\">附录A 指令集基本原理 </a>\n\n# 1 What is ISA?\n\nISA: Instruction Set Architecture\n\n<img src=\"image-20190930101228492.png\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n# 2 What types of ISA?\n\n### 2.1 Basis\n\n* type of internal storage\n\n> stack\n>\n> accumulator\n>\n> Register-memory\n>\n> Register-register/load-store\n\n<br/>\n\n先来解释一下implicit operand和explicit operand\n\n* explicit operand\n\n明确到哪个地方去取的操作数，比如到某一个由指令确定的***寄存器***，或者内存中一个由指令确定的***存储器地址***\n\n* implicit operand\n\n不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。\n\n<br/>\n\n<img src=\"image-20191218224444341.png\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\nC=A+B的代码示例\n\n<img src=\"image-20191218224500000.png\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\nexample problem\n\n<img src=\"image-20191218224924929.png\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n#### 2.1.1 Stack Architecture\n\n***<u>operand</u>***:\n\n>  2 ***<u>implicit</u>*** operands on the top of the stack(***TOS***)\n\n用图来看一下以下操作的过程\n\n```\nC = A + B (memory locations)\nPush A\nPush B\nAdd \nPop C\n```\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n#### 2.1.2 Accumulator Architecture\n\n***<u>operand</u>***\n\n> one implicit operand: accumulator\n>\n> one explicit operand: mem location\n\n看一下以下操作的过程\n\n```\nC = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan implicit input operand \nand a result\n```\n\n  \n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n  \t<td>\n  <img src=\"image-20190930115734010.png\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n# 3. 存储器寻址\n\n## 3.1 解释存储器地址\n\ni. 关于如何对一个较大对象中的字节排序：\n\n* Little Endian : store least significant byte in the smallest address\n\n<img src=\"image-20191014101250484.png\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n* Big Endian : store most significant byte in the smallest address\n\n<img src=\"image-20191014101429477.png\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\nii. 字节对齐\n\n大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的\n\n<img src=\"image-20191014101703881.png\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n为什么要对齐\n\n> When well aligned, requires only one memory access to read one object;\n>\n> If address is not well aligned, each misaligned object requires two memory accesses to fetch.\n\n## 3.2  Addressing modes\n\n<img src=\"image-20191014102744097-6809392.png\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\nReferences:  \n\n[1]计算机体系结构 量化研究方法\n\n","source":"_posts/instructionSet.md","raw":"---\ntitle: CA - Instruction Set\ndate: 2019-09-08 22:04:07\ntags: Computer Architecture\ncategories: Computer Architecture\nindex_img: /img/image-20190930101228492.png\n---\n\n# <a name=\"ISA\">附录A 指令集基本原理 </a>\n\n# 1 What is ISA?\n\nISA: Instruction Set Architecture\n\n<img src=\"image-20190930101228492.png\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n# 2 What types of ISA?\n\n### 2.1 Basis\n\n* type of internal storage\n\n> stack\n>\n> accumulator\n>\n> Register-memory\n>\n> Register-register/load-store\n\n<br/>\n\n先来解释一下implicit operand和explicit operand\n\n* explicit operand\n\n明确到哪个地方去取的操作数，比如到某一个由指令确定的***寄存器***，或者内存中一个由指令确定的***存储器地址***\n\n* implicit operand\n\n不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。\n\n<br/>\n\n<img src=\"image-20191218224444341.png\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\nC=A+B的代码示例\n\n<img src=\"image-20191218224500000.png\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\nexample problem\n\n<img src=\"image-20191218224924929.png\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n#### 2.1.1 Stack Architecture\n\n***<u>operand</u>***:\n\n>  2 ***<u>implicit</u>*** operands on the top of the stack(***TOS***)\n\n用图来看一下以下操作的过程\n\n```\nC = A + B (memory locations)\nPush A\nPush B\nAdd \nPop C\n```\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n#### 2.1.2 Accumulator Architecture\n\n***<u>operand</u>***\n\n> one implicit operand: accumulator\n>\n> one explicit operand: mem location\n\n看一下以下操作的过程\n\n```\nC = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan implicit input operand \nand a result\n```\n\n  \n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n  \t<td>\n  <img src=\"image-20190930115734010.png\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n# 3. 存储器寻址\n\n## 3.1 解释存储器地址\n\ni. 关于如何对一个较大对象中的字节排序：\n\n* Little Endian : store least significant byte in the smallest address\n\n<img src=\"image-20191014101250484.png\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n* Big Endian : store most significant byte in the smallest address\n\n<img src=\"image-20191014101429477.png\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\nii. 字节对齐\n\n大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的\n\n<img src=\"image-20191014101703881.png\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n为什么要对齐\n\n> When well aligned, requires only one memory access to read one object;\n>\n> If address is not well aligned, each misaligned object requires two memory accesses to fetch.\n\n## 3.2  Addressing modes\n\n<img src=\"image-20191014102744097-6809392.png\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\nReferences:  \n\n[1]计算机体系结构 量化研究方法\n\n","slug":"instructionSet","published":1,"updated":"2020-08-07T14:14:21.634Z","_id":"ckdkb46cz0000uyuf0t0t0wwh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"附录A-指令集基本原理\"><a href=\"#附录A-指令集基本原理\" class=\"headerlink\" title=\"附录A 指令集基本原理 \"></a><a name=\"ISA\">附录A 指令集基本原理 </a></h1><h1 id=\"1-What-is-ISA\"><a href=\"#1-What-is-ISA\" class=\"headerlink\" title=\"1 What is ISA?\"></a>1 What is ISA?</h1><p>ISA: Instruction Set Architecture</p>\n<img src=\"image-20190930101228492.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n<h1 id=\"2-What-types-of-ISA\"><a href=\"#2-What-types-of-ISA\" class=\"headerlink\" title=\"2 What types of ISA?\"></a>2 What types of ISA?</h1><h3 id=\"2-1-Basis\"><a href=\"#2-1-Basis\" class=\"headerlink\" title=\"2.1 Basis\"></a>2.1 Basis</h3><ul>\n<li>type of internal storage</li>\n</ul>\n<blockquote>\n<p>stack</p>\n<p>accumulator</p>\n<p>Register-memory</p>\n<p>Register-register/load-store</p>\n</blockquote>\n<br/>\n\n<p>先来解释一下implicit operand和explicit operand</p>\n<ul>\n<li>explicit operand</li>\n</ul>\n<p>明确到哪个地方去取的操作数，比如到某一个由指令确定的<strong><em>寄存器</em></strong>，或者内存中一个由指令确定的<strong><em>存储器地址</em></strong></p>\n<ul>\n<li>implicit operand</li>\n</ul>\n<p>不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。</p>\n<br/>\n\n<img src=\"image-20191218224444341.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\n<p>C=A+B的代码示例</p>\n<img src=\"image-20191218224500000.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\n<p>example problem</p>\n<img src=\"image-20191218224924929.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n<h4 id=\"2-1-1-Stack-Architecture\"><a href=\"#2-1-1-Stack-Architecture\" class=\"headerlink\" title=\"2.1.1 Stack Architecture\"></a>2.1.1 Stack Architecture</h4><p><strong>*<u>operand</u>*</strong>:</p>\n<blockquote>\n<p> 2 <strong>*<u>implicit</u>*</strong> operands on the top of the stack(<strong><em>TOS</em></strong>)</p>\n</blockquote>\n<p>用图来看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\">C = A + <span class=\"hljs-keyword\">B </span>(memory locations)\n<span class=\"hljs-keyword\">Push </span>A\n<span class=\"hljs-keyword\">Push </span><span class=\"hljs-keyword\">B</span>\n<span class=\"hljs-keyword\">Add </span>\n<span class=\"hljs-keyword\">Pop </span>C</code></pre></div>\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n<h4 id=\"2-1-2-Accumulator-Architecture\"><a href=\"#2-1-2-Accumulator-Architecture\" class=\"headerlink\" title=\"2.1.2 Accumulator Architecture\"></a>2.1.2 Accumulator Architecture</h4><p><strong>*<u>operand</u>*</strong></p>\n<blockquote>\n<p>one implicit operand: accumulator</p>\n<p>one explicit operand: mem location</p>\n</blockquote>\n<p>看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs fortran\">C = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan <span class=\"hljs-keyword\">implicit</span> input operand \nand a result</code></pre></div>\n\n\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n      <td>\n  <img src=\"image-20190930115734010.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n<h1 id=\"3-存储器寻址\"><a href=\"#3-存储器寻址\" class=\"headerlink\" title=\"3. 存储器寻址\"></a>3. 存储器寻址</h1><h2 id=\"3-1-解释存储器地址\"><a href=\"#3-1-解释存储器地址\" class=\"headerlink\" title=\"3.1 解释存储器地址\"></a>3.1 解释存储器地址</h2><p>i. 关于如何对一个较大对象中的字节排序：</p>\n<ul>\n<li>Little Endian : store least significant byte in the smallest address</li>\n</ul>\n<img src=\"image-20191014101250484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n<ul>\n<li>Big Endian : store most significant byte in the smallest address</li>\n</ul>\n<img src=\"image-20191014101429477.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\n<p>ii. 字节对齐</p>\n<p>大小为s bytes的对象，字节地址为A, 如果$A; mod;s = 0$ , 那么是字节对齐的</p>\n<img src=\"image-20191014101703881.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n<p>为什么要对齐</p>\n<blockquote>\n<p>When well aligned, requires only one memory access to read one object;</p>\n<p>If address is not well aligned, each misaligned object requires two memory accesses to fetch.</p>\n</blockquote>\n<h2 id=\"3-2-Addressing-modes\"><a href=\"#3-2-Addressing-modes\" class=\"headerlink\" title=\"3.2  Addressing modes\"></a>3.2  Addressing modes</h2><img src=\"image-20191014102744097-6809392.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>References:  </p>\n<p>[1]计算机体系结构 量化研究方法</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"附录A-指令集基本原理\"><a href=\"#附录A-指令集基本原理\" class=\"headerlink\" title=\"附录A 指令集基本原理 \"></a><a name=\"ISA\">附录A 指令集基本原理 </a></h1><h1 id=\"1-What-is-ISA\"><a href=\"#1-What-is-ISA\" class=\"headerlink\" title=\"1 What is ISA?\"></a>1 What is ISA?</h1><p>ISA: Instruction Set Architecture</p>\n<img src=\"image-20190930101228492.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n<h1 id=\"2-What-types-of-ISA\"><a href=\"#2-What-types-of-ISA\" class=\"headerlink\" title=\"2 What types of ISA?\"></a>2 What types of ISA?</h1><h3 id=\"2-1-Basis\"><a href=\"#2-1-Basis\" class=\"headerlink\" title=\"2.1 Basis\"></a>2.1 Basis</h3><ul>\n<li>type of internal storage</li>\n</ul>\n<blockquote>\n<p>stack</p>\n<p>accumulator</p>\n<p>Register-memory</p>\n<p>Register-register/load-store</p>\n</blockquote>\n<br/>\n\n<p>先来解释一下implicit operand和explicit operand</p>\n<ul>\n<li>explicit operand</li>\n</ul>\n<p>明确到哪个地方去取的操作数，比如到某一个由指令确定的<strong><em>寄存器</em></strong>，或者内存中一个由指令确定的<strong><em>存储器地址</em></strong></p>\n<ul>\n<li>implicit operand</li>\n</ul>\n<p>不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。</p>\n<br/>\n\n<img src=\"image-20191218224444341.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\n<p>C=A+B的代码示例</p>\n<img src=\"image-20191218224500000.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\n<p>example problem</p>\n<img src=\"image-20191218224924929.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n<h4 id=\"2-1-1-Stack-Architecture\"><a href=\"#2-1-1-Stack-Architecture\" class=\"headerlink\" title=\"2.1.1 Stack Architecture\"></a>2.1.1 Stack Architecture</h4><p><strong>*<u>operand</u>*</strong>:</p>\n<blockquote>\n<p> 2 <strong>*<u>implicit</u>*</strong> operands on the top of the stack(<strong><em>TOS</em></strong>)</p>\n</blockquote>\n<p>用图来看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\">C = A + <span class=\"hljs-keyword\">B </span>(memory locations)\n<span class=\"hljs-keyword\">Push </span>A\n<span class=\"hljs-keyword\">Push </span><span class=\"hljs-keyword\">B</span>\n<span class=\"hljs-keyword\">Add </span>\n<span class=\"hljs-keyword\">Pop </span>C</code></pre></div>\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n<h4 id=\"2-1-2-Accumulator-Architecture\"><a href=\"#2-1-2-Accumulator-Architecture\" class=\"headerlink\" title=\"2.1.2 Accumulator Architecture\"></a>2.1.2 Accumulator Architecture</h4><p><strong>*<u>operand</u>*</strong></p>\n<blockquote>\n<p>one implicit operand: accumulator</p>\n<p>one explicit operand: mem location</p>\n</blockquote>\n<p>看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs fortran\">C = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan <span class=\"hljs-keyword\">implicit</span> input operand \nand a result</code></pre></div>\n\n\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n      <td>\n  <img src=\"image-20190930115734010.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n<h1 id=\"3-存储器寻址\"><a href=\"#3-存储器寻址\" class=\"headerlink\" title=\"3. 存储器寻址\"></a>3. 存储器寻址</h1><h2 id=\"3-1-解释存储器地址\"><a href=\"#3-1-解释存储器地址\" class=\"headerlink\" title=\"3.1 解释存储器地址\"></a>3.1 解释存储器地址</h2><p>i. 关于如何对一个较大对象中的字节排序：</p>\n<ul>\n<li>Little Endian : store least significant byte in the smallest address</li>\n</ul>\n<img src=\"image-20191014101250484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n<ul>\n<li>Big Endian : store most significant byte in the smallest address</li>\n</ul>\n<img src=\"image-20191014101429477.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\n<p>ii. 字节对齐</p>\n<p>大小为s bytes的对象，字节地址为A, 如果$A; mod;s = 0$ , 那么是字节对齐的</p>\n<img src=\"image-20191014101703881.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n<p>为什么要对齐</p>\n<blockquote>\n<p>When well aligned, requires only one memory access to read one object;</p>\n<p>If address is not well aligned, each misaligned object requires two memory accesses to fetch.</p>\n</blockquote>\n<h2 id=\"3-2-Addressing-modes\"><a href=\"#3-2-Addressing-modes\" class=\"headerlink\" title=\"3.2  Addressing modes\"></a>3.2  Addressing modes</h2><img src=\"image-20191014102744097-6809392.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>References:  </p>\n<p>[1]计算机体系结构 量化研究方法</p>\n"},{"title":"面向对象设计原则","date":"2020-08-06T07:20:24.000Z","_content":"\n\n\n{% note info%}\n\n变化是复用的天敌！ 面向对象设计最大的优势在于：<u>***抵御变化***</u>\n\n{% endnote %}\n\n\n\n#### 依赖倒置原则 (DIP)\n\n* 高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。\n\n* 抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。\n\n<br>\n\n#### 开放封闭原则 (OCP)\n\n* 对扩展开放，对更改封闭。\n\n* 类模块应该是可扩展的，但是不可修改。","source":"_posts/DesignPatterns/Principle.md","raw":"---\ntitle: 面向对象设计原则\ndate: 2020-08-06 15:20:24\ntags: Design Patterns\n---\n\n\n\n{% note info%}\n\n变化是复用的天敌！ 面向对象设计最大的优势在于：<u>***抵御变化***</u>\n\n{% endnote %}\n\n\n\n#### 依赖倒置原则 (DIP)\n\n* 高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。\n\n* 抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。\n\n<br>\n\n#### 开放封闭原则 (OCP)\n\n* 对扩展开放，对更改封闭。\n\n* 类模块应该是可扩展的，但是不可修改。","slug":"DesignPatterns/Principle","published":1,"updated":"2020-08-06T07:26:55.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdkb46d60001uyuf1iwtblq4","content":"<div class=\"note note-info\">\n            <p>变化是复用的天敌！ 面向对象设计最大的优势在于：<u><strong><em>抵御变化</em></strong></u></p>\n          </div>\n\n\n\n<h4 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h4><ul>\n<li><p>高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</p>\n</li>\n<li><p>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</p>\n</li>\n</ul>\n<br>\n\n<h4 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h4><ul>\n<li><p>对扩展开放，对更改封闭。</p>\n</li>\n<li><p>类模块应该是可扩展的，但是不可修改。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<div class=\"note note-info\">\n            <p>变化是复用的天敌！ 面向对象设计最大的优势在于：<u><strong><em>抵御变化</em></strong></u></p>\n          </div>\n\n\n\n<h4 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h4><ul>\n<li><p>高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</p>\n</li>\n<li><p>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</p>\n</li>\n</ul>\n<br>\n\n<h4 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h4><ul>\n<li><p>对扩展开放，对更改封闭。</p>\n</li>\n<li><p>类模块应该是可扩展的，但是不可修改。</p>\n</li>\n</ul>\n"},{"title":"Decorator","date":"2020-08-07T06:15:57.000Z","index_img":"/img/image-20200807160507597.png","_content":"\n## 动机\n\n在某些情况下我们可能会\"过度地使用继承来扩展对象的功能\"， 由于继承为类型引入的**静态特质**，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。\n\n如何使\"对象功能的扩展\"能够根据需要来动态地实现？同时避免\"扩展功能的增多\"带来的子类膨胀问题？从而使得任何\"功能扩展变化\"所导致的影响将为最低？\n\n所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream->Read(), 支持多态，可以产生变化。\n\n\n\n## 模式定义\n\n动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 & 减少子类个数）。\n\n\n\n## 代码示例\n\n下面给出一个Stream代码示例，其继承关系如下所示\n\n<img src=\"image-20200807143722316.png\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n```cpp\n//业务操作\nclass Stream {\npublic:\n    virtual char Read(int number) = 0;\n    virtual void Seek(int position) = 0;\n    virtual void Write(char data) = 0;\n    \n    virtual ~Stream() {}\n};\n\n//主体类\nclass FileStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读文件流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位文件流\n    }\n    \n    virtual void Write(char data) {\n        //写文件流\n    }\n};\n\nclass NetworkStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读网络流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位网络流\n    }\n    \n    virtual void Write(char data) {\n        //写网络流\n    }\n};\n\nclass MemoryStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读内存流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位内存流\n    }\n    \n    virtual void Write(char data) {\n        //写内存流\n    }\n};\n\n//扩展操作\nclass CryptoFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        FileStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        FileStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        FileStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream: public NetworkStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        NetworkStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        NetworkStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        NetworkStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream: public MemoryStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        MemoryStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        MemoryStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        MemoryStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedFileStream: public FileStream {\n    //...\n};\n\nclass BufferedNetworkStream: public NetworkStream {\n    //...\n};\n\nclass BufferedMemoryStream: public MemoryStream {\n    //...\n};\n\nclass CryptoBufferedFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Read(number);//读文件流\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Seek(position);//定位文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n    \n    virtual void Write(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Write(position);//写文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n};\n\nvoid Process() {\n    //编译时装配\n    CryptoFileStream* fs1 = new CryptoFileStream();\n    \n    BufferedFileStream* fs2 = new BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = new CryptoBufferedFileStream();\n}\n```\n\n这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。\n\n\n\n* 重构\n\n```cpp\n//扩展操作\nclass CryptoFileStream {\n    FileStream* stream;//=new FileStream()\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream {\n    NetworkStream* stream;\t//=new NetworkStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream {\n    MemoryStream* stream;\t//=new MemoryStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n```\n\n* 继续重构\n\n```cpp\n//扩展操作\nclass CryptoStream: public Stream {\n    Stream* stream;//...\npublic:\n    CryptoStream(Stream* stm): stream(stm) {\n        \n    }\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public Stream {\n    Stream* stream; //...\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范\n\n\n\n* 继续重构\n\nCryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，\n\n设置一个DecoratorStream中间类\n\n```cpp\n//扩展操作\nclass DecoratorStream: public Stream {\nprotected:\n    Stream* stream; //...\n    DecoratorStream(Stream* stm): DecoratorStream(stm) {\n        \n    }\n}\nclass CryptoStream: public DecoratorStream {\npublic:\n    CryptoStream(Stream* stm): DecoratorStream(stm) {}\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public DecoratorStream {\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n新的类关系\n\n<img src=\"image-20200807143823919.png\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n## 结构\n\n<img src=\"image-20200807160507597.png\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* 通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的\"灵活性差\"和\"多子类衍生问题\"。\n\n* Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。\n\n* Decorator模式的目的并非解决\"多子类衍生的多继承\"问题，Decorator模式应用的要点在于解决\"主体类在多个方向上的扩展 功能\"——是为\"装饰\"的含义。\n\n## Decorator属于单一职责模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge","source":"_posts/DesignPatterns/Decorator.md","raw":"---\ntitle: Decorator\ndate: 2020-08-07 14:15:57\nindex_img: /img/image-20200807160507597.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## 动机\n\n在某些情况下我们可能会\"过度地使用继承来扩展对象的功能\"， 由于继承为类型引入的**静态特质**，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。\n\n如何使\"对象功能的扩展\"能够根据需要来动态地实现？同时避免\"扩展功能的增多\"带来的子类膨胀问题？从而使得任何\"功能扩展变化\"所导致的影响将为最低？\n\n所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream->Read(), 支持多态，可以产生变化。\n\n\n\n## 模式定义\n\n动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 & 减少子类个数）。\n\n\n\n## 代码示例\n\n下面给出一个Stream代码示例，其继承关系如下所示\n\n<img src=\"image-20200807143722316.png\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n```cpp\n//业务操作\nclass Stream {\npublic:\n    virtual char Read(int number) = 0;\n    virtual void Seek(int position) = 0;\n    virtual void Write(char data) = 0;\n    \n    virtual ~Stream() {}\n};\n\n//主体类\nclass FileStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读文件流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位文件流\n    }\n    \n    virtual void Write(char data) {\n        //写文件流\n    }\n};\n\nclass NetworkStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读网络流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位网络流\n    }\n    \n    virtual void Write(char data) {\n        //写网络流\n    }\n};\n\nclass MemoryStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读内存流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位内存流\n    }\n    \n    virtual void Write(char data) {\n        //写内存流\n    }\n};\n\n//扩展操作\nclass CryptoFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        FileStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        FileStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        FileStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream: public NetworkStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        NetworkStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        NetworkStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        NetworkStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream: public MemoryStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        MemoryStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        MemoryStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        MemoryStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedFileStream: public FileStream {\n    //...\n};\n\nclass BufferedNetworkStream: public NetworkStream {\n    //...\n};\n\nclass BufferedMemoryStream: public MemoryStream {\n    //...\n};\n\nclass CryptoBufferedFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Read(number);//读文件流\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Seek(position);//定位文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n    \n    virtual void Write(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Write(position);//写文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n};\n\nvoid Process() {\n    //编译时装配\n    CryptoFileStream* fs1 = new CryptoFileStream();\n    \n    BufferedFileStream* fs2 = new BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = new CryptoBufferedFileStream();\n}\n```\n\n这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。\n\n\n\n* 重构\n\n```cpp\n//扩展操作\nclass CryptoFileStream {\n    FileStream* stream;//=new FileStream()\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream {\n    NetworkStream* stream;\t//=new NetworkStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream {\n    MemoryStream* stream;\t//=new MemoryStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n```\n\n* 继续重构\n\n```cpp\n//扩展操作\nclass CryptoStream: public Stream {\n    Stream* stream;//...\npublic:\n    CryptoStream(Stream* stm): stream(stm) {\n        \n    }\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public Stream {\n    Stream* stream; //...\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范\n\n\n\n* 继续重构\n\nCryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，\n\n设置一个DecoratorStream中间类\n\n```cpp\n//扩展操作\nclass DecoratorStream: public Stream {\nprotected:\n    Stream* stream; //...\n    DecoratorStream(Stream* stm): DecoratorStream(stm) {\n        \n    }\n}\nclass CryptoStream: public DecoratorStream {\npublic:\n    CryptoStream(Stream* stm): DecoratorStream(stm) {}\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public DecoratorStream {\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n新的类关系\n\n<img src=\"image-20200807143823919.png\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n## 结构\n\n<img src=\"image-20200807160507597.png\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* 通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的\"灵活性差\"和\"多子类衍生问题\"。\n\n* Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。\n\n* Decorator模式的目的并非解决\"多子类衍生的多继承\"问题，Decorator模式应用的要点在于解决\"主体类在多个方向上的扩展 功能\"——是为\"装饰\"的含义。\n\n## Decorator属于单一职责模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge","slug":"DesignPatterns/Decorator","published":1,"updated":"2020-08-07T08:13:58.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdkb46d70002uyuf3jfd4e3o","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在某些情况下我们可能会”过度地使用继承来扩展对象的功能”， 由于继承为类型引入的<strong>静态特质</strong>，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p>\n<p>如何使”对象功能的扩展”能够根据需要来动态地实现？同时避免”扩展功能的增多”带来的子类膨胀问题？从而使得任何”功能扩展变化”所导致的影响将为最低？</p>\n<p>所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream-&gt;Read(), 支持多态，可以产生变化。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>下面给出一个Stream代码示例，其继承关系如下所示</p>\n<img src=\"image-20200807143722316.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//业务操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stream</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Stream() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-comment\">//主体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读文件流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写文件流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读网络流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位网络流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写网络流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读内存流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位内存流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写内存流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoBufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Read(number);<span class=\"hljs-comment\">//读文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Seek(position);<span class=\"hljs-comment\">//定位文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Write(position);<span class=\"hljs-comment\">//写文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//编译时装配</span>\n    CryptoFileStream* fs1 = <span class=\"hljs-keyword\">new</span> CryptoFileStream();\n    \n    BufferedFileStream* fs2 = <span class=\"hljs-keyword\">new</span> BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = <span class=\"hljs-keyword\">new</span> CryptoBufferedFileStream();\n&#125;</code></pre></div>\n\n<p>这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。</p>\n<ul>\n<li>重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span> &#123;</span>\n    FileStream* stream;<span class=\"hljs-comment\">//=new FileStream()</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span> &#123;</span>\n    NetworkStream* stream;\t<span class=\"hljs-comment\">//=new NetworkStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span> &#123;</span>\n    MemoryStream* stream;\t<span class=\"hljs-comment\">//=new MemoryStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;</code></pre></div>\n\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream;<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): stream(stm) &#123;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n\n<p>很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>CryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，</p>\n<p>设置一个DecoratorStream中间类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    DecoratorStream(Stream* stm): DecoratorStream(stm) &#123;\n        \n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): DecoratorStream(stm) &#123;&#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n\n<p>新的类关系</p>\n<img src=\"image-20200807143823919.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><img src=\"image-20200807160507597.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的”灵活性差”和”多子类衍生问题”。</p>\n</li>\n<li><p>Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。</p>\n</li>\n<li><p>Decorator模式的目的并非解决”多子类衍生的多继承”问题，Decorator模式应用的要点在于解决”主体类在多个方向上的扩展 功能”——是为”装饰”的含义。</p>\n</li>\n</ul>\n<h2 id=\"Decorator属于单一职责模式\"><a href=\"#Decorator属于单一职责模式\" class=\"headerlink\" title=\"Decorator属于单一职责模式\"></a>Decorator属于单一职责模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在某些情况下我们可能会”过度地使用继承来扩展对象的功能”， 由于继承为类型引入的<strong>静态特质</strong>，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p>\n<p>如何使”对象功能的扩展”能够根据需要来动态地实现？同时避免”扩展功能的增多”带来的子类膨胀问题？从而使得任何”功能扩展变化”所导致的影响将为最低？</p>\n<p>所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream-&gt;Read(), 支持多态，可以产生变化。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>下面给出一个Stream代码示例，其继承关系如下所示</p>\n<img src=\"image-20200807143722316.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//业务操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stream</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Stream() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-comment\">//主体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读文件流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写文件流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读网络流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位网络流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写网络流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读内存流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位内存流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写内存流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoBufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Read(number);<span class=\"hljs-comment\">//读文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Seek(position);<span class=\"hljs-comment\">//定位文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Write(position);<span class=\"hljs-comment\">//写文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//编译时装配</span>\n    CryptoFileStream* fs1 = <span class=\"hljs-keyword\">new</span> CryptoFileStream();\n    \n    BufferedFileStream* fs2 = <span class=\"hljs-keyword\">new</span> BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = <span class=\"hljs-keyword\">new</span> CryptoBufferedFileStream();\n&#125;</code></pre></div>\n\n<p>这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。</p>\n<ul>\n<li>重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span> &#123;</span>\n    FileStream* stream;<span class=\"hljs-comment\">//=new FileStream()</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span> &#123;</span>\n    NetworkStream* stream;\t<span class=\"hljs-comment\">//=new NetworkStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span> &#123;</span>\n    MemoryStream* stream;\t<span class=\"hljs-comment\">//=new MemoryStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;</code></pre></div>\n\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream;<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): stream(stm) &#123;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n\n<p>很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>CryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，</p>\n<p>设置一个DecoratorStream中间类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    DecoratorStream(Stream* stm): DecoratorStream(stm) &#123;\n        \n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): DecoratorStream(stm) &#123;&#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n\n<p>新的类关系</p>\n<img src=\"image-20200807143823919.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><img src=\"image-20200807160507597.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的”灵活性差”和”多子类衍生问题”。</p>\n</li>\n<li><p>Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。</p>\n</li>\n<li><p>Decorator模式的目的并非解决”多子类衍生的多继承”问题，Decorator模式应用的要点在于解决”主体类在多个方向上的扩展 功能”——是为”装饰”的含义。</p>\n</li>\n</ul>\n<h2 id=\"Decorator属于单一职责模式\"><a href=\"#Decorator属于单一职责模式\" class=\"headerlink\" title=\"Decorator属于单一职责模式\"></a>Decorator属于单一职责模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n"},{"title":"CA - Pipeline","date":"2019-10-13T14:04:07.000Z","index_img":"/img/image-20191021110018403.png","_content":"\n<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n## 1 什么是流水线\n\n流水线是一种将多条指令 ***重叠执行*** 的实现技术  \n\n一条执行包含多种操作，流水线充分利用了这些 ***操作之间的并行性***\n<br/>\n\n为了能更形象地理解这个问题，不妨用汽车装配线来做类比    \n\n> 汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  \n>\n> 在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 ***流水级或者流水段***。流水级前后相连形成流水线  \n>\n> 汽车装配线的 ***吞吐量*** 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定\n>\n> 流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 ***处理器周期*** 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。\n\n可以想见，要使流水线性能高，平衡各流水线级很重要  \n\n> 因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]\n\n如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  \n\n$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  \n\n在这些条件下，流水线加速比=流水级的数目\n\n<br/>\n\n# 2 RISC指令集\n\n我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。\n\nRISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期\n\n- ***指令提取周期(IF(Instruction Fetch))***  \n- ***指令译码/寄存器提取周期(ID)***  \n- ***执行/有效地址周期(EX)***  \n- ***存储器访问(MEM)***\n- ***写回周期(WB)***\n\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\nhttp://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\n\n<br/>\n\n# 3 RISC处理器经典五级流水线\n\n<center><img src=\"ca20190908-1.png\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" width=\"600\"></center>\n\n<br/>\n\n在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点\n\n#### A. \n\n使用分离的指令存储器和数据存储器。\n\n这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。\n\n注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供**5倍带宽**\n\n#### B.\n\n两个阶段使用了寄存器堆：**ID**阶段decode, **WB**阶段writeback写入\n\n因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入\n\n为了出气对相同寄存器堆多次读取和一次写入，***我们在时钟周期的前半部分写寄存器，后半部分读寄存器***\n\n#### C.\n\n程序计数器在IF阶段要递增\n\nID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？\n\n<br/>\n\n除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。\n\n<center><img src=\"image-20191013133054888.png\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n# 4 流水化的主要阻碍-流水线冒险\n\n冒险降低来了流水化所能带来的理想加速比  \n冒险共有一下三类  \n\n1. 结构冒险  \n\n   在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]\n\n2. 数据冒险  \n\n   指令之间存在先后顺序，一条指令取决于先前指令的结果\n\n3. 控制冒险 \n\n   分支指令以及其他改变程序计数器的指令会导致控制冒险\n        \n\n为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。\n\n{% note warning%}\n\n这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的***所有指令也会被停顿***，之前发射的指令不会被停顿\n\n{% endnote %}\n\n<br/>\n\n## 4.1 带有停顿的流水线性能  \n\n$\n流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$\n$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$\n$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$\n\n<br/>\n\n流水化处理器的理想CPI几乎总是等于1，算上停顿\n$\n流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$\n$=1+每条指令的流水线停顿时间周期$\n\n所以\n\n$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$\n\n如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度\n\n$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$\n\n\n\n{% note warning%}\n\n<u>所以，如果没有流水线停顿，加速比=流水线深度</u>\n\n{% endnote %}\n\n## 4.2 结构冒险\n\ni. 什么是结构冒险\n\n> 指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合\n>\n> 如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险\n\nii. 解决方式\n\n在发生结构冒险时，使流水线停顿一个时钟周期\n\n停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大\n\n<br/>\n\n## 4.3 数据冒险\n\ni. 数据冒险是什么\n\n> 有些指令依赖于之前指令的结果\n\n```\nDADD R1, R2, R3\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\nXOR  R10,R1, R11\n```\n\nDADD后的所有指令都用到了DADD指令的结果R1\n\n所以在DADD的结果writeback之前，下面的指令都是不能execute的\n\n<center><img src=\"image-20191013143518878.png\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\nii. 解决方法\n\nA. 转发(forwarding)\n\n转发是一个什么思想呢？ \n\n> DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback\n\n转发的工作方式\n\n1. 来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端\n2. 如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值\n\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" style=\"zoom: 30%;\" /></center>\n\nB, 需要停顿的数据冒险\n\n并非所有的潜在数据冒险都可以通过转发处理\n\n```\nLD   R1, 0(R2)\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\n```\n\n<center><img src=\"image-20191013151122898.png\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n### More about data dependences and hazards\n\n#### A. data dependences\n\n1. 数据相关[真数据相关]\n\n指令i生成的结果可能会被指令j用到\n\n指令j数据相关于指令k, 指令k数据相关于指令i\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n2. 名称相关\n\n当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。\n\n* Anti-dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 reads from a location that is overwritten later by S2\n\n{% note warning%}\n\nWAR\n\n* Output dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 and S2 write to the same location \n\n{% endnote %}\n\nWAW\n\n由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。\n\n\n\n#### B. data hazards\n\n* RAW\n* WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险\n* WAR: 对应于antidependence。\n\n## 4.4 分支冒险\n\n### i. 分支冒险是什么\n\n执行分支指令时，修改后的PC可能等于也可能不等于PC+4。\n\n如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC\n\n那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。\n\n\n\n### ii. 解决方法\n\n一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要\n\n<img src=\"image-20191021095111.png\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n所以，如何降低流水线分支代价？\n\n4种简单的编译时机制\n\n#### A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\n\n#### B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\n\n这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。\n\n这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变\n\n<center><img src=\"image-20191014112116582.png\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n#### C. 将所有分支都看作选中分支\n\n只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。\n\n但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。\n\n#### D. 延迟分支\n\n> 分支指令\n>\n> 依序后续指令[位于delay slots]\n>\n> 选中时的分支指令\n\n获得编译器支持，编译器让后续指令有效并且可用\n\n<center><img src=\"image-20191021095901298.png\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n延迟调度有局限性，这个局限性是因为\n\n>1. 可以排在延迟时隙[delay slots]中的指令有限制\n>2. 编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了*canceling* or *nullifying* branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。\n\n看一下这些不同的解决方法效率有什么差别\n\n<center><img src=\"image-20191021101747938.png\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n考虑flush pipeline\n\nunconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2\n\n其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3\n\n这样，考虑predicted untaken\n\nunconditional 指令被预测不执行，但是一定会执行，代价是2\n\nconditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3\n\n考虑predicted taken\n\n如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转\n\n<br>\n\n当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]\n\n#### i. 静态分支预测\n\n事先收集数据，根据数据来预测分支\n\n#### ii. 动态分支预测\n\n使用分支预测缓冲区[Branch-Prediction Buffer].\n\n这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。\n\n这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转\n\n但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。\n\n所以这里提出了2位预测机制。\n\n两位预测机制，预测必须连续错过两次才会进行修改。\n\n<center><img src=\"image-20191021103246990.png\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n# 5. 如何实现流水线\n\nMIPS CPU多周期实现\n\n<center><img src=\"image-20191021105802697.png\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n## Basic Pipeline\n\n<center><img src=\"image-20191021110018403.png\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n### i. IF\n\n```cpp\nIF/ID.IR = Mem[PC];\t//取指令\nif((EX/MEM.opcode == branch) && EX/MEM.cond) {\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n} else {\n  IF/IR.NPC = PC + 4;\n  PC = PC + 4;\n}\n```\n\n### ii. ID\n\n```cpp\nID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);\n```\n\n### iii. EX\n\n#### A. ALU EX\n\n```cpp\nEX/MEM.IR = ID/EX.IR;\n执行以下之一\n1. EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n2. EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm\n```\n\n#### B. Load Store EX\n\n```cpp\nEX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;\n```\n\n#### C. Branch EX\n\n```cpp\nEX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm << 2);\nEX/MEM.cond = (ID/EX.A == 0);\n```\n\n\n\n### iv. MEM\n\n#### A. ALU MEM\n\n```cpp\nMEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;\n```\n\n#### B. Load Store MEM\n\n```cpp\nMEM/WB.OR = EX/MEM.IR;\n1. MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n2. Mem[EX/MEM.ALUOutput] = EX/MEM.B;\n```\n\n### v. WB\n\n#### A. ALU WB\n\n```cpp\n1. Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n2. Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;\n```\n\n\n\n#### B. Load Store WB\n\n```cpp\nFor load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;\n```\n\n\n\n## Control the Pipeline\n\ninstruction issue:\n\n> 一条指令从ID移入EX的过程\n\n对于整数流水线，所有数据冒险都可以在ID进行检查。\n\n如果存在数据冒险，这个指令将会在issue之前停顿。\n\n同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。\n\n<center><img src=\"image-20191021115323894.png\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\npipeline overhead\n\ndue to stage imbalance, pipeline register setup\n\n\n\n### Deal with forwarding\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n# 6. 扩展MIPS流水线，以处理多周期操作\n\n扩展mips流水线，以处理浮点运算\n\n\n\n浮点运算的问题\n\n> 要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能\n>\n> 如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。\n>\n> 所以\n>\n> * 为了完成操作，EX周期可能要根据需要重复多次\n> * 可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。\n\n\n\n4个独立的功能单元\n\n* 主整数单元，处理load, store, 整数ALU operation, branch\n* 浮点与整数乘法器\n* 浮点加法器，处理浮点加、减和转换\n* 浮点和整型除法器\n\n假定这些功能单元的执行级没有实现流水化\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n两个指标\n\n* latency\n\n  the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。\n\n  > Essentially, pipeline **latency** is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the **EX stage** to the stage that produces the result \n\n* initiation/repeat interval\n\n  同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行\n\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\ninstruction issue: 从ID到EX的阶段\n\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","source":"_posts/pipeline.md","raw":"---\ntitle: CA - Pipeline\ndate: 2019-10-13 22:04:07\ntags: Computer Architecture\ncategories: Computer Architecture\nindex_img: /img/image-20191021110018403.png\n---\n\n<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n## 1 什么是流水线\n\n流水线是一种将多条指令 ***重叠执行*** 的实现技术  \n\n一条执行包含多种操作，流水线充分利用了这些 ***操作之间的并行性***\n<br/>\n\n为了能更形象地理解这个问题，不妨用汽车装配线来做类比    \n\n> 汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  \n>\n> 在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 ***流水级或者流水段***。流水级前后相连形成流水线  \n>\n> 汽车装配线的 ***吞吐量*** 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定\n>\n> 流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 ***处理器周期*** 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。\n\n可以想见，要使流水线性能高，平衡各流水线级很重要  \n\n> 因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]\n\n如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  \n\n$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  \n\n在这些条件下，流水线加速比=流水级的数目\n\n<br/>\n\n# 2 RISC指令集\n\n我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。\n\nRISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期\n\n- ***指令提取周期(IF(Instruction Fetch))***  \n- ***指令译码/寄存器提取周期(ID)***  \n- ***执行/有效地址周期(EX)***  \n- ***存储器访问(MEM)***\n- ***写回周期(WB)***\n\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\nhttp://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\n\n<br/>\n\n# 3 RISC处理器经典五级流水线\n\n<center><img src=\"ca20190908-1.png\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" width=\"600\"></center>\n\n<br/>\n\n在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点\n\n#### A. \n\n使用分离的指令存储器和数据存储器。\n\n这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。\n\n注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供**5倍带宽**\n\n#### B.\n\n两个阶段使用了寄存器堆：**ID**阶段decode, **WB**阶段writeback写入\n\n因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入\n\n为了出气对相同寄存器堆多次读取和一次写入，***我们在时钟周期的前半部分写寄存器，后半部分读寄存器***\n\n#### C.\n\n程序计数器在IF阶段要递增\n\nID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？\n\n<br/>\n\n除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。\n\n<center><img src=\"image-20191013133054888.png\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n# 4 流水化的主要阻碍-流水线冒险\n\n冒险降低来了流水化所能带来的理想加速比  \n冒险共有一下三类  \n\n1. 结构冒险  \n\n   在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]\n\n2. 数据冒险  \n\n   指令之间存在先后顺序，一条指令取决于先前指令的结果\n\n3. 控制冒险 \n\n   分支指令以及其他改变程序计数器的指令会导致控制冒险\n        \n\n为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。\n\n{% note warning%}\n\n这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的***所有指令也会被停顿***，之前发射的指令不会被停顿\n\n{% endnote %}\n\n<br/>\n\n## 4.1 带有停顿的流水线性能  \n\n$\n流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$\n$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$\n$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$\n\n<br/>\n\n流水化处理器的理想CPI几乎总是等于1，算上停顿\n$\n流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$\n$=1+每条指令的流水线停顿时间周期$\n\n所以\n\n$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$\n\n如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度\n\n$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$\n\n\n\n{% note warning%}\n\n<u>所以，如果没有流水线停顿，加速比=流水线深度</u>\n\n{% endnote %}\n\n## 4.2 结构冒险\n\ni. 什么是结构冒险\n\n> 指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合\n>\n> 如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险\n\nii. 解决方式\n\n在发生结构冒险时，使流水线停顿一个时钟周期\n\n停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大\n\n<br/>\n\n## 4.3 数据冒险\n\ni. 数据冒险是什么\n\n> 有些指令依赖于之前指令的结果\n\n```\nDADD R1, R2, R3\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\nXOR  R10,R1, R11\n```\n\nDADD后的所有指令都用到了DADD指令的结果R1\n\n所以在DADD的结果writeback之前，下面的指令都是不能execute的\n\n<center><img src=\"image-20191013143518878.png\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\nii. 解决方法\n\nA. 转发(forwarding)\n\n转发是一个什么思想呢？ \n\n> DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback\n\n转发的工作方式\n\n1. 来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端\n2. 如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值\n\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" style=\"zoom: 30%;\" /></center>\n\nB, 需要停顿的数据冒险\n\n并非所有的潜在数据冒险都可以通过转发处理\n\n```\nLD   R1, 0(R2)\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\n```\n\n<center><img src=\"image-20191013151122898.png\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n### More about data dependences and hazards\n\n#### A. data dependences\n\n1. 数据相关[真数据相关]\n\n指令i生成的结果可能会被指令j用到\n\n指令j数据相关于指令k, 指令k数据相关于指令i\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n2. 名称相关\n\n当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。\n\n* Anti-dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 reads from a location that is overwritten later by S2\n\n{% note warning%}\n\nWAR\n\n* Output dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 and S2 write to the same location \n\n{% endnote %}\n\nWAW\n\n由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。\n\n\n\n#### B. data hazards\n\n* RAW\n* WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险\n* WAR: 对应于antidependence。\n\n## 4.4 分支冒险\n\n### i. 分支冒险是什么\n\n执行分支指令时，修改后的PC可能等于也可能不等于PC+4。\n\n如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC\n\n那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。\n\n\n\n### ii. 解决方法\n\n一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要\n\n<img src=\"image-20191021095111.png\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n所以，如何降低流水线分支代价？\n\n4种简单的编译时机制\n\n#### A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\n\n#### B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\n\n这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。\n\n这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变\n\n<center><img src=\"image-20191014112116582.png\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n#### C. 将所有分支都看作选中分支\n\n只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。\n\n但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。\n\n#### D. 延迟分支\n\n> 分支指令\n>\n> 依序后续指令[位于delay slots]\n>\n> 选中时的分支指令\n\n获得编译器支持，编译器让后续指令有效并且可用\n\n<center><img src=\"image-20191021095901298.png\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n延迟调度有局限性，这个局限性是因为\n\n>1. 可以排在延迟时隙[delay slots]中的指令有限制\n>2. 编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了*canceling* or *nullifying* branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。\n\n看一下这些不同的解决方法效率有什么差别\n\n<center><img src=\"image-20191021101747938.png\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n考虑flush pipeline\n\nunconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2\n\n其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3\n\n这样，考虑predicted untaken\n\nunconditional 指令被预测不执行，但是一定会执行，代价是2\n\nconditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3\n\n考虑predicted taken\n\n如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转\n\n<br>\n\n当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]\n\n#### i. 静态分支预测\n\n事先收集数据，根据数据来预测分支\n\n#### ii. 动态分支预测\n\n使用分支预测缓冲区[Branch-Prediction Buffer].\n\n这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。\n\n这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转\n\n但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。\n\n所以这里提出了2位预测机制。\n\n两位预测机制，预测必须连续错过两次才会进行修改。\n\n<center><img src=\"image-20191021103246990.png\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n# 5. 如何实现流水线\n\nMIPS CPU多周期实现\n\n<center><img src=\"image-20191021105802697.png\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n## Basic Pipeline\n\n<center><img src=\"image-20191021110018403.png\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n### i. IF\n\n```cpp\nIF/ID.IR = Mem[PC];\t//取指令\nif((EX/MEM.opcode == branch) && EX/MEM.cond) {\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n} else {\n  IF/IR.NPC = PC + 4;\n  PC = PC + 4;\n}\n```\n\n### ii. ID\n\n```cpp\nID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);\n```\n\n### iii. EX\n\n#### A. ALU EX\n\n```cpp\nEX/MEM.IR = ID/EX.IR;\n执行以下之一\n1. EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n2. EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm\n```\n\n#### B. Load Store EX\n\n```cpp\nEX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;\n```\n\n#### C. Branch EX\n\n```cpp\nEX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm << 2);\nEX/MEM.cond = (ID/EX.A == 0);\n```\n\n\n\n### iv. MEM\n\n#### A. ALU MEM\n\n```cpp\nMEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;\n```\n\n#### B. Load Store MEM\n\n```cpp\nMEM/WB.OR = EX/MEM.IR;\n1. MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n2. Mem[EX/MEM.ALUOutput] = EX/MEM.B;\n```\n\n### v. WB\n\n#### A. ALU WB\n\n```cpp\n1. Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n2. Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;\n```\n\n\n\n#### B. Load Store WB\n\n```cpp\nFor load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;\n```\n\n\n\n## Control the Pipeline\n\ninstruction issue:\n\n> 一条指令从ID移入EX的过程\n\n对于整数流水线，所有数据冒险都可以在ID进行检查。\n\n如果存在数据冒险，这个指令将会在issue之前停顿。\n\n同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。\n\n<center><img src=\"image-20191021115323894.png\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\npipeline overhead\n\ndue to stage imbalance, pipeline register setup\n\n\n\n### Deal with forwarding\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n# 6. 扩展MIPS流水线，以处理多周期操作\n\n扩展mips流水线，以处理浮点运算\n\n\n\n浮点运算的问题\n\n> 要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能\n>\n> 如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。\n>\n> 所以\n>\n> * 为了完成操作，EX周期可能要根据需要重复多次\n> * 可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。\n\n\n\n4个独立的功能单元\n\n* 主整数单元，处理load, store, 整数ALU operation, branch\n* 浮点与整数乘法器\n* 浮点加法器，处理浮点加、减和转换\n* 浮点和整型除法器\n\n假定这些功能单元的执行级没有实现流水化\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n两个指标\n\n* latency\n\n  the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。\n\n  > Essentially, pipeline **latency** is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the **EX stage** to the stage that produces the result \n\n* initiation/repeat interval\n\n  同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行\n\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\ninstruction issue: 从ID到EX的阶段\n\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","slug":"pipeline","published":1,"updated":"2020-08-07T14:33:05.026Z","_id":"ckdkb8xi70000xmuf2yh0efu9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n<h2 id=\"1-什么是流水线\"><a href=\"#1-什么是流水线\" class=\"headerlink\" title=\"1 什么是流水线\"></a>1 什么是流水线</h2><p>流水线是一种将多条指令 <strong><em>重叠执行</em></strong> 的实现技术  </p>\n<p>一条执行包含多种操作，流水线充分利用了这些 <strong><em>操作之间的并行性</em></strong><br><br/></p>\n<p>为了能更形象地理解这个问题，不妨用汽车装配线来做类比    </p>\n<blockquote>\n<p>汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  </p>\n<p>在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 <strong><em>流水级或者流水段</em></strong>。流水级前后相连形成流水线  </p>\n<p>汽车装配线的 <strong><em>吞吐量</em></strong> 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定</p>\n<p>流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 <strong><em>处理器周期</em></strong> 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。</p>\n</blockquote>\n<p>可以想见，要使流水线性能高，平衡各流水线级很重要  </p>\n<blockquote>\n<p>因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]</p>\n</blockquote>\n<p>如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  </p>\n<p>$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  </p>\n<p>在这些条件下，流水线加速比=流水级的数目</p>\n<br/>\n\n<h1 id=\"2-RISC指令集\"><a href=\"#2-RISC指令集\" class=\"headerlink\" title=\"2 RISC指令集\"></a>2 RISC指令集</h1><p>我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。</p>\n<p>RISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期</p>\n<ul>\n<li><strong><em>指令提取周期(IF(Instruction Fetch))</em></strong>  </li>\n<li><strong><em>指令译码/寄存器提取周期(ID)</em></strong>  </li>\n<li><strong><em>执行/有效地址周期(EX)</em></strong>  </li>\n<li><strong><em>存储器访问(MEM)</em></strong></li>\n<li><strong><em>写回周期(WB)</em></strong></li>\n</ul>\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\n<p><a href=\"http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\" target=\"_blank\" rel=\"noopener\">http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html</a></p>\n<br/>\n\n<h1 id=\"3-RISC处理器经典五级流水线\"><a href=\"#3-RISC处理器经典五级流水线\" class=\"headerlink\" title=\"3 RISC处理器经典五级流水线\"></a>3 RISC处理器经典五级流水线</h1><center><img src=\"ca20190908-1.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n\n<br/>\n\n<p>在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点</p>\n<h4 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A.\"></a>A.</h4><p>使用分离的指令存储器和数据存储器。</p>\n<p>这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。</p>\n<p>注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供<strong>5倍带宽</strong></p>\n<h4 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B.\"></a>B.</h4><p>两个阶段使用了寄存器堆：<strong>ID</strong>阶段decode, <strong>WB</strong>阶段writeback写入</p>\n<p>因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入</p>\n<p>为了出气对相同寄存器堆多次读取和一次写入，<strong><em>我们在时钟周期的前半部分写寄存器，后半部分读寄存器</em></strong></p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C.\"></a>C.</h4><p>程序计数器在IF阶段要递增</p>\n<p>ID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？</p>\n<br/>\n\n<p>除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。</p>\n<center><img src=\"image-20191013133054888.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n<h1 id=\"4-流水化的主要阻碍-流水线冒险\"><a href=\"#4-流水化的主要阻碍-流水线冒险\" class=\"headerlink\" title=\"4 流水化的主要阻碍-流水线冒险\"></a>4 流水化的主要阻碍-流水线冒险</h1><p>冒险降低来了流水化所能带来的理想加速比<br>冒险共有一下三类  </p>\n<ol>\n<li><p>结构冒险  </p>\n<p>在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]</p>\n</li>\n<li><p>数据冒险  </p>\n<p>指令之间存在先后顺序，一条指令取决于先前指令的结果</p>\n</li>\n<li><p>控制冒险 </p>\n<p>分支指令以及其他改变程序计数器的指令会导致控制冒险</p>\n</li>\n</ol>\n<p>为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。</p>\n<div class=\"note note-warning\">\n            <p>这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的<strong><em>所有指令也会被停顿</em></strong>，之前发射的指令不会被停顿</p>\n          </div>\n\n<br/>\n\n<h2 id=\"4-1-带有停顿的流水线性能\"><a href=\"#4-1-带有停顿的流水线性能\" class=\"headerlink\" title=\"4.1 带有停顿的流水线性能\"></a>4.1 带有停顿的流水线性能</h2><p>$<br>流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$<br>$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$<br>$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$</p>\n<br/>\n\n<p>流水化处理器的理想CPI几乎总是等于1，算上停顿<br>$<br>流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$<br>$=1+每条指令的流水线停顿时间周期$</p>\n<p>所以</p>\n<p>$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$</p>\n<p>如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度</p>\n<p>$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$</p>\n<div class=\"note note-warning\">\n            <p><u>所以，如果没有流水线停顿，加速比=流水线深度</u></p>\n          </div>\n\n<h2 id=\"4-2-结构冒险\"><a href=\"#4-2-结构冒险\" class=\"headerlink\" title=\"4.2 结构冒险\"></a>4.2 结构冒险</h2><p>i. 什么是结构冒险</p>\n<blockquote>\n<p>指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合</p>\n<p>如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险</p>\n</blockquote>\n<p>ii. 解决方式</p>\n<p>在发生结构冒险时，使流水线停顿一个时钟周期</p>\n<p>停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大</p>\n<br/>\n\n<h2 id=\"4-3-数据冒险\"><a href=\"#4-3-数据冒险\" class=\"headerlink\" title=\"4.3 数据冒险\"></a>4.3 数据冒险</h2><p>i. 数据冒险是什么</p>\n<blockquote>\n<p>有些指令依赖于之前指令的结果</p>\n</blockquote>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">DADD</span> <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R2</span>, <span class=\"hljs-built_in\">R3</span>\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span>\n<span class=\"hljs-symbol\">XOR</span>  <span class=\"hljs-built_in\">R10</span>,<span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R11</span></code></pre></div>\n\n<p>DADD后的所有指令都用到了DADD指令的结果R1</p>\n<p>所以在DADD的结果writeback之前，下面的指令都是不能execute的</p>\n<center><img src=\"image-20191013143518878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\n<p>ii. 解决方法</p>\n<p>A. 转发(forwarding)</p>\n<p>转发是一个什么思想呢？ </p>\n<blockquote>\n<p>DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback</p>\n</blockquote>\n<p>转发的工作方式</p>\n<ol>\n<li>来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端</li>\n<li>如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值</li>\n</ol>\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" srcset=\"/img/loading.gif\" style=\"zoom: 30%;\" /></center>\n\n<p>B, 需要停顿的数据冒险</p>\n<p>并非所有的潜在数据冒险都可以通过转发处理</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">LD</span>   <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-number\">0</span>(<span class=\"hljs-built_in\">R2</span>)\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span></code></pre></div>\n\n<center><img src=\"image-20191013151122898.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n<h3 id=\"More-about-data-dependences-and-hazards\"><a href=\"#More-about-data-dependences-and-hazards\" class=\"headerlink\" title=\"More about data dependences and hazards\"></a>More about data dependences and hazards</h3><h4 id=\"A-data-dependences\"><a href=\"#A-data-dependences\" class=\"headerlink\" title=\"A. data dependences\"></a>A. data dependences</h4><ol>\n<li>数据相关[真数据相关]</li>\n</ol>\n<p>指令i生成的结果可能会被指令j用到</p>\n<p>指令j数据相关于指令k, 指令k数据相关于指令i</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n<ol start=\"2\">\n<li>名称相关</li>\n</ol>\n<p>当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。</p>\n<ul>\n<li><p>Anti-dependence: S1 -&gt; S2 </p>\n<p>(i)  S1 executes before S2<br>(ii) S1 reads from a location that is overwritten later by S2</p>\n</li>\n</ul>\n<div class=\"note note-warning\">\n            <p>WAR</p><ul><li><p>Output dependence: S1 -&gt; S2 </p><p>(i)  S1 executes before S2<br>(ii) S1 and S2 write to the same location </p></li></ul>\n          </div>\n\n<p>WAW</p>\n<p>由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。</p>\n<h4 id=\"B-data-hazards\"><a href=\"#B-data-hazards\" class=\"headerlink\" title=\"B. data hazards\"></a>B. data hazards</h4><ul>\n<li>RAW</li>\n<li>WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险</li>\n<li>WAR: 对应于antidependence。</li>\n</ul>\n<h2 id=\"4-4-分支冒险\"><a href=\"#4-4-分支冒险\" class=\"headerlink\" title=\"4.4 分支冒险\"></a>4.4 分支冒险</h2><h3 id=\"i-分支冒险是什么\"><a href=\"#i-分支冒险是什么\" class=\"headerlink\" title=\"i. 分支冒险是什么\"></a>i. 分支冒险是什么</h3><p>执行分支指令时，修改后的PC可能等于也可能不等于PC+4。</p>\n<p>如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC</p>\n<p>那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。</p>\n<h3 id=\"ii-解决方法\"><a href=\"#ii-解决方法\" class=\"headerlink\" title=\"ii. 解决方法\"></a>ii. 解决方法</h3><p>一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要</p>\n<img src=\"image-20191021095111.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n<p>所以，如何降低流水线分支代价？</p>\n<p>4种简单的编译时机制</p>\n<h4 id=\"A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"><a href=\"#A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\" class=\"headerlink\" title=\"A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"></a>A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标</h4><h4 id=\"B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"><a href=\"#B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\" class=\"headerlink\" title=\"B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"></a>B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。</h4><p>这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。</p>\n<p>这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变</p>\n<center><img src=\"image-20191014112116582.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n<h4 id=\"C-将所有分支都看作选中分支\"><a href=\"#C-将所有分支都看作选中分支\" class=\"headerlink\" title=\"C. 将所有分支都看作选中分支\"></a>C. 将所有分支都看作选中分支</h4><p>只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。</p>\n<p>但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。</p>\n<h4 id=\"D-延迟分支\"><a href=\"#D-延迟分支\" class=\"headerlink\" title=\"D. 延迟分支\"></a>D. 延迟分支</h4><blockquote>\n<p>分支指令</p>\n<p>依序后续指令[位于delay slots]</p>\n<p>选中时的分支指令</p>\n</blockquote>\n<p>获得编译器支持，编译器让后续指令有效并且可用</p>\n<center><img src=\"image-20191021095901298.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n<p>延迟调度有局限性，这个局限性是因为</p>\n<blockquote>\n<ol>\n<li>可以排在延迟时隙[delay slots]中的指令有限制</li>\n<li>编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了<em>canceling</em> or <em>nullifying</em> branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。</li>\n</ol>\n</blockquote>\n<p>看一下这些不同的解决方法效率有什么差别</p>\n<center><img src=\"image-20191021101747938.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n<p>考虑flush pipeline</p>\n<p>unconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2</p>\n<p>其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3</p>\n<p>这样，考虑predicted untaken</p>\n<p>unconditional 指令被预测不执行，但是一定会执行，代价是2</p>\n<p>conditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3</p>\n<p>考虑predicted taken</p>\n<p>如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转</p>\n<br>\n\n<p>当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]</p>\n<h4 id=\"i-静态分支预测\"><a href=\"#i-静态分支预测\" class=\"headerlink\" title=\"i. 静态分支预测\"></a>i. 静态分支预测</h4><p>事先收集数据，根据数据来预测分支</p>\n<h4 id=\"ii-动态分支预测\"><a href=\"#ii-动态分支预测\" class=\"headerlink\" title=\"ii. 动态分支预测\"></a>ii. 动态分支预测</h4><p>使用分支预测缓冲区[Branch-Prediction Buffer].</p>\n<p>这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。</p>\n<p>这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转</p>\n<p>但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。</p>\n<p>所以这里提出了2位预测机制。</p>\n<p>两位预测机制，预测必须连续错过两次才会进行修改。</p>\n<center><img src=\"image-20191021103246990.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n<h1 id=\"5-如何实现流水线\"><a href=\"#5-如何实现流水线\" class=\"headerlink\" title=\"5. 如何实现流水线\"></a>5. 如何实现流水线</h1><p>MIPS CPU多周期实现</p>\n<center><img src=\"image-20191021105802697.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n<h2 id=\"Basic-Pipeline\"><a href=\"#Basic-Pipeline\" class=\"headerlink\" title=\"Basic Pipeline\"></a>Basic Pipeline</h2><center><img src=\"image-20191021110018403.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n<h3 id=\"i-IF\"><a href=\"#i-IF\" class=\"headerlink\" title=\"i. IF\"></a>i. IF</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">IF/ID.IR = Mem[PC];\t<span class=\"hljs-comment\">//取指令</span>\n<span class=\"hljs-keyword\">if</span>((EX/MEM.opcode == branch) &amp;&amp; EX/MEM.cond) &#123;\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  IF/IR.NPC = PC + <span class=\"hljs-number\">4</span>;\n  PC = PC + <span class=\"hljs-number\">4</span>;\n&#125;</code></pre></div>\n\n<h3 id=\"ii-ID\"><a href=\"#ii-ID\" class=\"headerlink\" title=\"ii. ID\"></a>ii. ID</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">ID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);</code></pre></div>\n\n<h3 id=\"iii-EX\"><a href=\"#iii-EX\" class=\"headerlink\" title=\"iii. EX\"></a>iii. EX</h3><h4 id=\"A-ALU-EX\"><a href=\"#A-ALU-EX\" class=\"headerlink\" title=\"A. ALU EX\"></a>A. ALU EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR = ID/EX.IR;\n执行以下之一\n<span class=\"hljs-number\">1.</span> EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n<span class=\"hljs-number\">2.</span> EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm</code></pre></div>\n\n<h4 id=\"B-Load-Store-EX\"><a href=\"#B-Load-Store-EX\" class=\"headerlink\" title=\"B. Load Store EX\"></a>B. Load Store EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;</code></pre></div>\n\n<h4 id=\"C-Branch-EX\"><a href=\"#C-Branch-EX\" class=\"headerlink\" title=\"C. Branch EX\"></a>C. Branch EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm &lt;&lt; <span class=\"hljs-number\">2</span>);\nEX/MEM.cond = (ID/EX.A == <span class=\"hljs-number\">0</span>);</code></pre></div>\n\n\n\n<h3 id=\"iv-MEM\"><a href=\"#iv-MEM\" class=\"headerlink\" title=\"iv. MEM\"></a>iv. MEM</h3><h4 id=\"A-ALU-MEM\"><a href=\"#A-ALU-MEM\" class=\"headerlink\" title=\"A. ALU MEM\"></a>A. ALU MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;</code></pre></div>\n\n<h4 id=\"B-Load-Store-MEM\"><a href=\"#B-Load-Store-MEM\" class=\"headerlink\" title=\"B. Load Store MEM\"></a>B. Load Store MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.OR = EX/MEM.IR;\n<span class=\"hljs-number\">1.</span> MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n<span class=\"hljs-number\">2.</span> Mem[EX/MEM.ALUOutput] = EX/MEM.B;</code></pre></div>\n\n<h3 id=\"v-WB\"><a href=\"#v-WB\" class=\"headerlink\" title=\"v. WB\"></a>v. WB</h3><h4 id=\"A-ALU-WB\"><a href=\"#A-ALU-WB\" class=\"headerlink\" title=\"A. ALU WB\"></a>A. ALU WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1.</span> Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n<span class=\"hljs-number\">2.</span> Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;</code></pre></div>\n\n\n\n<h4 id=\"B-Load-Store-WB\"><a href=\"#B-Load-Store-WB\" class=\"headerlink\" title=\"B. Load Store WB\"></a>B. Load Store WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">For load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;</code></pre></div>\n\n\n\n<h2 id=\"Control-the-Pipeline\"><a href=\"#Control-the-Pipeline\" class=\"headerlink\" title=\"Control the Pipeline\"></a>Control the Pipeline</h2><p>instruction issue:</p>\n<blockquote>\n<p>一条指令从ID移入EX的过程</p>\n</blockquote>\n<p>对于整数流水线，所有数据冒险都可以在ID进行检查。</p>\n<p>如果存在数据冒险，这个指令将会在issue之前停顿。</p>\n<p>同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。</p>\n<center><img src=\"image-20191021115323894.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\n<p>pipeline overhead</p>\n<p>due to stage imbalance, pipeline register setup</p>\n<h3 id=\"Deal-with-forwarding\"><a href=\"#Deal-with-forwarding\" class=\"headerlink\" title=\"Deal with forwarding\"></a>Deal with forwarding</h3><center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n<h1 id=\"6-扩展MIPS流水线，以处理多周期操作\"><a href=\"#6-扩展MIPS流水线，以处理多周期操作\" class=\"headerlink\" title=\"6. 扩展MIPS流水线，以处理多周期操作\"></a>6. 扩展MIPS流水线，以处理多周期操作</h1><p>扩展mips流水线，以处理浮点运算</p>\n<p>浮点运算的问题</p>\n<blockquote>\n<p>要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能</p>\n<p>如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。</p>\n<p>所以</p>\n<ul>\n<li>为了完成操作，EX周期可能要根据需要重复多次</li>\n<li>可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。</li>\n</ul>\n</blockquote>\n<p>4个独立的功能单元</p>\n<ul>\n<li>主整数单元，处理load, store, 整数ALU operation, branch</li>\n<li>浮点与整数乘法器</li>\n<li>浮点加法器，处理浮点加、减和转换</li>\n<li>浮点和整型除法器</li>\n</ul>\n<p>假定这些功能单元的执行级没有实现流水化</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n<p>两个指标</p>\n<ul>\n<li><p>latency</p>\n<p>the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。</p>\n<blockquote>\n<p>Essentially, pipeline <strong>latency</strong> is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the <strong>EX stage</strong> to the stage that produces the result </p>\n</blockquote>\n</li>\n<li><p>initiation/repeat interval</p>\n<p>同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行</p>\n</li>\n</ul>\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" srcset=\"/img/loading.gif\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>instruction issue: 从ID到EX的阶段</p>\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n<h2 id=\"1-什么是流水线\"><a href=\"#1-什么是流水线\" class=\"headerlink\" title=\"1 什么是流水线\"></a>1 什么是流水线</h2><p>流水线是一种将多条指令 <strong><em>重叠执行</em></strong> 的实现技术  </p>\n<p>一条执行包含多种操作，流水线充分利用了这些 <strong><em>操作之间的并行性</em></strong><br><br/></p>\n<p>为了能更形象地理解这个问题，不妨用汽车装配线来做类比    </p>\n<blockquote>\n<p>汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  </p>\n<p>在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 <strong><em>流水级或者流水段</em></strong>。流水级前后相连形成流水线  </p>\n<p>汽车装配线的 <strong><em>吞吐量</em></strong> 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定</p>\n<p>流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 <strong><em>处理器周期</em></strong> 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。</p>\n</blockquote>\n<p>可以想见，要使流水线性能高，平衡各流水线级很重要  </p>\n<blockquote>\n<p>因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]</p>\n</blockquote>\n<p>如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  </p>\n<p>$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  </p>\n<p>在这些条件下，流水线加速比=流水级的数目</p>\n<br/>\n\n<h1 id=\"2-RISC指令集\"><a href=\"#2-RISC指令集\" class=\"headerlink\" title=\"2 RISC指令集\"></a>2 RISC指令集</h1><p>我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。</p>\n<p>RISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期</p>\n<ul>\n<li><strong><em>指令提取周期(IF(Instruction Fetch))</em></strong>  </li>\n<li><strong><em>指令译码/寄存器提取周期(ID)</em></strong>  </li>\n<li><strong><em>执行/有效地址周期(EX)</em></strong>  </li>\n<li><strong><em>存储器访问(MEM)</em></strong></li>\n<li><strong><em>写回周期(WB)</em></strong></li>\n</ul>\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\n<p><a href=\"http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\" target=\"_blank\" rel=\"noopener\">http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html</a></p>\n<br/>\n\n<h1 id=\"3-RISC处理器经典五级流水线\"><a href=\"#3-RISC处理器经典五级流水线\" class=\"headerlink\" title=\"3 RISC处理器经典五级流水线\"></a>3 RISC处理器经典五级流水线</h1><center><img src=\"ca20190908-1.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n\n<br/>\n\n<p>在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点</p>\n<h4 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A.\"></a>A.</h4><p>使用分离的指令存储器和数据存储器。</p>\n<p>这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。</p>\n<p>注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供<strong>5倍带宽</strong></p>\n<h4 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B.\"></a>B.</h4><p>两个阶段使用了寄存器堆：<strong>ID</strong>阶段decode, <strong>WB</strong>阶段writeback写入</p>\n<p>因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入</p>\n<p>为了出气对相同寄存器堆多次读取和一次写入，<strong><em>我们在时钟周期的前半部分写寄存器，后半部分读寄存器</em></strong></p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C.\"></a>C.</h4><p>程序计数器在IF阶段要递增</p>\n<p>ID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？</p>\n<br/>\n\n<p>除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。</p>\n<center><img src=\"image-20191013133054888.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n<h1 id=\"4-流水化的主要阻碍-流水线冒险\"><a href=\"#4-流水化的主要阻碍-流水线冒险\" class=\"headerlink\" title=\"4 流水化的主要阻碍-流水线冒险\"></a>4 流水化的主要阻碍-流水线冒险</h1><p>冒险降低来了流水化所能带来的理想加速比<br>冒险共有一下三类  </p>\n<ol>\n<li><p>结构冒险  </p>\n<p>在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]</p>\n</li>\n<li><p>数据冒险  </p>\n<p>指令之间存在先后顺序，一条指令取决于先前指令的结果</p>\n</li>\n<li><p>控制冒险 </p>\n<p>分支指令以及其他改变程序计数器的指令会导致控制冒险</p>\n</li>\n</ol>\n<p>为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。</p>\n<div class=\"note note-warning\">\n            <p>这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的<strong><em>所有指令也会被停顿</em></strong>，之前发射的指令不会被停顿</p>\n          </div>\n\n<br/>\n\n<h2 id=\"4-1-带有停顿的流水线性能\"><a href=\"#4-1-带有停顿的流水线性能\" class=\"headerlink\" title=\"4.1 带有停顿的流水线性能\"></a>4.1 带有停顿的流水线性能</h2><p>$<br>流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$<br>$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$<br>$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$</p>\n<br/>\n\n<p>流水化处理器的理想CPI几乎总是等于1，算上停顿<br>$<br>流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$<br>$=1+每条指令的流水线停顿时间周期$</p>\n<p>所以</p>\n<p>$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$</p>\n<p>如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度</p>\n<p>$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$</p>\n<div class=\"note note-warning\">\n            <p><u>所以，如果没有流水线停顿，加速比=流水线深度</u></p>\n          </div>\n\n<h2 id=\"4-2-结构冒险\"><a href=\"#4-2-结构冒险\" class=\"headerlink\" title=\"4.2 结构冒险\"></a>4.2 结构冒险</h2><p>i. 什么是结构冒险</p>\n<blockquote>\n<p>指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合</p>\n<p>如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险</p>\n</blockquote>\n<p>ii. 解决方式</p>\n<p>在发生结构冒险时，使流水线停顿一个时钟周期</p>\n<p>停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大</p>\n<br/>\n\n<h2 id=\"4-3-数据冒险\"><a href=\"#4-3-数据冒险\" class=\"headerlink\" title=\"4.3 数据冒险\"></a>4.3 数据冒险</h2><p>i. 数据冒险是什么</p>\n<blockquote>\n<p>有些指令依赖于之前指令的结果</p>\n</blockquote>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">DADD</span> <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R2</span>, <span class=\"hljs-built_in\">R3</span>\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span>\n<span class=\"hljs-symbol\">XOR</span>  <span class=\"hljs-built_in\">R10</span>,<span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R11</span></code></pre></div>\n\n<p>DADD后的所有指令都用到了DADD指令的结果R1</p>\n<p>所以在DADD的结果writeback之前，下面的指令都是不能execute的</p>\n<center><img src=\"image-20191013143518878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\n<p>ii. 解决方法</p>\n<p>A. 转发(forwarding)</p>\n<p>转发是一个什么思想呢？ </p>\n<blockquote>\n<p>DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback</p>\n</blockquote>\n<p>转发的工作方式</p>\n<ol>\n<li>来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端</li>\n<li>如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值</li>\n</ol>\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" srcset=\"/img/loading.gif\" style=\"zoom: 30%;\" /></center>\n\n<p>B, 需要停顿的数据冒险</p>\n<p>并非所有的潜在数据冒险都可以通过转发处理</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">LD</span>   <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-number\">0</span>(<span class=\"hljs-built_in\">R2</span>)\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span></code></pre></div>\n\n<center><img src=\"image-20191013151122898.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n<h3 id=\"More-about-data-dependences-and-hazards\"><a href=\"#More-about-data-dependences-and-hazards\" class=\"headerlink\" title=\"More about data dependences and hazards\"></a>More about data dependences and hazards</h3><h4 id=\"A-data-dependences\"><a href=\"#A-data-dependences\" class=\"headerlink\" title=\"A. data dependences\"></a>A. data dependences</h4><ol>\n<li>数据相关[真数据相关]</li>\n</ol>\n<p>指令i生成的结果可能会被指令j用到</p>\n<p>指令j数据相关于指令k, 指令k数据相关于指令i</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n<ol start=\"2\">\n<li>名称相关</li>\n</ol>\n<p>当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。</p>\n<ul>\n<li><p>Anti-dependence: S1 -&gt; S2 </p>\n<p>(i)  S1 executes before S2<br>(ii) S1 reads from a location that is overwritten later by S2</p>\n</li>\n</ul>\n<div class=\"note note-warning\">\n            <p>WAR</p><ul><li><p>Output dependence: S1 -&gt; S2 </p><p>(i)  S1 executes before S2<br>(ii) S1 and S2 write to the same location </p></li></ul>\n          </div>\n\n<p>WAW</p>\n<p>由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。</p>\n<h4 id=\"B-data-hazards\"><a href=\"#B-data-hazards\" class=\"headerlink\" title=\"B. data hazards\"></a>B. data hazards</h4><ul>\n<li>RAW</li>\n<li>WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险</li>\n<li>WAR: 对应于antidependence。</li>\n</ul>\n<h2 id=\"4-4-分支冒险\"><a href=\"#4-4-分支冒险\" class=\"headerlink\" title=\"4.4 分支冒险\"></a>4.4 分支冒险</h2><h3 id=\"i-分支冒险是什么\"><a href=\"#i-分支冒险是什么\" class=\"headerlink\" title=\"i. 分支冒险是什么\"></a>i. 分支冒险是什么</h3><p>执行分支指令时，修改后的PC可能等于也可能不等于PC+4。</p>\n<p>如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC</p>\n<p>那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。</p>\n<h3 id=\"ii-解决方法\"><a href=\"#ii-解决方法\" class=\"headerlink\" title=\"ii. 解决方法\"></a>ii. 解决方法</h3><p>一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要</p>\n<img src=\"image-20191021095111.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n<p>所以，如何降低流水线分支代价？</p>\n<p>4种简单的编译时机制</p>\n<h4 id=\"A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"><a href=\"#A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\" class=\"headerlink\" title=\"A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"></a>A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标</h4><h4 id=\"B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"><a href=\"#B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\" class=\"headerlink\" title=\"B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"></a>B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。</h4><p>这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。</p>\n<p>这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变</p>\n<center><img src=\"image-20191014112116582.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n<h4 id=\"C-将所有分支都看作选中分支\"><a href=\"#C-将所有分支都看作选中分支\" class=\"headerlink\" title=\"C. 将所有分支都看作选中分支\"></a>C. 将所有分支都看作选中分支</h4><p>只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。</p>\n<p>但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。</p>\n<h4 id=\"D-延迟分支\"><a href=\"#D-延迟分支\" class=\"headerlink\" title=\"D. 延迟分支\"></a>D. 延迟分支</h4><blockquote>\n<p>分支指令</p>\n<p>依序后续指令[位于delay slots]</p>\n<p>选中时的分支指令</p>\n</blockquote>\n<p>获得编译器支持，编译器让后续指令有效并且可用</p>\n<center><img src=\"image-20191021095901298.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n<p>延迟调度有局限性，这个局限性是因为</p>\n<blockquote>\n<ol>\n<li>可以排在延迟时隙[delay slots]中的指令有限制</li>\n<li>编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了<em>canceling</em> or <em>nullifying</em> branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。</li>\n</ol>\n</blockquote>\n<p>看一下这些不同的解决方法效率有什么差别</p>\n<center><img src=\"image-20191021101747938.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n<p>考虑flush pipeline</p>\n<p>unconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2</p>\n<p>其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3</p>\n<p>这样，考虑predicted untaken</p>\n<p>unconditional 指令被预测不执行，但是一定会执行，代价是2</p>\n<p>conditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3</p>\n<p>考虑predicted taken</p>\n<p>如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转</p>\n<br>\n\n<p>当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]</p>\n<h4 id=\"i-静态分支预测\"><a href=\"#i-静态分支预测\" class=\"headerlink\" title=\"i. 静态分支预测\"></a>i. 静态分支预测</h4><p>事先收集数据，根据数据来预测分支</p>\n<h4 id=\"ii-动态分支预测\"><a href=\"#ii-动态分支预测\" class=\"headerlink\" title=\"ii. 动态分支预测\"></a>ii. 动态分支预测</h4><p>使用分支预测缓冲区[Branch-Prediction Buffer].</p>\n<p>这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。</p>\n<p>这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转</p>\n<p>但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。</p>\n<p>所以这里提出了2位预测机制。</p>\n<p>两位预测机制，预测必须连续错过两次才会进行修改。</p>\n<center><img src=\"image-20191021103246990.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n<h1 id=\"5-如何实现流水线\"><a href=\"#5-如何实现流水线\" class=\"headerlink\" title=\"5. 如何实现流水线\"></a>5. 如何实现流水线</h1><p>MIPS CPU多周期实现</p>\n<center><img src=\"image-20191021105802697.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n<h2 id=\"Basic-Pipeline\"><a href=\"#Basic-Pipeline\" class=\"headerlink\" title=\"Basic Pipeline\"></a>Basic Pipeline</h2><center><img src=\"image-20191021110018403.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n<h3 id=\"i-IF\"><a href=\"#i-IF\" class=\"headerlink\" title=\"i. IF\"></a>i. IF</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">IF/ID.IR = Mem[PC];\t<span class=\"hljs-comment\">//取指令</span>\n<span class=\"hljs-keyword\">if</span>((EX/MEM.opcode == branch) &amp;&amp; EX/MEM.cond) &#123;\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  IF/IR.NPC = PC + <span class=\"hljs-number\">4</span>;\n  PC = PC + <span class=\"hljs-number\">4</span>;\n&#125;</code></pre></div>\n\n<h3 id=\"ii-ID\"><a href=\"#ii-ID\" class=\"headerlink\" title=\"ii. ID\"></a>ii. ID</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">ID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);</code></pre></div>\n\n<h3 id=\"iii-EX\"><a href=\"#iii-EX\" class=\"headerlink\" title=\"iii. EX\"></a>iii. EX</h3><h4 id=\"A-ALU-EX\"><a href=\"#A-ALU-EX\" class=\"headerlink\" title=\"A. ALU EX\"></a>A. ALU EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR = ID/EX.IR;\n执行以下之一\n<span class=\"hljs-number\">1.</span> EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n<span class=\"hljs-number\">2.</span> EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm</code></pre></div>\n\n<h4 id=\"B-Load-Store-EX\"><a href=\"#B-Load-Store-EX\" class=\"headerlink\" title=\"B. Load Store EX\"></a>B. Load Store EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;</code></pre></div>\n\n<h4 id=\"C-Branch-EX\"><a href=\"#C-Branch-EX\" class=\"headerlink\" title=\"C. Branch EX\"></a>C. Branch EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm &lt;&lt; <span class=\"hljs-number\">2</span>);\nEX/MEM.cond = (ID/EX.A == <span class=\"hljs-number\">0</span>);</code></pre></div>\n\n\n\n<h3 id=\"iv-MEM\"><a href=\"#iv-MEM\" class=\"headerlink\" title=\"iv. MEM\"></a>iv. MEM</h3><h4 id=\"A-ALU-MEM\"><a href=\"#A-ALU-MEM\" class=\"headerlink\" title=\"A. ALU MEM\"></a>A. ALU MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;</code></pre></div>\n\n<h4 id=\"B-Load-Store-MEM\"><a href=\"#B-Load-Store-MEM\" class=\"headerlink\" title=\"B. Load Store MEM\"></a>B. Load Store MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.OR = EX/MEM.IR;\n<span class=\"hljs-number\">1.</span> MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n<span class=\"hljs-number\">2.</span> Mem[EX/MEM.ALUOutput] = EX/MEM.B;</code></pre></div>\n\n<h3 id=\"v-WB\"><a href=\"#v-WB\" class=\"headerlink\" title=\"v. WB\"></a>v. WB</h3><h4 id=\"A-ALU-WB\"><a href=\"#A-ALU-WB\" class=\"headerlink\" title=\"A. ALU WB\"></a>A. ALU WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1.</span> Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n<span class=\"hljs-number\">2.</span> Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;</code></pre></div>\n\n\n\n<h4 id=\"B-Load-Store-WB\"><a href=\"#B-Load-Store-WB\" class=\"headerlink\" title=\"B. Load Store WB\"></a>B. Load Store WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">For load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;</code></pre></div>\n\n\n\n<h2 id=\"Control-the-Pipeline\"><a href=\"#Control-the-Pipeline\" class=\"headerlink\" title=\"Control the Pipeline\"></a>Control the Pipeline</h2><p>instruction issue:</p>\n<blockquote>\n<p>一条指令从ID移入EX的过程</p>\n</blockquote>\n<p>对于整数流水线，所有数据冒险都可以在ID进行检查。</p>\n<p>如果存在数据冒险，这个指令将会在issue之前停顿。</p>\n<p>同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。</p>\n<center><img src=\"image-20191021115323894.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\n<p>pipeline overhead</p>\n<p>due to stage imbalance, pipeline register setup</p>\n<h3 id=\"Deal-with-forwarding\"><a href=\"#Deal-with-forwarding\" class=\"headerlink\" title=\"Deal with forwarding\"></a>Deal with forwarding</h3><center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n<h1 id=\"6-扩展MIPS流水线，以处理多周期操作\"><a href=\"#6-扩展MIPS流水线，以处理多周期操作\" class=\"headerlink\" title=\"6. 扩展MIPS流水线，以处理多周期操作\"></a>6. 扩展MIPS流水线，以处理多周期操作</h1><p>扩展mips流水线，以处理浮点运算</p>\n<p>浮点运算的问题</p>\n<blockquote>\n<p>要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能</p>\n<p>如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。</p>\n<p>所以</p>\n<ul>\n<li>为了完成操作，EX周期可能要根据需要重复多次</li>\n<li>可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。</li>\n</ul>\n</blockquote>\n<p>4个独立的功能单元</p>\n<ul>\n<li>主整数单元，处理load, store, 整数ALU operation, branch</li>\n<li>浮点与整数乘法器</li>\n<li>浮点加法器，处理浮点加、减和转换</li>\n<li>浮点和整型除法器</li>\n</ul>\n<p>假定这些功能单元的执行级没有实现流水化</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n<p>两个指标</p>\n<ul>\n<li><p>latency</p>\n<p>the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。</p>\n<blockquote>\n<p>Essentially, pipeline <strong>latency</strong> is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the <strong>EX stage</strong> to the stage that produces the result </p>\n</blockquote>\n</li>\n<li><p>initiation/repeat interval</p>\n<p>同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行</p>\n</li>\n</ul>\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" srcset=\"/img/loading.gif\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>instruction issue: 从ID到EX的阶段</p>\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/DesignPatterns/StrategyMethod/image-20200805135526277.png","slug":"image-20200805135526277.png","post":"ckdh3nd2c00026xufglbcalag","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191024075.png","slug":"image-20200710191024075.png","post":"ckdh3nmky00046xufa4pw5hqd","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191917988.png","slug":"image-20200710191917988.png","post":"ckdh3nmky00046xufa4pw5hqd","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710192039991.png","slug":"image-20200710192039991.png","post":"ckdh3nmky00046xufa4pw5hqd","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191212499.png","slug":"image-20200710191212499.png","post":"ckdh3nmky00046xufa4pw5hqd","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Observer/image-20200806160700160.png","slug":"image-20200806160700160.png","post":"ckdjycnun0004iuufhngofylt","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191014101703881.png","slug":"image-20191014101703881.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930101228492.png","slug":"image-20190930101228492.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807142228605.png","slug":"image-20200807142228605.png","post":"ckdkb46d70002uyuf3jfd4e3o","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143722316.png","slug":"image-20200807143722316.png","post":"ckdkb46d70002uyuf3jfd4e3o","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143823919.png","slug":"image-20200807143823919.png","post":"ckdkb46d70002uyuf3jfd4e3o","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807160507597.png","slug":"image-20200807160507597.png","post":"ckdkb46d70002uyuf3jfd4e3o","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930102555608.png","slug":"image-20190930102555608.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930102855084.png","slug":"image-20190930102855084.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930103000391.png","slug":"image-20190930103000391.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930103037853.png","slug":"image-20190930103037853.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930103101742.png","slug":"image-20190930103101742.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930115553486.png","slug":"image-20190930115553486.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930115635931.png","slug":"image-20190930115635931.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930115734010.png","slug":"image-20190930115734010.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20190930115804883.png","slug":"image-20190930115804883.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191014101250484.png","slug":"image-20191014101250484.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191014101429477.png","slug":"image-20191014101429477.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191014102744097-6809392.png","slug":"image-20191014102744097-6809392.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191014102744097.png","slug":"image-20191014102744097.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191218224444341.png","slug":"image-20191218224444341.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191218224500000.png","slug":"image-20191218224500000.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/instructionSet/image-20191218224924929.png","slug":"image-20191218224924929.png","post":"ckdkb46cz0000uyuf0t0t0wwh","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/ca20190908-1.png","slug":"ca20190908-1.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/ca20190908-2.png","slug":"ca20190908-2.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191013133054888.png","slug":"image-20191013133054888.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191013143518878.png","slug":"image-20191013143518878.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191013151122898.png","slug":"image-20191013151122898.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191013151314878.png","slug":"image-20191013151314878.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021095111.png","slug":"image-20191021095111.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191014112116582.png","slug":"image-20191014112116582.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021095901298.png","slug":"image-20191021095901298.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021101747938.png","slug":"image-20191021101747938.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021103246990.png","slug":"image-20191021103246990.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021105802697.png","slug":"image-20191021105802697.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021110018403.png","slug":"image-20191021110018403.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191021115323894.png","slug":"image-20191021115323894.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/IMG_C3E4F59B24C4.png","slug":"IMG_C3E4F59B24C4.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111103138887.png","slug":"image-20191111103138887.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111104720076.png","slug":"image-20191111104720076.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111103409484.png","slug":"image-20191111103409484.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111103455864.png","slug":"image-20191111103455864.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111103637824.png","slug":"image-20191111103637824.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0},{"_id":"source/_posts/pipeline/image-20191111104058863.png","slug":"image-20191111104058863.png","post":"ckdkb8xi70000xmuf2yh0efu9","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckdjycnun0004iuufhngofylt","category_id":"ckdjycnu00001iuuf2yqza5sa","_id":"ckdjycnup0006iuufb41y0jlu"},{"post_id":"ckdh3nd2c00026xufglbcalag","category_id":"ckdjycnu00001iuuf2yqza5sa","_id":"ckdjycnv20007iuufdnoran3l"},{"post_id":"ckdh3nmky00046xufa4pw5hqd","category_id":"ckdjycnu00001iuuf2yqza5sa","_id":"ckdjycnv20008iuuf9krj0lp5"},{"post_id":"ckdkb46d70002uyuf3jfd4e3o","category_id":"ckdjycnu00001iuuf2yqza5sa","_id":"ckdkb46d90005uyufd75rbif9"},{"post_id":"ckdkb46cz0000uyuf0t0t0wwh","category_id":"ckdkb8xio0001xmuf2acn8555","_id":"ckdkb8xiv0004xmufgtg139wv"},{"post_id":"ckdkb8xi70000xmuf2yh0efu9","category_id":"ckdkb8xio0001xmuf2acn8555","_id":"ckdkbacmt0006xmufdk0620nc"}],"PostTag":[{"post_id":"ckdh3nd2c00026xufglbcalag","tag_id":"ckdh31rnr0000vcuf2ays2egl","_id":"ckdh3nd2d00036xuf566pc37q"},{"post_id":"ckdh3nmky00046xufa4pw5hqd","tag_id":"ckdh31rnr0000vcuf2ays2egl","_id":"ckdh3nmkz00056xuf1we0h2ri"},{"post_id":"ckdjycnun0004iuufhngofylt","tag_id":"ckdh31rnr0000vcuf2ays2egl","_id":"ckdjycnup0005iuuf17kuep2a"},{"post_id":"ckdkb46d60001uyuf1iwtblq4","tag_id":"ckdh31rnr0000vcuf2ays2egl","_id":"ckdkb46d80003uyuf271z6igq"},{"post_id":"ckdkb46d70002uyuf3jfd4e3o","tag_id":"ckdh31rnr0000vcuf2ays2egl","_id":"ckdkb46d90004uyuf5zlegxwj"},{"post_id":"ckdkb46cz0000uyuf0t0t0wwh","tag_id":"ckdkb8xiu0002xmuf5ir21l7t","_id":"ckdkb8xiv0003xmuf8mnd6lk0"},{"post_id":"ckdkb8xi70000xmuf2yh0efu9","tag_id":"ckdkb8xiu0002xmuf5ir21l7t","_id":"ckdkbacmt0005xmuf9ec3ar6y"}],"Tag":[{"name":"image","_id":"ckd5o08kb0003g5uferykcujq"},{"name":"DesignPatterns","_id":"ckdh1mcqc00010rufbtp9dwfu"},{"name":"Design Patterns","_id":"ckdh31rnr0000vcuf2ays2egl"},{"name":"Computer Architecture","_id":"ckdkb8xiu0002xmuf5ir21l7t"}]}}