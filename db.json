{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/image-20200710192039991.png","path":"img/image-20200710192039991.png","modified":0,"renderable":0},{"_id":"source/img/image-20191209103141041.png","path":"img/image-20191209103141041.png","modified":0,"renderable":0},{"_id":"source/img/image-20191021110018403.png","path":"img/image-20191021110018403.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/img/image-20200807160507597.png","path":"img/image-20200807160507597.png","modified":0,"renderable":0},{"_id":"source/img/image-20200806160700160.png","path":"img/image-20200806160700160.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/image-20190930101228492.png","path":"img/image-20190930101228492.png","modified":0,"renderable":0},{"_id":"source/img/image-20200805135526277.png","path":"img/image-20200805135526277.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"source/img/image-20200811150059187.png","path":"img/image-20200811150059187.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/img/achive.png","path":"img/achive.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"source/img/image-20190917211449784.png","path":"img/image-20190917211449784.png","modified":0,"renderable":0},{"_id":"source/img/image-20200814150354579.png","path":"img/image-20200814150354579.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"63028f17d3f15ed087a27359730cf49d419db798","modified":1597131836718},{"_id":"themes/fluid/.DS_Store","hash":"91c6b607755fab8411095080299d21c3b13800f1","modified":1596624512729},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1595300800000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1595300800000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1595300800000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1595300800000},{"_id":"themes/fluid/README.md","hash":"0ff14201b4a4799d5e3b1387da8e06ead1681970","modified":1595300800000},{"_id":"themes/fluid/_static_prefix.yml","hash":"dd94756c6967838bf656735a46047bb7b0031ca1","modified":1595300800000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1595300800000},{"_id":"themes/fluid/README_en.md","hash":"99412f14c91c3bc188953eb5b347481a618facd3","modified":1595300800000},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1595300800000},{"_id":"themes/fluid/package.json","hash":"d37c2637ed470ed61dd63142ab1291233267abdb","modified":1595300800000},{"_id":"themes/fluid/_config.yml","hash":"e523afdce5bced69da1468c705f0d1d6d40c9441","modified":1597389835933},{"_id":"source/_posts/Capital.md","hash":"e5b46e911cbfd33261a1c1587a6f2b995fee2922","modified":1597128430266},{"_id":"themes/fluid/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1595300800000},{"_id":"source/_data/fluid_config.yml","hash":"66f111c6895831381ec1e2ac4ee98bd2145caf89","modified":1596692938463},{"_id":"source/_posts/Storage.md","hash":"8f05318ac6c65925d1a2a124ccb4585ec5cbb74f","modified":1597134522874},{"_id":"source/_posts/instructionSet.md","hash":"13ec747c54a0ee7869714739c1b2c782ad1bc1f4","modified":1596809661634},{"_id":"source/_posts/.DS_Store","hash":"f8d46cac207f099ce0134131589c8c17562da991","modified":1597388683301},{"_id":"source/_posts/pipeline.md","hash":"68c49afadc03beedcd308fe2bc6930bd39f4577d","modified":1596810785026},{"_id":"source/about/index.md","hash":"3aa868451111df13a4577348179d1a9113de0534","modified":1596616149238},{"_id":"source/img/.DS_Store","hash":"f0367f4f3e43244bac8440ba31123418b5eb6e47","modified":1596615392841},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1595300800000},{"_id":"themes/fluid/layout/about.ejs","hash":"e967e102bab2b35b9083165c2b8e037db8e0a32d","modified":1595300800000},{"_id":"themes/fluid/layout/index.ejs","hash":"9534043275df504d70232c07fec7e10503b85d32","modified":1595300800000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7450c3db44b03c1b1c859f2770f6aa77dcebd379","modified":1595300800000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1595300800000},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1595300800000},{"_id":"themes/fluid/layout/post.ejs","hash":"59551ef5d9c0dee8c162ac39a18a96dafe5e1358","modified":1595300800000},{"_id":"themes/fluid/layout/tag.ejs","hash":"fd72ec9e6629facf63ce8122f0fa8d492669fa6a","modified":1595300800000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1595300800000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1595300800000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1595300800000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1595300800000},{"_id":"themes/fluid/layout/archive.ejs","hash":"094357be1c2c6b477269a3f4b725d3c5dd24ef8c","modified":1595300800000},{"_id":"themes/fluid/layout/categories.ejs","hash":"3b8589675338c7b3e1849104b7bb15ac477fce4e","modified":1595300800000},{"_id":"themes/fluid/layout/category.ejs","hash":"1cfe94f46f1492a411d431b02a8d09c99cab77d5","modified":1595300800000},{"_id":"themes/fluid/source/.DS_Store","hash":"6c35dd70ce730b7ed5cf90cd1554e14b1d753bb1","modified":1596624512727},{"_id":"source/img/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1594380039993},{"_id":"source/_posts/DesignPatterns/Decorator.md","hash":"61c30427b900cc2630b9a2cccfa0a4997af6478c","modified":1597129553500},{"_id":"source/_posts/DesignPatterns/Bridge.md","hash":"89777bb9e92e136beaea39b5adeb9e50812e4fa4","modified":1597131487519},{"_id":"source/_posts/DesignPatterns/Observer.md","hash":"d565052ca68515927994d08ff65a1a7235e098b0","modified":1596702594267},{"_id":"source/_posts/DesignPatterns/StrategyMethod.md","hash":"93a7ad6a9dd9c2f10ca3a1d1d056861bcac6aabd","modified":1596702643543},{"_id":"source/_posts/DesignPatterns/TemplateMethod.md","hash":"d683a3786ad55f0164f4b68c1cc3c61ae176b600","modified":1596702627487},{"_id":"source/_posts/pipeline/.DS_Store","hash":"90c15d9d95c004904045ac50b3370799ce14d223","modified":1596809966688},{"_id":"source/_posts/DesignPatterns/Principle.md","hash":"24d29b9f97e9aad659a7ae4dc32c753889c4825c","modified":1596698815389},{"_id":"source/_posts/pipeline/image-20191021101747938.png","hash":"dcf84f066ecf6d36beb5d3a63d2e45dfe3ae64c8","modified":1571624267940},{"_id":"source/_posts/pipeline/image-20191111103138887.png","hash":"ed8ec52aaec56c1a3549c45ee5c98baa255056cf","modified":1573439498889},{"_id":"source/_posts/instructionSet/image-20190930115553486.png","hash":"19bf3b073b628e77d94993d5c5856bdfc4b5e30d","modified":1569815753487},{"_id":"source/_posts/instructionSet/image-20191014101429477.png","hash":"8120a468d556522033b61c265b9891678d061eb7","modified":1571019269478},{"_id":"source/_posts/instructionSet/image-20191014101250484.png","hash":"8995a0952ec6b94d54acc6306d1fc9ace992e439","modified":1571019170486},{"_id":"source/_posts/instructionSet/image-20191218224444341.png","hash":"b9315496fc79f7642dab00ee3433eb6e845a351a","modified":1576680284344},{"_id":"source/_posts/Storage/.DS_Store","hash":"bc643b19f106fd3eaf5812e97856ced45956ee11","modified":1597132028116},{"_id":"source/_posts/Storage/image-20191208135106480.png","hash":"3b735fd00f959854cbe52d10ded50d6cc8fa6b96","modified":1575784266480},{"_id":"source/_posts/Storage/image-20191208135244903.png","hash":"3932bb7b975c02630b595f98192491fa09b081d4","modified":1575784364906},{"_id":"source/_posts/Storage/image-20191208220714030.png","hash":"0695a79ab53ecd10e19354255e784c3197bf0667","modified":1575814034030},{"_id":"source/_posts/pipeline/image-20191021095111.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1571622678316},{"_id":"source/_posts/instructionSet/image-20190930102555608.png","hash":"75e056666f70d2c76c31eab1e90a50f81a56b925","modified":1569810355609},{"_id":"source/_posts/instructionSet/image-20191218224500000.png","hash":"fad4c5a5318827aeb32f4c6d09bcfdac67811924","modified":1576680300001},{"_id":"source/_posts/Storage/image-20191208134608723.png","hash":"35d73af4b19f4e5f22f89814b7b0ff2ecf477a86","modified":1575783968726},{"_id":"source/_posts/Storage/image-20191208202025669.png","hash":"b9619ab4e1f1ebfa7b30d1747f9b2f5ce7b9b376","modified":1575807625670},{"_id":"source/_posts/Storage/image-20191208202722945.png","hash":"eabd9d791cb5d76a92f360377d4a58f053e18efb","modified":1575808042948},{"_id":"source/_posts/Storage/image-20191209113803942.png","hash":"8b131be1536f3636cbe05f92d7508d07ea167271","modified":1575862683945},{"_id":"source/_posts/Storage/image-20191216102829183.png","hash":"ab32fb129e83d18149e08c1736330036ad15895e","modified":1576463364740},{"_id":"source/_posts/Storage/image-20191216104938324.png","hash":"e83937308e79f8b96747c4d3d551ada3a0bab6d8","modified":1576464578328},{"_id":"source/_posts/Storage/image-20191216110406290.png","hash":"df61d5b1aa97704fc9a58e8f9b01590b92e51eb1","modified":1576465446292},{"_id":"source/_posts/Storage/image-20191216222618484.png","hash":"9e33c993950bfef3eeafd8be7c78d14249bd52b2","modified":1576506378484},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1595300800000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"628f8d7655fdba149f5a9b0232df5c3225eda9da","modified":1595300800000},{"_id":"themes/fluid/scripts/events/index.js","hash":"36b137b75c76ff08523016dc8eac702f397d771b","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"867ed2bb90863934b72b7586ec7c31abf9863182","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1595300800000},{"_id":"source/_posts/Storage/image-20191217210134473.png","hash":"579099ce3882a2da6d160855c9e2e0bf48631d1c","modified":1576587694475},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1595300800000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"93cf5e1f1e0362adee0f63f4edcc7738cd4fc842","modified":1595300800000},{"_id":"source/_posts/Storage/image-20191217210322625.png","hash":"8a117c286a2cfb709d4b7addde2b7d0ba9e55b4c","modified":1576587802626},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"4f3acc8dc822c85d0d778552a15875f71c0cd80a","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"21964c2e5c68ee3806ef80465ef5de92174cdc3a","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"03defcd4409dce27447aa8dfe7ce41a2d47e373b","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"afa8b2d53452609a5ee7cf32ad5f00d5a80de72e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"4359f8598a21b133d392f71772c3f9adb5de96a0","modified":1596637203959},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1595300800000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6665f19fa30cbbe0853d8140a0832f8638538f89","modified":1595300800000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"f64d2121d99225e9f6d12ce646af618232f5f366","modified":1595300800000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bb90a128a999b276c10a822c44851fa27d6d64ae","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"48e1b46b4c34b79a128dda7a0592b43be47cf955","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"c131fb22805cec89d647e643299508487fc72576","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"d50f5aeb1a95adbc88cea9cca4a07165d6725408","modified":1595300800000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"d45dce23532c17367c7eb86b94afa8c9e40d16c6","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0d818a43079d9a2da12d9c974426d675cc0b66ea","modified":1595300800000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1595300800000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3cf1d9b9032919d6b936e1f2410911df3b325670","modified":1595300800000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1595300800000},{"_id":"source/img/image-20191209103141041.png","hash":"6e1ca8cd52d19a9e203f45159cd5f89dc9ed3972","modified":1575858701044},{"_id":"source/img/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1571626818404},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1595300800000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"ebd69685697b17878a5f9c7542e29f595a189d47","modified":1596624521605},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1595300800000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1595300800000},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1595300800000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1595300800000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1595300800000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1595300800000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"6ba340eef77b2daf14c8fbb6b4f7bda9becb2526","modified":1595300800000},{"_id":"themes/fluid/source/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1595300800000},{"_id":"themes/fluid/source/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1595300800000},{"_id":"source/_posts/DesignPatterns/StrategyMethod/.DS_Store","hash":"7a5178989e10029d0bc2b5b00920419850839cf4","modified":1596614110447},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1594379424077},{"_id":"source/_posts/pipeline/ca20190908-1.png","hash":"4f0ffcb0dda688b0ed8f5d1b35bec84ffe7acb2a","modified":1567914712626},{"_id":"source/_posts/pipeline/image-20191013151314878.png","hash":"dd19b7966043be8bdb26c847c27d846703d79efe","modified":1570950794878},{"_id":"source/_posts/instructionSet/image-20190930115635931.png","hash":"2747827050deb3511974e4c92084800d09eddb31","modified":1569815795932},{"_id":"source/_posts/instructionSet/image-20190930115734010.png","hash":"45fcad3501f67c87cf3563619d9f96ae122d2210","modified":1569815854012},{"_id":"source/_posts/instructionSet/image-20190930115804883.png","hash":"a86d148db1885f7fba2e25bb251cf34a39bdd830","modified":1569815884884},{"_id":"source/_posts/Storage/IMG_2C62CE9D9D16-1.jpeg","hash":"96d449ad12e316b61f58100ebc0201c8d09f9dba","modified":1576469279171},{"_id":"source/_posts/Storage/image-20191208204804983.png","hash":"9e11564909fd369e157816b502bb95a244911582","modified":1575809284983},{"_id":"source/_posts/Storage/image-20191208213207928.png","hash":"4600cc9839fe0d2b9b7381ef77018d26097ab896","modified":1575811927930},{"_id":"source/_posts/Storage/image-20191208213224033.png","hash":"de8a7ad46782951315c729ad263dc3a6d17bb00b","modified":1575811944034},{"_id":"source/_posts/Storage/image-20191208213148539.png","hash":"6aee37d9393daffbf4e67297eec0578df8b489d5","modified":1575811908541},{"_id":"source/_posts/Storage/image-20191209104433202.png","hash":"27d4044338e365af3c1522f7a945f51a74996702","modified":1575859473206},{"_id":"source/_posts/Storage/image-20191216210721189.png","hash":"3c0290b75710d438d2057a61b1e8e065386f1045","modified":1576501641190},{"_id":"source/_posts/Storage/image-20191216222600418.png","hash":"90ecce93f4a824e5796e5e7da88aa4c37b3ea6e9","modified":1576506360421},{"_id":"source/_posts/Storage/image-20191216222740597.png","hash":"e343b85ceed3a98c70a237a70870e5f207193b51","modified":1576506460599},{"_id":"source/_posts/Storage/image-20191217203849064.png","hash":"b850d310c876e4f7df499d38ec22db55b10b409a","modified":1576586329069},{"_id":"source/_posts/Storage/image-20191217202233856.png","hash":"378b983fa78b282fcfb3e80a4ccbbe151d1e74f3","modified":1576585353858},{"_id":"source/img/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596787768905},{"_id":"source/_posts/pipeline/IMG_C3E4F59B24C4.png","hash":"39e53400ac4e421ec5fed4b00034b2a05a4d5289","modified":1577063576000},{"_id":"source/_posts/pipeline/image-20191013151122898.png","hash":"657069acd344b946ade7c698b4c3010c80f5ca08","modified":1570950682900},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1594380039993},{"_id":"source/_posts/pipeline/image-20191013143518878.png","hash":"992264195c872e4a3ea4b8f37ea291f5e05f8c91","modified":1570948518880},{"_id":"source/_posts/pipeline/image-20191014112116582.png","hash":"89bead8581feddd734ecc24a68412d446559527a","modified":1571023276582},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1594379532501},{"_id":"source/_posts/pipeline/image-20191021105802697.png","hash":"080abe7582c0904544de412b9fe7fbca446ed915","modified":1571626682700},{"_id":"source/_posts/pipeline/image-20191021103246990.png","hash":"11eb72a34395488b6b409d8d0b24451ef633a6c8","modified":1571625166992},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1594379957990},{"_id":"source/_posts/pipeline/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1571626818404},{"_id":"source/_posts/pipeline/image-20191111104058863.png","hash":"158589f60813a7da61e45418bb9eec011b4271ca","modified":1573440058863},{"_id":"source/_posts/pipeline/image-20191111103637824.png","hash":"3ebf0712366e2a12e28676ee7665141dbb14aa89","modified":1573439797827},{"_id":"source/_posts/pipeline/image-20191111103409484.png","hash":"64d8120f30ad13b0d243d59c2cb4e72ed74f2fad","modified":1573439649487},{"_id":"source/_posts/instructionSet/image-20190930103000391.png","hash":"0477a87305b6e830f817f08bb00ef67dbfcd7359","modified":1569810600393},{"_id":"source/_posts/instructionSet/image-20190930103037853.png","hash":"902eed4b090889daf19ffbe8e058fdde55a6f7aa","modified":1569810637855},{"_id":"source/_posts/instructionSet/image-20190930103101742.png","hash":"84a6ad40d7a6aad1ffc8602e1fd154096000ada6","modified":1569810661743},{"_id":"source/_posts/pipeline/image-20191111104720076.png","hash":"0bd547e5d7b7e119e04ecd3d10daf304c525038f","modified":1573440440077},{"_id":"source/_posts/instructionSet/image-20190930102855084.png","hash":"9bceece48b5757f8dbd5a27b170e90c6179903be","modified":1569810535085},{"_id":"source/_posts/Storage/IMG_E9E135911744-1.png","hash":"755b16a80635303c5e897d73e6918cdbf703e3a8","modified":1576469863000},{"_id":"source/_posts/Storage/image-20191208205644462.png","hash":"a49d03bb700bb40aeeccf18d36d67cdab087baa2","modified":1575809804464},{"_id":"source/_posts/Storage/image-20191208210849569.png","hash":"c8e7b5b1dcf296e6b8d0351126320cdddcc1ca8f","modified":1575810529571},{"_id":"source/_posts/Storage/image-20191209103141041.png","hash":"6e1ca8cd52d19a9e203f45159cd5f89dc9ed3972","modified":1575858701044},{"_id":"source/_posts/Storage/image-20191216210659441.png","hash":"6f67b6aa44a5aafe244708dde4997c41631b1256","modified":1576501619444},{"_id":"source/_posts/Storage/image-20191216222544839.png","hash":"7242da77576a61406807ea64fb5b8d6102dd3dab","modified":1576506344841},{"_id":"source/_posts/Storage/image-20191216222905001.png","hash":"7c2c0218bbdb2e5746b722665f108e71207fcd0c","modified":1576506545001},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da4c281a8b2d2ed813da1236950c9dff87334adc","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"4adf895fa1157aaf5a194f8b760332b6215656ef","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"374583fd419ac6477dfca69e09756db543d7ec80","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"ee7dfef805af96195c11223cca53983deace8bda","modified":1595300800000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"5fed24e25662a1b08fd857fde2d770fdc6250475","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"13c0b62854668fd83287dff3792997baeeb3a2c7","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"d27313450311ebadf4a92f71d269db367475c1a4","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"f1e5d89cc98e2f6e067e5cd3db728127ccff0105","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"f151bc3453a67213cfdcb944c23764fb3a780722","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"2c516fe751fccab093d16eccc4331251942caf0a","modified":1596609460079},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"37941b3c6f66f1f22aeff734802373657dfdfb99","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"0977e642c65e34d2ca2980a77b16d9ad2d3936fc","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"3738c2ef427b4b400225b92e638a17b7ab2125ed","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"e843cdbe64af3dee9385eb1d763539d3ac10ed72","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"c447e35c93c61a70c1c2dfc34948615832989660","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"7807e58722dcf992fba11bc879b0fac0e904dc76","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"03b024c7bab51b64e5187c9dbfac039d020f1e97","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"2d35295dba2bb912d6ce2ec7747af06bfdc82edb","modified":1595300800000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"38334350425008d1f64323de221457ee0948af0e","modified":1595300800000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1595300800000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"1678c5bbb1aa2e17681f8e88776ecb802bc85b69","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1595300800000},{"_id":"source/img/image-20200806160700160.png","hash":"cb4ed64f80eefb8d68cc969a59d3548eab709298","modified":1596701220162},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1595300800000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1595300800000},{"_id":"source/_posts/pipeline/image-20191013133054888.png","hash":"cd502b027b044546b48ed7e8eff21b9301c4e2de","modified":1570944654891},{"_id":"source/_posts/pipeline/ca20190908-2.png","hash":"dc8cf5eba98d5ba7d3b46d113cbbcc2ffe2351b3","modified":1567914898236},{"_id":"source/_posts/pipeline/image-20191021115323894.png","hash":"faec8817b6f39cf58c25c52e2968cdb19732eb2c","modified":1571630003897},{"_id":"source/_posts/pipeline/image-20191111103455864.png","hash":"cc3d257ce8f4f30fabcb2998a6df7d13d3903832","modified":1573439695866},{"_id":"source/_posts/Storage/image-20191209100308445.png","hash":"a395b563090f86697bd86434ccb01598ae1a27cf","modified":1575856988448},{"_id":"source/_posts/Storage/image-20191209104458720.png","hash":"5478efa65cddf4dc383f154d9afd91227720200f","modified":1575859498721},{"_id":"source/img/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1569809548496},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595300800000},{"_id":"source/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/Storage/image-20191208204528711.png","hash":"0ef9705cfbccdbd97158a8eaffb15e1cf0c5960e","modified":1575809128714},{"_id":"source/_posts/Storage/image-2019120874232.png","hash":"368bf410ab1ee493382649f26df91654481745f1","modified":1575805447574},{"_id":"source/_posts/Storage/image-20191216214128113.png","hash":"7588e00eba1e7ebf968a622f2f17aa3e1e13345b","modified":1576503688114},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"7e07e44fa0e77ddbdd3aa0c0abdb3be6822df2e0","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"439fce1b41bc1134399e7f2ce6ffe5aa64568acd","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"7231920523d634670344a452908f933b29a452be","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"c443551deb389102e65cbb2441f60e8c20712ee8","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"f8f5503443f26354dacd139606e245f19aceb4a0","modified":1595300800000},{"_id":"themes/fluid/source/img/avatar.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595923664734},{"_id":"themes/fluid/source/img/favicon.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1595923664734},{"_id":"source/_posts/pipeline/image-20191021095901298.png","hash":"4492923d9852ef3c72f4389c20a69028feab7fbc","modified":1571623141300},{"_id":"source/_posts/Storage/image-20191208194519623.png","hash":"cdfe682d8dbb832e390e2ea071521a48dbc646f7","modified":1575805519624},{"_id":"source/_posts/Storage/image-20191209105429474.png","hash":"5f7ba51494e49e99133c2d88195af7fd0d7bb67a","modified":1575860069476},{"_id":"source/_posts/Storage/image-20191209105418930.png","hash":"87375b7a43c012d6b22daa0c8d15c611d3235d4c","modified":1575860058930},{"_id":"source/_posts/Storage/image-20191209105411600.png","hash":"1d47c8ed68d8f126f39fb1b9620280b07f8aab6d","modified":1575860051602},{"_id":"source/_posts/Storage/image-20191216131556362.png","hash":"da7f68f41f9f06911428ca4123c7e153589b924e","modified":1576473356364},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1596782303920},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1596787768905},{"_id":"source/_posts/instructionSet/image-20191014101703881.png","hash":"6b746f0193bed5af739f1df76d3184c1bebacb54","modified":1571019423881},{"_id":"source/_posts/Storage/image-20191208205754992.png","hash":"68e445d323db4659f1e56987399769e1d4e5faad","modified":1575809874995},{"_id":"source/_posts/Storage/image-20191208215035983.png","hash":"8e073b381da0da065a05d38873a35c680602821e","modified":1575813035986},{"_id":"source/_posts/Storage/image-20191216131127165.png","hash":"53490df4b5322a9b82a5f21782e2b15086d314d8","modified":1576473087168},{"_id":"source/_posts/Storage/image-20191216130953500.png","hash":"9fefebc518750d4fc11729854da30a58edb6f0ea","modified":1576472993501},{"_id":"source/_posts/Storage/image-20191216130845614.png","hash":"74b14fae96a25cb3413b4a6bc944397590f7f7cc","modified":1576472925617},{"_id":"source/_posts/Storage/image-20191216130921114.png","hash":"0755b281506abe645d5094f730c76445396ef075","modified":1576472961115},{"_id":"source/_posts/Storage/image-20191216131242663.png","hash":"f6a97a00c8af0bc9a858b64892d00db2a5a6615f","modified":1576473162663},{"_id":"source/_posts/Storage/image-20191216131334869.png","hash":"4d1c705cc3314f96bf185f0235abe85c644dcfc9","modified":1576473214871},{"_id":"source/_posts/Storage/image-20191216131420435.png","hash":"e09f90a1cfadb8c722867127a8e86519949678ee","modified":1576473260435},{"_id":"source/_posts/Storage/image-20191216131514362.png","hash":"0bb7e1fa565ffb15640d8231d0f0f43639e112a8","modified":1576473314363},{"_id":"source/_posts/Storage/image-20191216131536642.png","hash":"ae6b2b07d81734baeff02ed18c4afc68c1bdfd88","modified":1576473336644},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"5f8738c43539c27ad2ce7635a53b2cac522f1c13","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"fe74d031acef4403e1510d4cce5bc7accd641780","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f1cd98a5b8d98535d707a99dba6a00f1f3978c81","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"6b8340a41afc6b6e5f30dc9e912a0e0265446963","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1595300800000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1595300800000},{"_id":"source/_posts/DesignPatterns/Observer/image-20200806160700160.png","hash":"b6abb80ce592d70dcdd4087f4833aa8f489b8b97","modified":1596701745439},{"_id":"source/_posts/DesignPatterns/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1596607010927},{"_id":"source/_posts/instructionSet/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1569809548496},{"_id":"source/_posts/Storage/image-20191208201918610.png","hash":"065f714fe78cee70a700b2d9e5d15e4ec3a2768a","modified":1575807558613},{"_id":"source/_posts/Storage/image-20191209105442259.png","hash":"dbd582011741a217eaf1b09d5285e53c4a961428","modified":1575860082260},{"_id":"source/_posts/Storage/image-20191209105459461.png","hash":"7476b7d7000e86cd47546cf7c0b5b357c377f814","modified":1575860099462},{"_id":"source/_posts/Storage/image-20191216131302430.png","hash":"6a2a3923c88b420d466e522d5ef31bc8cc45cebf","modified":1576473182432},{"_id":"source/_posts/Storage/image-20191216131449208.png","hash":"5245b55495c9b47ae179273711aade5864b2115a","modified":1576473289209},{"_id":"source/img/image-20200811150059187.png","hash":"923d664173100c45a259afbb138086474a9cd493","modified":1597129337864},{"_id":"source/_posts/instructionSet/image-20191014102744097-6809392.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/Storage/image-20191209113823956.png","hash":"923e6fcf3eaac276d9ce14e801f4a048282bf7bd","modified":1575862703957},{"_id":"source/_posts/Storage/image-20191216130127847.png","hash":"a18436d4102f877a7a46ca0d9422e16167317e4d","modified":1576472487848},{"_id":"source/_posts/Storage/image-20191216121018499.png","hash":"b092ddc1d016b9bbd10c5fa17ee1c2d807055a4d","modified":1576469418500},{"_id":"source/_posts/Storage/image-20191216130657742.png","hash":"3841fb3165a047456ef3a0f7165d7e5b9ffb549b","modified":1576472817742},{"_id":"source/_posts/Storage/image-20191216131357343.png","hash":"246b7459a3bc4a4472f4b08fc24451353435ee8c","modified":1576473237344},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1596781348610},{"_id":"source/_posts/instructionSet/image-20191014102744097.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/Storage/image-20191209105451917.png","hash":"e9328e56b98789a86ed354c59e96c82cb75778f3","modified":1575860091920},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1596782242319},{"_id":"source/_posts/Storage/IMG_8BFCBD97FD85-1.png","hash":"c562645a2402d3790114aab46f749c6ee3d0a956","modified":1576500714000},{"_id":"source/_posts/DesignPatterns/Bridge/image-20200811150059187.png","hash":"923d664173100c45a259afbb138086474a9cd493","modified":1597129337864},{"_id":"source/_posts/Storage/image-20191208214954621.png","hash":"c84e339bdab1850542580d368947930d8567f262","modified":1575812994624},{"_id":"source/_posts/Storage/image-20191216120558419.png","hash":"00fdb2071ac2e4edc236e01f722d40b3c8d027c6","modified":1576469158423},{"_id":"source/_posts/instructionSet/image-20191218224924929.png","hash":"2d175c9613c241344d7871e2b506f8b3b64ed260","modified":1576680564933},{"_id":"source/_posts/Storage/IMG_17517EAA2585-1.png","hash":"b8c93a023f767e4746c4ca392ecdc7aa56807c67","modified":1576500453000},{"_id":"themes/fluid/source/img/achive.png","hash":"bfdf73f8656f6c2559587659051d801aae61e49d","modified":1596624121939},{"_id":"themes/fluid/source/img/default.png","hash":"40217ddf4aa1f7598ed3c89d7d55775c47b34987","modified":1596611234977},{"_id":"source/_posts/PhysicalLayer.md","hash":"fab6a6ad7eceae542c3d7eab38e0eff5cfac6a3f","modified":1597135565273},{"_id":"source/_posts/ComputerArchitecture/.DS_Store","hash":"ee68a5b84d9c89dae8c53f401c1521b108129f93","modified":1597134728715},{"_id":"source/_posts/ComputerArchitecture/Storage.md","hash":"8f05318ac6c65925d1a2a124ccb4585ec5cbb74f","modified":1597134522874},{"_id":"source/_posts/ComputerArchitecture/instructionSet.md","hash":"13ec747c54a0ee7869714739c1b2c782ad1bc1f4","modified":1596809661634},{"_id":"source/_posts/ComputerArchitecture/pipeline.md","hash":"68c49afadc03beedcd308fe2bc6930bd39f4577d","modified":1596810785026},{"_id":"source/_posts/PhysicalLayer/.DS_Store","hash":"64e5403c785cf2ef8b84499c0ac8fcc63016b73f","modified":1597135225962},{"_id":"source/_posts/PhysicalLayer/image-20190917211816031.png","hash":"d90e5f550ba47c1e8974347826caa925cd978f08","modified":1568726296032},{"_id":"source/_posts/PhysicalLayer/page40image34686176.png","hash":"ea78a91b612acc02a2528bbbf288cb93f9893538","modified":1570427157000},{"_id":"source/_posts/PhysicalLayer/page63image36690640.png","hash":"08365760c3f92f9b7cc88cbb4e3c5507c0220cc7","modified":1570431937000},{"_id":"source/_posts/PhysicalLayer/page52image35155536.png","hash":"b7770f59ce13f146f6188d4f01a7b56e592aa01b","modified":1570430272000},{"_id":"source/_posts/PhysicalLayer/image-20190917213738345.png","hash":"93593328dd38ec634f8b65c4f0c4dcca6278afe6","modified":1568727458345},{"_id":"source/_posts/PhysicalLayer/image-20191005234914576.png","hash":"f2e7c9163d7f7db139c53a95ee4eff6b0386d2af","modified":1570290554577},{"_id":"source/_posts/PhysicalLayer/image-2019100742053.png","hash":"e87e4a9472dfd2dbca624d8b73673c80e9438c59","modified":1570436456714},{"_id":"source/_posts/PhysicalLayer/page102image35767104.png","hash":"7a2465a49d8dacb51e77ee572e42b9f1df2cd7cf","modified":1570436932000},{"_id":"source/_posts/PhysicalLayer/page44image34725184.png","hash":"c6648c5fd95013b93fb742219e5242584ba132c0","modified":1570427837000},{"_id":"source/_posts/PhysicalLayer/page49image35151168.png","hash":"20166c07051c3cdbc358c778fa5b4b1ae1e406df","modified":1570429069000},{"_id":"source/_posts/ComputerArchitecture/Storage/.DS_Store","hash":"bc643b19f106fd3eaf5812e97856ced45956ee11","modified":1597132028116},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208135106480.png","hash":"3b735fd00f959854cbe52d10ded50d6cc8fa6b96","modified":1575784266480},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208135244903.png","hash":"3932bb7b975c02630b595f98192491fa09b081d4","modified":1575784364906},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208220714030.png","hash":"0695a79ab53ecd10e19354255e784c3197bf0667","modified":1575814034030},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115553486.png","hash":"19bf3b073b628e77d94993d5c5856bdfc4b5e30d","modified":1569815753487},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101250484.png","hash":"8995a0952ec6b94d54acc6306d1fc9ace992e439","modified":1571019170486},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101429477.png","hash":"8120a468d556522033b61c265b9891678d061eb7","modified":1571019269478},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224444341.png","hash":"b9315496fc79f7642dab00ee3433eb6e845a351a","modified":1576680284344},{"_id":"source/_posts/ComputerArchitecture/pipeline/.DS_Store","hash":"90c15d9d95c004904045ac50b3370799ce14d223","modified":1596809966688},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021101747938.png","hash":"dcf84f066ecf6d36beb5d3a63d2e45dfe3ae64c8","modified":1571624267940},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103138887.png","hash":"ed8ec52aaec56c1a3549c45ee5c98baa255056cf","modified":1573439498889},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208134608723.png","hash":"35d73af4b19f4e5f22f89814b7b0ff2ecf477a86","modified":1575783968726},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208202025669.png","hash":"b9619ab4e1f1ebfa7b30d1747f9b2f5ce7b9b376","modified":1575807625670},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208202722945.png","hash":"eabd9d791cb5d76a92f360377d4a58f053e18efb","modified":1575808042948},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209113803942.png","hash":"8b131be1536f3636cbe05f92d7508d07ea167271","modified":1575862683945},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216102829183.png","hash":"ab32fb129e83d18149e08c1736330036ad15895e","modified":1576463364740},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216104938324.png","hash":"e83937308e79f8b96747c4d3d551ada3a0bab6d8","modified":1576464578328},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216110406290.png","hash":"df61d5b1aa97704fc9a58e8f9b01590b92e51eb1","modified":1576465446292},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222618484.png","hash":"9e33c993950bfef3eeafd8be7c78d14249bd52b2","modified":1576506378484},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217210322625.png","hash":"8a117c286a2cfb709d4b7addde2b7d0ba9e55b4c","modified":1576587802626},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217210134473.png","hash":"579099ce3882a2da6d160855c9e2e0bf48631d1c","modified":1576587694475},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930102555608.png","hash":"75e056666f70d2c76c31eab1e90a50f81a56b925","modified":1569810355609},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224500000.png","hash":"fad4c5a5318827aeb32f4c6d09bcfdac67811924","modified":1576680300001},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021095111.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1571622678316},{"_id":"source/_posts/PhysicalLayer/image-20190917211449784.png","hash":"69b7cf73402fbe6cfa162ae99d5acd4a6d467dbe","modified":1568726089785},{"_id":"source/_posts/PhysicalLayer/image-20191007133946196.png","hash":"120152bc47ca6cb7a7c9d9813be3edd67757b278","modified":1570426786196},{"_id":"source/_posts/PhysicalLayer/image-20191007160446233.png","hash":"7f3ed359e85fd189151e4489035ba167741d38c3","modified":1570435486234},{"_id":"source/_posts/PhysicalLayer/image-20191007154637608.png","hash":"a181ef8afb54d9adf870458dfcae301627ade207","modified":1570434397609},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208204804983.png","hash":"9e11564909fd369e157816b502bb95a244911582","modified":1575809284983},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213207928.png","hash":"4600cc9839fe0d2b9b7381ef77018d26097ab896","modified":1575811927930},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213148539.png","hash":"6aee37d9393daffbf4e67297eec0578df8b489d5","modified":1575811908541},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213224033.png","hash":"de8a7ad46782951315c729ad263dc3a6d17bb00b","modified":1575811944034},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209104433202.png","hash":"27d4044338e365af3c1522f7a945f51a74996702","modified":1575859473206},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216210721189.png","hash":"3c0290b75710d438d2057a61b1e8e065386f1045","modified":1576501641190},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222600418.png","hash":"90ecce93f4a824e5796e5e7da88aa4c37b3ea6e9","modified":1576506360421},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217202233856.png","hash":"378b983fa78b282fcfb3e80a4ccbbe151d1e74f3","modified":1576585353858},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222740597.png","hash":"e343b85ceed3a98c70a237a70870e5f207193b51","modified":1576506460599},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217203849064.png","hash":"b850d310c876e4f7df499d38ec22db55b10b409a","modified":1576586329069},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103037853.png","hash":"902eed4b090889daf19ffbe8e058fdde55a6f7aa","modified":1569810637855},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115804883.png","hash":"a86d148db1885f7fba2e25bb251cf34a39bdd830","modified":1569815884884},{"_id":"source/_posts/ComputerArchitecture/pipeline/ca20190908-1.png","hash":"4f0ffcb0dda688b0ed8f5d1b35bec84ffe7acb2a","modified":1567914712626},{"_id":"source/_posts/ComputerArchitecture/pipeline/IMG_C3E4F59B24C4.png","hash":"39e53400ac4e421ec5fed4b00034b2a05a4d5289","modified":1577063576000},{"_id":"source/_posts/PhysicalLayer/image-20191007125121828.png","hash":"34a79a02e21e4cea791bf04c498b80cfe7a4318e","modified":1570423881829},{"_id":"source/_posts/PhysicalLayer/image-20191007140913262.png","hash":"53e59c1c15723c3c682d7509376329e55c818ab6","modified":1570428553263},{"_id":"source/_posts/PhysicalLayer/image-20200101212239647.png","hash":"e9e05c949c498a52877c90186c19a54cf476761b","modified":1577884959648},{"_id":"source/_posts/PhysicalLayer/image-20191007153614734.png","hash":"7632c713c5c7ac86537c14216ecc5ff811bc211e","modified":1570433774734},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_E9E135911744-1.png","hash":"755b16a80635303c5e897d73e6918cdbf703e3a8","modified":1576469863000},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208205644462.png","hash":"a49d03bb700bb40aeeccf18d36d67cdab087baa2","modified":1575809804464},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208210849569.png","hash":"c8e7b5b1dcf296e6b8d0351126320cdddcc1ca8f","modified":1575810529571},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209104458720.png","hash":"5478efa65cddf4dc383f154d9afd91227720200f","modified":1575859498721},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209103141041.png","hash":"6e1ca8cd52d19a9e203f45159cd5f89dc9ed3972","modified":1575858701044},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216210659441.png","hash":"6f67b6aa44a5aafe244708dde4997c41631b1256","modified":1576501619444},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222544839.png","hash":"7242da77576a61406807ea64fb5b8d6102dd3dab","modified":1576506344841},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930102855084.png","hash":"9bceece48b5757f8dbd5a27b170e90c6179903be","modified":1569810535085},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103000391.png","hash":"0477a87305b6e830f817f08bb00ef67dbfcd7359","modified":1569810600393},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103101742.png","hash":"84a6ad40d7a6aad1ffc8602e1fd154096000ada6","modified":1569810661743},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115734010.png","hash":"45fcad3501f67c87cf3563619d9f96ae122d2210","modified":1569815854012},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115635931.png","hash":"2747827050deb3511974e4c92084800d09eddb31","modified":1569815795932},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013143518878.png","hash":"992264195c872e4a3ea4b8f37ea291f5e05f8c91","modified":1570948518880},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013151122898.png","hash":"657069acd344b946ade7c698b4c3010c80f5ca08","modified":1570950682900},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191014112116582.png","hash":"89bead8581feddd734ecc24a68412d446559527a","modified":1571023276582},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021095901298.png","hash":"4492923d9852ef3c72f4389c20a69028feab7fbc","modified":1571623141300},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021103246990.png","hash":"11eb72a34395488b6b409d8d0b24451ef633a6c8","modified":1571625166992},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013151314878.png","hash":"dd19b7966043be8bdb26c847c27d846703d79efe","modified":1570950794878},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103455864.png","hash":"cc3d257ce8f4f30fabcb2998a6df7d13d3903832","modified":1573439695866},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103637824.png","hash":"3ebf0712366e2a12e28676ee7665141dbb14aa89","modified":1573439797827},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111104058863.png","hash":"158589f60813a7da61e45418bb9eec011b4271ca","modified":1573440058863},{"_id":"source/_posts/PhysicalLayer/image-20191005234836200.png","hash":"d3dfbe93b3e4667e773cc1e501947851a7027876","modified":1570290516202},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111104720076.png","hash":"0bd547e5d7b7e119e04ecd3d10daf304c525038f","modified":1573440440077},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1571626818404},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_2C62CE9D9D16-1.jpeg","hash":"96d449ad12e316b61f58100ebc0201c8d09f9dba","modified":1576469279171},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209100308445.png","hash":"a395b563090f86697bd86434ccb01598ae1a27cf","modified":1575856988448},{"_id":"source/_posts/ComputerArchitecture/pipeline/ca20190908-2.png","hash":"dc8cf5eba98d5ba7d3b46d113cbbcc2ffe2351b3","modified":1567914898236},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021105802697.png","hash":"080abe7582c0904544de412b9fe7fbca446ed915","modified":1571626682700},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103409484.png","hash":"64d8120f30ad13b0d243d59c2cb4e72ed74f2fad","modified":1573439649487},{"_id":"source/_posts/PhysicalLayer/image-20191007161859322.png","hash":"25c8c3eeedbc031ae0a13f740bee4717d1b2f60b","modified":1570436339323},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208194519623.png","hash":"cdfe682d8dbb832e390e2ea071521a48dbc646f7","modified":1575805519624},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208204528711.png","hash":"0ef9705cfbccdbd97158a8eaffb15e1cf0c5960e","modified":1575809128714},{"_id":"source/_posts/ComputerArchitecture/Storage/image-2019120874232.png","hash":"368bf410ab1ee493382649f26df91654481745f1","modified":1575805447574},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105418930.png","hash":"87375b7a43c012d6b22daa0c8d15c611d3235d4c","modified":1575860058930},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216214128113.png","hash":"7588e00eba1e7ebf968a622f2f17aa3e1e13345b","modified":1576503688114},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222905001.png","hash":"7c2c0218bbdb2e5746b722665f108e71207fcd0c","modified":1576506545001},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1569809548496},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013133054888.png","hash":"cd502b027b044546b48ed7e8eff21b9301c4e2de","modified":1570944654891},{"_id":"source/_posts/PhysicalLayer/image-20191007133601513.png","hash":"30978fbd5f630cbc96e0c788f728acb795161bdb","modified":1570426561514},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105411600.png","hash":"1d47c8ed68d8f126f39fb1b9620280b07f8aab6d","modified":1575860051602},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131556362.png","hash":"da7f68f41f9f06911428ca4123c7e153589b924e","modified":1576473356364},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101703881.png","hash":"6b746f0193bed5af739f1df76d3184c1bebacb54","modified":1571019423881},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208201918610.png","hash":"065f714fe78cee70a700b2d9e5d15e4ec3a2768a","modified":1575807558613},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105429474.png","hash":"5f7ba51494e49e99133c2d88195af7fd0d7bb67a","modified":1575860069476},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105442259.png","hash":"dbd582011741a217eaf1b09d5285e53c4a961428","modified":1575860082260},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105451917.png","hash":"e9328e56b98789a86ed354c59e96c82cb75778f3","modified":1575860091920},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130921114.png","hash":"0755b281506abe645d5094f730c76445396ef075","modified":1576472961115},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130845614.png","hash":"74b14fae96a25cb3413b4a6bc944397590f7f7cc","modified":1576472925617},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131302430.png","hash":"6a2a3923c88b420d466e522d5ef31bc8cc45cebf","modified":1576473182432},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131334869.png","hash":"4d1c705cc3314f96bf185f0235abe85c644dcfc9","modified":1576473214871},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130953500.png","hash":"9fefebc518750d4fc11729854da30a58edb6f0ea","modified":1576472993501},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131127165.png","hash":"53490df4b5322a9b82a5f21782e2b15086d314d8","modified":1576473087168},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131420435.png","hash":"e09f90a1cfadb8c722867127a8e86519949678ee","modified":1576473260435},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131357343.png","hash":"246b7459a3bc4a4472f4b08fc24451353435ee8c","modified":1576473237344},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131242663.png","hash":"f6a97a00c8af0bc9a858b64892d00db2a5a6615f","modified":1576473162663},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131449208.png","hash":"5245b55495c9b47ae179273711aade5864b2115a","modified":1576473289209},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131536642.png","hash":"ae6b2b07d81734baeff02ed18c4afc68c1bdfd88","modified":1576473336644},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131514362.png","hash":"0bb7e1fa565ffb15640d8231d0f0f43639e112a8","modified":1576473314363},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208205754992.png","hash":"68e445d323db4659f1e56987399769e1d4e5faad","modified":1575809874995},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208215035983.png","hash":"8e073b381da0da065a05d38873a35c680602821e","modified":1575813035986},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021115323894.png","hash":"faec8817b6f39cf58c25c52e2968cdb19732eb2c","modified":1571630003897},{"_id":"source/_posts/PhysicalLayer/image-20191006000007082.png","hash":"ab9651ba323d5c8741ae6c86ed84d0234821ddb3","modified":1570291207083},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216121018499.png","hash":"b092ddc1d016b9bbd10c5fa17ee1c2d807055a4d","modified":1576469418500},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130127847.png","hash":"a18436d4102f877a7a46ca0d9422e16167317e4d","modified":1576472487848},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130657742.png","hash":"3841fb3165a047456ef3a0f7165d7e5b9ffb549b","modified":1576472817742},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105459461.png","hash":"7476b7d7000e86cd47546cf7c0b5b357c377f814","modified":1575860099462},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209113823956.png","hash":"923e6fcf3eaac276d9ce14e801f4a048282bf7bd","modified":1575862703957},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014102744097.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014102744097-6809392.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1571020064098},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208214954621.png","hash":"c84e339bdab1850542580d368947930d8567f262","modified":1575812994624},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_8BFCBD97FD85-1.png","hash":"c562645a2402d3790114aab46f749c6ee3d0a956","modified":1576500714000},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216120558419.png","hash":"00fdb2071ac2e4edc236e01f722d40b3c8d027c6","modified":1576469158423},{"_id":"source/_posts/PhysicalLayer/9FC21EC72573A17040AD0FCD3C37A790.png","hash":"f615d649324cbbee80439c568c5d91c2e12cf030","modified":1570373184514},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224924929.png","hash":"2d175c9613c241344d7871e2b506f8b3b64ed260","modified":1576680564933},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_17517EAA2585-1.png","hash":"b8c93a023f767e4746c4ca392ecdc7aa56807c67","modified":1576500453000},{"_id":"source/_posts/FactoryMethod.md","hash":"799d6ebce705e9e7d448b5c307d126cd6b95d54f","modified":1597389087769},{"_id":"source/_posts/PhysicalLayer/page42image34731632.png","hash":"9095276e126df625b38f3e0295f20fe7ae5553da","modified":1570427389000},{"_id":"source/_posts/PhysicalLayer/page41image34714624.png","hash":"9fb2a00ce1c10c6f05d73e2b48575a71ea60003e","modified":1570427292000},{"_id":"source/img/image-20190917211449784.png","hash":"69b7cf73402fbe6cfa162ae99d5acd4a6d467dbe","modified":1568726089785},{"_id":"source/img/image-20200814150354579.png","hash":"97ad360804022fefb122fe692d3fd80c93a161b0","modified":1597388914576},{"_id":"source/_posts/FactoryMethod/image-20200814150354579.png","hash":"97ad360804022fefb122fe692d3fd80c93a161b0","modified":1597388914576},{"_id":"public/local-search.xml","hash":"4699a9c9b27a2fc940ef6fd592e8c2ee4eb7c793","modified":1597389867336},{"_id":"public/about/index.html","hash":"a311a25412b911dda1becc997cb269a3860b28b2","modified":1597389867336},{"_id":"public/2020/08/06/DesignPatterns/Principle/index.html","hash":"b5167a4ddfe5147193bfdcc34929909f70ffc6a4","modified":1597389867336},{"_id":"public/archives/index.html","hash":"d18c44c4002b8e273ae42da3c3c2a8f18be3ae38","modified":1597389867336},{"_id":"public/archives/page/2/index.html","hash":"f03be0041df5322348aad848e1f98ba6c0de3a06","modified":1597389867336},{"_id":"public/archives/2019/index.html","hash":"04f39fe7658821dc7eeb4077940e161d72137305","modified":1597389867336},{"_id":"public/archives/2019/09/index.html","hash":"9086cf76d97da0dfe250dbd1c2dd1f8e75025fa0","modified":1597389867336},{"_id":"public/archives/2019/10/index.html","hash":"f04332c78606a852ada6ac57575b92c5c9808499","modified":1597389867336},{"_id":"public/archives/2019/12/index.html","hash":"6c2b0952f3d8c73dffa4d063111ee877c2b40fcc","modified":1597389867336},{"_id":"public/archives/2020/index.html","hash":"b553df94d4e1852d5e3aac0019ad3d6c69afd78c","modified":1597389867336},{"_id":"public/archives/2020/08/index.html","hash":"b553df94d4e1852d5e3aac0019ad3d6c69afd78c","modified":1597389867336},{"_id":"public/tags/Computer-Architecture/index.html","hash":"c34c8b9ca711938b599ac1d5c8e5c3cbefb4407d","modified":1597389867336},{"_id":"public/tags/Design-Patterns/index.html","hash":"56145035ec80fd345551da0bd7d881264084d174","modified":1597389867336},{"_id":"public/tags/Computer-Network/index.html","hash":"000b0ec44d8a857377da86a046722defedc3c5ee","modified":1597389867336},{"_id":"public/page/2/index.html","hash":"9accc0b1b8f6fe424b6305c17066af8a85c14161","modified":1597389867336},{"_id":"public/categories/Computer-Architecture/index.html","hash":"7e9c95eacbc4349e3d7d0b6c00f03f537e8baf81","modified":1597389867336},{"_id":"public/categories/Design-Patterns/index.html","hash":"4ffc8068b155b3f866767bbc37ee9bb58ceb45d3","modified":1597389867336},{"_id":"public/categories/Computer-Network/index.html","hash":"ee83821f0ee3dba5be988753026c1f0407e6d20c","modified":1597389867336},{"_id":"public/404.html","hash":"0752fa97786e89e004212722686fc8e66c2f614f","modified":1597389867336},{"_id":"public/tags/index.html","hash":"73459cdba753a4063c32d397443146d8c7668296","modified":1597389867336},{"_id":"public/categories/index.html","hash":"027aad2122216cb190812b819f6e5c5ebdbdc467","modified":1597389867336},{"_id":"public/links/index.html","hash":"767872d90cbafac9e0a8986d530f2d3461888dd9","modified":1597389867336},{"_id":"public/2020/08/14/FactoryMethod/index.html","hash":"3d2bfdb0c235ff9658d9c56134b232bc4bf13066","modified":1597389867336},{"_id":"public/2020/08/11/DesignPatterns/Bridge/index.html","hash":"00766ab328eb75e80a48451d64c87fafe0d06310","modified":1597389867336},{"_id":"public/2020/08/09/Capital/index.html","hash":"db00dc6edc6e414c65f3f45a6f86860bebeca635","modified":1597389867336},{"_id":"public/2020/08/07/DesignPatterns/Decorator/index.html","hash":"66eaa1957ea8a3163a181972739e63300ac2194f","modified":1597389867336},{"_id":"public/2020/08/06/DesignPatterns/Observer/index.html","hash":"eb1c03cf0d8a2178939794ded0f0722726da9ec5","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/index.html","hash":"b13e523b19cc627bc67433a066486b82493f1650","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/StrategyMethod/index.html","hash":"4bc49513ed50474d71c7fdff3f7da81a23b97155","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/index.html","hash":"b56c2cf080313061afc74353722724ca3ee87157","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/index.html","hash":"ff1881974be85f740be54615fa845178e19b42e1","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/index.html","hash":"e5d9edf5a8d176bdcd23eb412a0d2397d7361ac1","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/index.html","hash":"344cc2be840b40ef1cfa36c54f1b0ea835dda02c","modified":1597389867336},{"_id":"public/index.html","hash":"344842274afaa839455fedb1ed034084f3578e5d","modified":1597389867336},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1597389867336},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191024075.png","hash":"c9d9cdda10734b608de035e0ed41410a9ed12f2a","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20190917211816031.png","hash":"d90e5f550ba47c1e8974347826caa925cd978f08","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page40image34686176.png","hash":"ea78a91b612acc02a2528bbbf288cb93f9893538","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page63image36690640.png","hash":"08365760c3f92f9b7cc88cbb4e3c5507c0220cc7","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page52image35155536.png","hash":"b7770f59ce13f146f6188d4f01a7b56e592aa01b","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930115553486.png","hash":"19bf3b073b628e77d94993d5c5856bdfc4b5e30d","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191014101429477.png","hash":"8120a468d556522033b61c265b9891678d061eb7","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191014101250484.png","hash":"8995a0952ec6b94d54acc6306d1fc9ace992e439","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191218224444341.png","hash":"b9315496fc79f7642dab00ee3433eb6e845a351a","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111103138887.png","hash":"ed8ec52aaec56c1a3549c45ee5c98baa255056cf","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021101747938.png","hash":"dcf84f066ecf6d36beb5d3a63d2e45dfe3ae64c8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208135106480.png","hash":"3b735fd00f959854cbe52d10ded50d6cc8fa6b96","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208135244903.png","hash":"3932bb7b975c02630b595f98192491fa09b081d4","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208220714030.png","hash":"0695a79ab53ecd10e19354255e784c3197bf0667","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page42image34731632.png","hash":"9095276e126df625b38f3e0295f20fe7ae5553da","modified":1597389867336},{"_id":"public/img/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191212499.png","hash":"e9b999198d97d912f860c32db4ed5f8d9afc9142","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710191917988.png","hash":"054cb9629b796fbdce6291f07c028c2e97fb520a","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/TemplateMethod/image-20200710192039991.png","hash":"a8fb26639be616e19d2b84031a1439124e470545","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20190917213738345.png","hash":"93593328dd38ec634f8b65c4f0c4dcca6278afe6","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191005234914576.png","hash":"f2e7c9163d7f7db139c53a95ee4eff6b0386d2af","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-2019100742053.png","hash":"e87e4a9472dfd2dbca624d8b73673c80e9438c59","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page102image35767104.png","hash":"7a2465a49d8dacb51e77ee572e42b9f1df2cd7cf","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page44image34725184.png","hash":"c6648c5fd95013b93fb742219e5242584ba132c0","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page49image35151168.png","hash":"20166c07051c3cdbc358c778fa5b4b1ae1e406df","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930102555608.png","hash":"75e056666f70d2c76c31eab1e90a50f81a56b925","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191218224500000.png","hash":"fad4c5a5318827aeb32f4c6d09bcfdac67811924","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021095111.png","hash":"5d7bd91c3be3b13f28440b75508e4dec7f3eb4b8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208134608723.png","hash":"35d73af4b19f4e5f22f89814b7b0ff2ecf477a86","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208202025669.png","hash":"b9619ab4e1f1ebfa7b30d1747f9b2f5ce7b9b376","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208202722945.png","hash":"eabd9d791cb5d76a92f360377d4a58f053e18efb","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209113803942.png","hash":"8b131be1536f3636cbe05f92d7508d07ea167271","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216102829183.png","hash":"ab32fb129e83d18149e08c1736330036ad15895e","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216104938324.png","hash":"e83937308e79f8b96747c4d3d551ada3a0bab6d8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216110406290.png","hash":"df61d5b1aa97704fc9a58e8f9b01590b92e51eb1","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216222618484.png","hash":"9e33c993950bfef3eeafd8be7c78d14249bd52b2","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/page41image34714624.png","hash":"9fb2a00ce1c10c6f05d73e2b48575a71ea60003e","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191217210134473.png","hash":"579099ce3882a2da6d160855c9e2e0bf48631d1c","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191217210322625.png","hash":"8a117c286a2cfb709d4b7addde2b7d0ba9e55b4c","modified":1597389867336},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1597389867336},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1597389867336},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1597389867336},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1597389867336},{"_id":"public/js/color-schema.js","hash":"6ba340eef77b2daf14c8fbb6b4f7bda9becb2526","modified":1597389867336},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1597389867336},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1597389867336},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1597389867336},{"_id":"public/css/main.css","hash":"c3d90e80577ecacd117bdf678feaf2a905b6efe1","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208204804983.png","hash":"9e11564909fd369e157816b502bb95a244911582","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208213207928.png","hash":"4600cc9839fe0d2b9b7381ef77018d26097ab896","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208213148539.png","hash":"6aee37d9393daffbf4e67297eec0578df8b489d5","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209104433202.png","hash":"27d4044338e365af3c1522f7a945f51a74996702","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208213224033.png","hash":"de8a7ad46782951315c729ad263dc3a6d17bb00b","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216210721189.png","hash":"3c0290b75710d438d2057a61b1e8e065386f1045","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216222600418.png","hash":"90ecce93f4a824e5796e5e7da88aa4c37b3ea6e9","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216222740597.png","hash":"e343b85ceed3a98c70a237a70870e5f207193b51","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191217202233856.png","hash":"378b983fa78b282fcfb3e80a4ccbbe151d1e74f3","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191217203849064.png","hash":"b850d310c876e4f7df499d38ec22db55b10b409a","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930103037853.png","hash":"902eed4b090889daf19ffbe8e058fdde55a6f7aa","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930115804883.png","hash":"a86d148db1885f7fba2e25bb251cf34a39bdd830","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/ca20190908-1.png","hash":"4f0ffcb0dda688b0ed8f5d1b35bec84ffe7acb2a","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/IMG_C3E4F59B24C4.png","hash":"39e53400ac4e421ec5fed4b00034b2a05a4d5289","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007153614734.png","hash":"7632c713c5c7ac86537c14216ecc5ff811bc211e","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20200101212239647.png","hash":"e9e05c949c498a52877c90186c19a54cf476761b","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930115734010.png","hash":"45fcad3501f67c87cf3563619d9f96ae122d2210","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930115635931.png","hash":"2747827050deb3511974e4c92084800d09eddb31","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191013151314878.png","hash":"dd19b7966043be8bdb26c847c27d846703d79efe","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/IMG_2C62CE9D9D16-1.jpeg","hash":"96d449ad12e316b61f58100ebc0201c8d09f9dba","modified":1597389867336},{"_id":"public/img/image-20191209103141041.png","hash":"6e1ca8cd52d19a9e203f45159cd5f89dc9ed3972","modified":1597389867336},{"_id":"public/img/image-20190917211449784.png","hash":"69b7cf73402fbe6cfa162ae99d5acd4a6d467dbe","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20190917211449784.png","hash":"69b7cf73402fbe6cfa162ae99d5acd4a6d467dbe","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007133946196.png","hash":"120152bc47ca6cb7a7c9d9813be3edd67757b278","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007160446233.png","hash":"7f3ed359e85fd189151e4489035ba167741d38c3","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208205644462.png","hash":"a49d03bb700bb40aeeccf18d36d67cdab087baa2","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/IMG_E9E135911744-1.png","hash":"755b16a80635303c5e897d73e6918cdbf703e3a8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208210849569.png","hash":"c8e7b5b1dcf296e6b8d0351126320cdddcc1ca8f","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209104458720.png","hash":"5478efa65cddf4dc383f154d9afd91227720200f","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216222544839.png","hash":"7242da77576a61406807ea64fb5b8d6102dd3dab","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216210659441.png","hash":"6f67b6aa44a5aafe244708dde4997c41631b1256","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209103141041.png","hash":"6e1ca8cd52d19a9e203f45159cd5f89dc9ed3972","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930102855084.png","hash":"9bceece48b5757f8dbd5a27b170e90c6179903be","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930103101742.png","hash":"84a6ad40d7a6aad1ffc8602e1fd154096000ada6","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930103000391.png","hash":"0477a87305b6e830f817f08bb00ef67dbfcd7359","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191013143518878.png","hash":"992264195c872e4a3ea4b8f37ea291f5e05f8c91","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191013151122898.png","hash":"657069acd344b946ade7c698b4c3010c80f5ca08","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191014112116582.png","hash":"89bead8581feddd734ecc24a68412d446559527a","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021095901298.png","hash":"4492923d9852ef3c72f4389c20a69028feab7fbc","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021103246990.png","hash":"11eb72a34395488b6b409d8d0b24451ef633a6c8","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111103455864.png","hash":"cc3d257ce8f4f30fabcb2998a6df7d13d3903832","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111104058863.png","hash":"158589f60813a7da61e45418bb9eec011b4271ca","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111103637824.png","hash":"3ebf0712366e2a12e28676ee7665141dbb14aa89","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111104720076.png","hash":"0bd547e5d7b7e119e04ecd3d10daf304c525038f","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216222905001.png","hash":"7c2c0218bbdb2e5746b722665f108e71207fcd0c","modified":1597389867336},{"_id":"public/img/image-20191021110018403.png","hash":"a6d8d94f0c2e5f43fce349b2d7cac7e8cd284cb7","modified":1597389867336},{"_id":"public/img/avatar.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1597389867336},{"_id":"public/img/favicon.png","hash":"676e864f7cc2219f7984de4c0f8dbf96fd663944","modified":1597389867336},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007154637608.png","hash":"a181ef8afb54d9adf870458dfcae301627ade207","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007125121828.png","hash":"34a79a02e21e4cea791bf04c498b80cfe7a4318e","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191005234836200.png","hash":"d3dfbe93b3e4667e773cc1e501947851a7027876","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191111103409484.png","hash":"64d8120f30ad13b0d243d59c2cb4e72ed74f2fad","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191013133054888.png","hash":"cd502b027b044546b48ed7e8eff21b9301c4e2de","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208204528711.png","hash":"0ef9705cfbccdbd97158a8eaffb15e1cf0c5960e","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216214128113.png","hash":"7588e00eba1e7ebf968a622f2f17aa3e1e13345b","modified":1597389867336},{"_id":"public/img/image-20200807160507597.png","hash":"490eb5b5be3655c41cbc8f0578689c0240799edc","modified":1597389867336},{"_id":"public/img/image-20200806160700160.png","hash":"cb4ed64f80eefb8d68cc969a59d3548eab709298","modified":1597389867336},{"_id":"public/img/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1597389867336},{"_id":"public/img/image-20200814150354579.png","hash":"97ad360804022fefb122fe692d3fd80c93a161b0","modified":1597389867336},{"_id":"public/2020/08/06/DesignPatterns/Observer/image-20200806160700160.png","hash":"b6abb80ce592d70dcdd4087f4833aa8f489b8b97","modified":1597389867336},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807143823919.png","hash":"aac6a9f03eb640439d5b69f787bbb683a488861d","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007140913262.png","hash":"53e59c1c15723c3c682d7509376329e55c818ab6","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209100308445.png","hash":"a395b563090f86697bd86434ccb01598ae1a27cf","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208194519623.png","hash":"cdfe682d8dbb832e390e2ea071521a48dbc646f7","modified":1597389867336},{"_id":"public/img/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1597389867336},{"_id":"public/2020/08/05/DesignPatterns/StrategyMethod/image-20200805135526277.png","hash":"3fb2915a905f9c18fe8663e982e32baf067a1c54","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021105802697.png","hash":"080abe7582c0904544de412b9fe7fbca446ed915","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191014101703881.png","hash":"6b746f0193bed5af739f1df76d3184c1bebacb54","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/image-20191021115323894.png","hash":"faec8817b6f39cf58c25c52e2968cdb19732eb2c","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-2019120874232.png","hash":"368bf410ab1ee493382649f26df91654481745f1","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105418930.png","hash":"87375b7a43c012d6b22daa0c8d15c611d3235d4c","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105411600.png","hash":"1d47c8ed68d8f126f39fb1b9620280b07f8aab6d","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105429474.png","hash":"5f7ba51494e49e99133c2d88195af7fd0d7bb67a","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131556362.png","hash":"da7f68f41f9f06911428ca4123c7e153589b924e","modified":1597389867336},{"_id":"public/2020/08/14/FactoryMethod/image-20200814150354579.png","hash":"97ad360804022fefb122fe692d3fd80c93a161b0","modified":1597389867336},{"_id":"public/2019/10/13/ComputerArchitecture/pipeline/ca20190908-2.png","hash":"dc8cf5eba98d5ba7d3b46d113cbbcc2ffe2351b3","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208215035983.png","hash":"8e073b381da0da065a05d38873a35c680602821e","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105442259.png","hash":"dbd582011741a217eaf1b09d5285e53c4a961428","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105459461.png","hash":"7476b7d7000e86cd47546cf7c0b5b357c377f814","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209105451917.png","hash":"e9328e56b98789a86ed354c59e96c82cb75778f3","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216130921114.png","hash":"0755b281506abe645d5094f730c76445396ef075","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216130845614.png","hash":"74b14fae96a25cb3413b4a6bc944397590f7f7cc","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216130953500.png","hash":"9fefebc518750d4fc11729854da30a58edb6f0ea","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131242663.png","hash":"f6a97a00c8af0bc9a858b64892d00db2a5a6615f","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131302430.png","hash":"6a2a3923c88b420d466e522d5ef31bc8cc45cebf","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131127165.png","hash":"53490df4b5322a9b82a5f21782e2b15086d314d8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131334869.png","hash":"4d1c705cc3314f96bf185f0235abe85c644dcfc9","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131357343.png","hash":"246b7459a3bc4a4472f4b08fc24451353435ee8c","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131420435.png","hash":"e09f90a1cfadb8c722867127a8e86519949678ee","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131449208.png","hash":"5245b55495c9b47ae179273711aade5864b2115a","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131514362.png","hash":"0bb7e1fa565ffb15640d8231d0f0f43639e112a8","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216131536642.png","hash":"ae6b2b07d81734baeff02ed18c4afc68c1bdfd88","modified":1597389867336},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807142228605.png","hash":"87bd7e6b236c68eb219b9f4d9bc92419c8af101a","modified":1597389867336},{"_id":"public/2020/08/07/DesignPatterns/Decorator/image-20200807143722316.png","hash":"96d4c261eb9048de61457b91b094f3591cf8a226","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007161859322.png","hash":"25c8c3eeedbc031ae0a13f740bee4717d1b2f60b","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20190930101228492.png","hash":"c5d10f0e0b373ea5bae28d076f77059ff87304ab","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208201918610.png","hash":"065f714fe78cee70a700b2d9e5d15e4ec3a2768a","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191006000007082.png","hash":"ab9651ba323d5c8741ae6c86ed84d0234821ddb3","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191014102744097.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208205754992.png","hash":"68e445d323db4659f1e56987399769e1d4e5faad","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216121018499.png","hash":"b092ddc1d016b9bbd10c5fa17ee1c2d807055a4d","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216130657742.png","hash":"3841fb3165a047456ef3a0f7165d7e5b9ffb549b","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191014102744097-6809392.png","hash":"0c12b5e6eb45380ce791128e68ef0c4ca4c74759","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191209113823956.png","hash":"923e6fcf3eaac276d9ce14e801f4a048282bf7bd","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216130127847.png","hash":"a18436d4102f877a7a46ca0d9422e16167317e4d","modified":1597389867336},{"_id":"public/2020/08/11/DesignPatterns/Bridge/image-20200811150059187.png","hash":"923d664173100c45a259afbb138086474a9cd493","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/image-20191007133601513.png","hash":"30978fbd5f630cbc96e0c788f728acb795161bdb","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191208214954621.png","hash":"c84e339bdab1850542580d368947930d8567f262","modified":1597389867336},{"_id":"public/img/image-20200811150059187.png","hash":"923d664173100c45a259afbb138086474a9cd493","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/IMG_8BFCBD97FD85-1.png","hash":"c562645a2402d3790114aab46f749c6ee3d0a956","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/image-20191216120558419.png","hash":"00fdb2071ac2e4edc236e01f722d40b3c8d027c6","modified":1597389867336},{"_id":"public/2019/12/08/ComputerArchitecture/Storage/IMG_17517EAA2585-1.png","hash":"b8c93a023f767e4746c4ca392ecdc7aa56807c67","modified":1597389867336},{"_id":"public/2019/09/08/ComputerArchitecture/instructionSet/image-20191218224924929.png","hash":"2d175c9613c241344d7871e2b506f8b3b64ed260","modified":1597389867336},{"_id":"public/2019/09/17/PhysicalLayer/9FC21EC72573A17040AD0FCD3C37A790.png","hash":"f615d649324cbbee80439c568c5d91c2e12cf030","modified":1597389867336},{"_id":"public/img/achive.png","hash":"bfdf73f8656f6c2559587659051d801aae61e49d","modified":1597389867336},{"_id":"public/img/default.png","hash":"40217ddf4aa1f7598ed3c89d7d55775c47b34987","modified":1597389867336}],"Category":[{"name":"Computer Architecture","_id":"ckdpnxfcg0004dbufhkn782si"},{"name":"Design Patterns","_id":"ckdpnxfff000jdbufbbnz5hfx"},{"name":"Computer Network","_id":"ckdpp3i1f00010rufcid7hlmq"}],"Data":[{"_id":"fluid_config","data":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2020-07-28T06:51:36.000Z","layout":"about","_content":"\n<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n              \t<li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-28 14:51:36\nlayout: about\n---\n\n<header >\n</header>\n<main class=\"mdl-color--blue-grey-50\">\n    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n              \t<li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section>\n    </section>","updated":"2020-08-05T08:29:09.238Z","path":"about/index.html","comments":1,"_id":"ckdpnxfca0001dbufhvtb9xq2","content":"<p><header >\n</header></p>\n<p><main class=\"mdl-color--blue-grey-50\"><br>    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                  <li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section><br>    &lt;/section&gt;</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<p><header >\n</header></p>\n<p><main class=\"mdl-color--blue-grey-50\"><br>    <section class=\"mdl-color--white mdl-shadow--2dp\">\n        <h2 class=\"mdl-typography--display-1\">&emsp;Education</h2>\n        <section>\n            <h3 class=\"mdl-typography--title mdl-typography--title mdl-color-text--indigo-500\">&emsp;Zhejiang University</h3>\n            <p class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">&emsp;Bachelor of Engineering, Computer Science and Technology</p>\n            <p class=\"mdl-typography--body-1 mdl-typography--body-1-color-contrast\">\n                &emsp;August 2017 – Present, Hangzhou, China\n            </p>\n            <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                  <li>Member of Pursuit Science Class (Computer Science), Chu Kochen Honors College</li>\n              <li>Overall GPA: 3.98/4, 4.58/5, 91.5/100</li>\n              <ul class=\"mdl-typography--subhead mdl-typography--subhead-color-contrast\">\n                SELECTED COURSES(4.0/4.0 in all of them)\n                <li>Systems: Digital Logic Design, Computer Organization, Computer Architecture, Computer Networks, Operating System, Compiler Principles</li>\n                <li>Math: Mathematical Analysis, Linear Algebra, Stochastic Process, Probability and Mathematical Statistics, Applied Operation Research, Numerical Analysis</li>\n              </ul>\n              <li>RESEARCH INTEREST: Computer Architecture and Hardware Security, recent projects focused on hardware transactional memory.</li>\n            </ul>\n            <br>\n        </section><br>    &lt;/section&gt;</p>\n"}],"Post":[{"title":"资本论读书摘抄","date":"2020-08-09T14:59:47.000Z","_content":"\n# 2020-08-09\n\n#### 商品 第一卷第一章\n\n* 商品的两个因素: 使用价值和价值\n\n* 物的有用性成为使用价值。服务是具有使用价值的。\n* 由于使用价值才是构成一个社会的财富的物质内容，因此，股票市场的涨跌并不代表一个社会的财富的增加或减少\n\n* 交换价值首先表现为一种使用价值同另一种使用价值相交换的量的关系或比例。\n* 由于交换是一个私人劳动向社会劳动的转变过程，这个过程中存在一定的随机性，因此交换价值具有一定的偶然性。但这种偶然性中包含必然性。用马克思身后才发展起来的概率论的术语来说，一个商品或一个使用价值在不同的时间和地点进行交换时，其交换价值是一个随机变量，但这个随机变量有一个确定的，并非偶然的和纯粹相对的期望值，这个期望值就是商品固有的，内在的交换价值。\n\n* 现代庸俗经济学用供求关系和效用来解释交换价值的形成。实际上供求关系和效用只能解释交换价值的随机部分，而不能解释交换价值内在的期望值。按现代庸俗经济学的解释，之所以1夸特小麦=a吨铁，是因为这两者带给交易者的边际效用是相同的。由于边际效用纯属个人的主观感受，因此，如果市场上都按上式进行交易，那就意味着所有的交易者的主观感受完全一致，用概率论的术语说，既然每个人的主观感觉是无限的或是可以无限细分的，因此，发生这种情况的概率为零，即它是几乎不可能的。于是，如果我们观察到某个市场上的交易都在或大多数都在按同一等式进行交换时，效用论要么破产，要么需要假定存在一个不以个人意志为转移的效用期望值，而分析这个期望值是如何存在的，就不得不回到劳动价值学说。\n\n* 商品的交换价值是由外部的别的东西来度量的，而商品的价值则是它本身单纯凝结的人类劳动，后文说明它是由所凝固的劳动时间来度量的。这两个价值的度量单位是不同的。这种不同决定了，在一定的条件下，尤其是资本主义条件下，商品的交换价值与商品的价值是相背离的。\n\n* 劳动与生产资料共同创造财富。社会主义并不反对资本，(资本分为预付来购买生产资料的不变资本和预付来购买劳动的可变资本。但由于现在资本家往往正如马克思在《资本论》中将要指出的那样，并不预购劳动，而是让工人先提供(预付)劳动，再从工人劳动创造的价值中，取出一部分来作为报酬支付给工人。即，资本家往往只需预付不变资本(单个资本家可以贷款或赊欠来一部分不变资本，但这些资本还是来自于资本家，货币资本家)，通过赊欠可变资本，进行生产。所以这里将代表生产资料的不变资本，简称为资本。)而是反对资本与劳动的人为脱节，反对有人通过垄断资本而不劳而获、骄奢淫逸；反对有劳动能力的劳动者为了获得与资本相结合的机会而被迫过着辛劳而悲惨的生活。\n\n* 有人认为，工人的工资是固定的，资本家的利润是不固定的。所以，资本家承担了生产经营过程中的风险，而工人不承担风险，所以资本家应当获得与其所承担的风险相应的剥削收入。但是，一方面，资本家的所得大大超过他所承担的风险；另一方面，工人的劳动是预付的，同样存在风险。被拖欠和无端克扣工资的事经常发生，而且拖欠的工资即使发还也往往是不付利息的。至于最后工资完全泡汤的事也不是没有发生过，部分泡汤的就更多。即使有工资，有时还不够用来治疗职业病。而且资本家的风险是他自己造成的，由他自己负责；而工人的风险则是由资本家造成的，资本家反而应当因此对工人进行补偿。\n\n  ","source":"_posts/Capital.md","raw":"---\ntitle: 资本论读书摘抄\ndate: 2020-08-09 22:59:47\ntags:\n---\n\n# 2020-08-09\n\n#### 商品 第一卷第一章\n\n* 商品的两个因素: 使用价值和价值\n\n* 物的有用性成为使用价值。服务是具有使用价值的。\n* 由于使用价值才是构成一个社会的财富的物质内容，因此，股票市场的涨跌并不代表一个社会的财富的增加或减少\n\n* 交换价值首先表现为一种使用价值同另一种使用价值相交换的量的关系或比例。\n* 由于交换是一个私人劳动向社会劳动的转变过程，这个过程中存在一定的随机性，因此交换价值具有一定的偶然性。但这种偶然性中包含必然性。用马克思身后才发展起来的概率论的术语来说，一个商品或一个使用价值在不同的时间和地点进行交换时，其交换价值是一个随机变量，但这个随机变量有一个确定的，并非偶然的和纯粹相对的期望值，这个期望值就是商品固有的，内在的交换价值。\n\n* 现代庸俗经济学用供求关系和效用来解释交换价值的形成。实际上供求关系和效用只能解释交换价值的随机部分，而不能解释交换价值内在的期望值。按现代庸俗经济学的解释，之所以1夸特小麦=a吨铁，是因为这两者带给交易者的边际效用是相同的。由于边际效用纯属个人的主观感受，因此，如果市场上都按上式进行交易，那就意味着所有的交易者的主观感受完全一致，用概率论的术语说，既然每个人的主观感觉是无限的或是可以无限细分的，因此，发生这种情况的概率为零，即它是几乎不可能的。于是，如果我们观察到某个市场上的交易都在或大多数都在按同一等式进行交换时，效用论要么破产，要么需要假定存在一个不以个人意志为转移的效用期望值，而分析这个期望值是如何存在的，就不得不回到劳动价值学说。\n\n* 商品的交换价值是由外部的别的东西来度量的，而商品的价值则是它本身单纯凝结的人类劳动，后文说明它是由所凝固的劳动时间来度量的。这两个价值的度量单位是不同的。这种不同决定了，在一定的条件下，尤其是资本主义条件下，商品的交换价值与商品的价值是相背离的。\n\n* 劳动与生产资料共同创造财富。社会主义并不反对资本，(资本分为预付来购买生产资料的不变资本和预付来购买劳动的可变资本。但由于现在资本家往往正如马克思在《资本论》中将要指出的那样，并不预购劳动，而是让工人先提供(预付)劳动，再从工人劳动创造的价值中，取出一部分来作为报酬支付给工人。即，资本家往往只需预付不变资本(单个资本家可以贷款或赊欠来一部分不变资本，但这些资本还是来自于资本家，货币资本家)，通过赊欠可变资本，进行生产。所以这里将代表生产资料的不变资本，简称为资本。)而是反对资本与劳动的人为脱节，反对有人通过垄断资本而不劳而获、骄奢淫逸；反对有劳动能力的劳动者为了获得与资本相结合的机会而被迫过着辛劳而悲惨的生活。\n\n* 有人认为，工人的工资是固定的，资本家的利润是不固定的。所以，资本家承担了生产经营过程中的风险，而工人不承担风险，所以资本家应当获得与其所承担的风险相应的剥削收入。但是，一方面，资本家的所得大大超过他所承担的风险；另一方面，工人的劳动是预付的，同样存在风险。被拖欠和无端克扣工资的事经常发生，而且拖欠的工资即使发还也往往是不付利息的。至于最后工资完全泡汤的事也不是没有发生过，部分泡汤的就更多。即使有工资，有时还不够用来治疗职业病。而且资本家的风险是他自己造成的，由他自己负责；而工人的风险则是由资本家造成的，资本家反而应当因此对工人进行补偿。\n\n  ","slug":"Capital","published":1,"updated":"2020-08-11T06:47:10.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxfbw0000dbufhadgdxt2","content":"<h1 id=\"2020-08-09\"><a href=\"#2020-08-09\" class=\"headerlink\" title=\"2020-08-09\"></a>2020-08-09</h1><h4 id=\"商品-第一卷第一章\"><a href=\"#商品-第一卷第一章\" class=\"headerlink\" title=\"商品 第一卷第一章\"></a>商品 第一卷第一章</h4><ul>\n<li><p>商品的两个因素: 使用价值和价值</p>\n</li>\n<li><p>物的有用性成为使用价值。服务是具有使用价值的。</p>\n</li>\n<li><p>由于使用价值才是构成一个社会的财富的物质内容，因此，股票市场的涨跌并不代表一个社会的财富的增加或减少</p>\n</li>\n<li><p>交换价值首先表现为一种使用价值同另一种使用价值相交换的量的关系或比例。</p>\n</li>\n<li><p>由于交换是一个私人劳动向社会劳动的转变过程，这个过程中存在一定的随机性，因此交换价值具有一定的偶然性。但这种偶然性中包含必然性。用马克思身后才发展起来的概率论的术语来说，一个商品或一个使用价值在不同的时间和地点进行交换时，其交换价值是一个随机变量，但这个随机变量有一个确定的，并非偶然的和纯粹相对的期望值，这个期望值就是商品固有的，内在的交换价值。</p>\n</li>\n<li><p>现代庸俗经济学用供求关系和效用来解释交换价值的形成。实际上供求关系和效用只能解释交换价值的随机部分，而不能解释交换价值内在的期望值。按现代庸俗经济学的解释，之所以1夸特小麦=a吨铁，是因为这两者带给交易者的边际效用是相同的。由于边际效用纯属个人的主观感受，因此，如果市场上都按上式进行交易，那就意味着所有的交易者的主观感受完全一致，用概率论的术语说，既然每个人的主观感觉是无限的或是可以无限细分的，因此，发生这种情况的概率为零，即它是几乎不可能的。于是，如果我们观察到某个市场上的交易都在或大多数都在按同一等式进行交换时，效用论要么破产，要么需要假定存在一个不以个人意志为转移的效用期望值，而分析这个期望值是如何存在的，就不得不回到劳动价值学说。</p>\n</li>\n<li><p>商品的交换价值是由外部的别的东西来度量的，而商品的价值则是它本身单纯凝结的人类劳动，后文说明它是由所凝固的劳动时间来度量的。这两个价值的度量单位是不同的。这种不同决定了，在一定的条件下，尤其是资本主义条件下，商品的交换价值与商品的价值是相背离的。</p>\n</li>\n<li><p>劳动与生产资料共同创造财富。社会主义并不反对资本，(资本分为预付来购买生产资料的不变资本和预付来购买劳动的可变资本。但由于现在资本家往往正如马克思在《资本论》中将要指出的那样，并不预购劳动，而是让工人先提供(预付)劳动，再从工人劳动创造的价值中，取出一部分来作为报酬支付给工人。即，资本家往往只需预付不变资本(单个资本家可以贷款或赊欠来一部分不变资本，但这些资本还是来自于资本家，货币资本家)，通过赊欠可变资本，进行生产。所以这里将代表生产资料的不变资本，简称为资本。)而是反对资本与劳动的人为脱节，反对有人通过垄断资本而不劳而获、骄奢淫逸；反对有劳动能力的劳动者为了获得与资本相结合的机会而被迫过着辛劳而悲惨的生活。</p>\n</li>\n<li><p>有人认为，工人的工资是固定的，资本家的利润是不固定的。所以，资本家承担了生产经营过程中的风险，而工人不承担风险，所以资本家应当获得与其所承担的风险相应的剥削收入。但是，一方面，资本家的所得大大超过他所承担的风险；另一方面，工人的劳动是预付的，同样存在风险。被拖欠和无端克扣工资的事经常发生，而且拖欠的工资即使发还也往往是不付利息的。至于最后工资完全泡汤的事也不是没有发生过，部分泡汤的就更多。即使有工资，有时还不够用来治疗职业病。而且资本家的风险是他自己造成的，由他自己负责；而工人的风险则是由资本家造成的，资本家反而应当因此对工人进行补偿。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"2020-08-09\"><a href=\"#2020-08-09\" class=\"headerlink\" title=\"2020-08-09\"></a>2020-08-09</h1><h4 id=\"商品-第一卷第一章\"><a href=\"#商品-第一卷第一章\" class=\"headerlink\" title=\"商品 第一卷第一章\"></a>商品 第一卷第一章</h4><ul>\n<li><p>商品的两个因素: 使用价值和价值</p>\n</li>\n<li><p>物的有用性成为使用价值。服务是具有使用价值的。</p>\n</li>\n<li><p>由于使用价值才是构成一个社会的财富的物质内容，因此，股票市场的涨跌并不代表一个社会的财富的增加或减少</p>\n</li>\n<li><p>交换价值首先表现为一种使用价值同另一种使用价值相交换的量的关系或比例。</p>\n</li>\n<li><p>由于交换是一个私人劳动向社会劳动的转变过程，这个过程中存在一定的随机性，因此交换价值具有一定的偶然性。但这种偶然性中包含必然性。用马克思身后才发展起来的概率论的术语来说，一个商品或一个使用价值在不同的时间和地点进行交换时，其交换价值是一个随机变量，但这个随机变量有一个确定的，并非偶然的和纯粹相对的期望值，这个期望值就是商品固有的，内在的交换价值。</p>\n</li>\n<li><p>现代庸俗经济学用供求关系和效用来解释交换价值的形成。实际上供求关系和效用只能解释交换价值的随机部分，而不能解释交换价值内在的期望值。按现代庸俗经济学的解释，之所以1夸特小麦=a吨铁，是因为这两者带给交易者的边际效用是相同的。由于边际效用纯属个人的主观感受，因此，如果市场上都按上式进行交易，那就意味着所有的交易者的主观感受完全一致，用概率论的术语说，既然每个人的主观感觉是无限的或是可以无限细分的，因此，发生这种情况的概率为零，即它是几乎不可能的。于是，如果我们观察到某个市场上的交易都在或大多数都在按同一等式进行交换时，效用论要么破产，要么需要假定存在一个不以个人意志为转移的效用期望值，而分析这个期望值是如何存在的，就不得不回到劳动价值学说。</p>\n</li>\n<li><p>商品的交换价值是由外部的别的东西来度量的，而商品的价值则是它本身单纯凝结的人类劳动，后文说明它是由所凝固的劳动时间来度量的。这两个价值的度量单位是不同的。这种不同决定了，在一定的条件下，尤其是资本主义条件下，商品的交换价值与商品的价值是相背离的。</p>\n</li>\n<li><p>劳动与生产资料共同创造财富。社会主义并不反对资本，(资本分为预付来购买生产资料的不变资本和预付来购买劳动的可变资本。但由于现在资本家往往正如马克思在《资本论》中将要指出的那样，并不预购劳动，而是让工人先提供(预付)劳动，再从工人劳动创造的价值中，取出一部分来作为报酬支付给工人。即，资本家往往只需预付不变资本(单个资本家可以贷款或赊欠来一部分不变资本，但这些资本还是来自于资本家，货币资本家)，通过赊欠可变资本，进行生产。所以这里将代表生产资料的不变资本，简称为资本。)而是反对资本与劳动的人为脱节，反对有人通过垄断资本而不劳而获、骄奢淫逸；反对有劳动能力的劳动者为了获得与资本相结合的机会而被迫过着辛劳而悲惨的生活。</p>\n</li>\n<li><p>有人认为，工人的工资是固定的，资本家的利润是不固定的。所以，资本家承担了生产经营过程中的风险，而工人不承担风险，所以资本家应当获得与其所承担的风险相应的剥削收入。但是，一方面，资本家的所得大大超过他所承担的风险；另一方面，工人的劳动是预付的，同样存在风险。被拖欠和无端克扣工资的事经常发生，而且拖欠的工资即使发还也往往是不付利息的。至于最后工资完全泡汤的事也不是没有发生过，部分泡汤的就更多。即使有工资，有时还不够用来治疗职业病。而且资本家的风险是他自己造成的，由他自己负责；而工人的风险则是由资本家造成的，资本家反而应当因此对工人进行补偿。</p>\n</li>\n</ul>\n"},{"title":"Decorator","date":"2020-08-07T06:15:57.000Z","index_img":"/img/image-20200807160507597.png","_content":"\n## Decorator属于\"单一职责\"模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge\n\n## 动机\n\n在某些情况下我们可能会\"过度地使用继承来扩展对象的功能\"， 由于继承为类型引入的**静态特质**，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。\n\n如何使\"对象功能的扩展\"能够根据需要来动态地实现？同时避免\"扩展功能的增多\"带来的子类膨胀问题？从而使得任何\"功能扩展变化\"所导致的影响将为最低？\n\n所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream->Read(), 支持多态，可以产生变化。\n\n\n\n## 模式定义\n\n动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 & 减少子类个数）。\n\n\n\n## 代码示例\n\n下面给出一个Stream代码示例，其继承关系如下所示\n\n<img src=\"image-20200807143722316.png\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n```cpp\n//业务操作\nclass Stream {\npublic:\n    virtual char Read(int number) = 0;\n    virtual void Seek(int position) = 0;\n    virtual void Write(char data) = 0;\n    \n    virtual ~Stream() {}\n};\n\n//主体类\nclass FileStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读文件流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位文件流\n    }\n    \n    virtual void Write(char data) {\n        //写文件流\n    }\n};\n\nclass NetworkStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读网络流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位网络流\n    }\n    \n    virtual void Write(char data) {\n        //写网络流\n    }\n};\n\nclass MemoryStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读内存流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位内存流\n    }\n    \n    virtual void Write(char data) {\n        //写内存流\n    }\n};\n\n//扩展操作\nclass CryptoFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        FileStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        FileStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        FileStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream: public NetworkStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        NetworkStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        NetworkStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        NetworkStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream: public MemoryStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        MemoryStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        MemoryStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        MemoryStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedFileStream: public FileStream {\n    //...\n};\n\nclass BufferedNetworkStream: public NetworkStream {\n    //...\n};\n\nclass BufferedMemoryStream: public MemoryStream {\n    //...\n};\n\nclass CryptoBufferedFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Read(number);//读文件流\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Seek(position);//定位文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n    \n    virtual void Write(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Write(position);//写文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n};\n\nvoid Process() {\n    //编译时装配\n    CryptoFileStream* fs1 = new CryptoFileStream();\n    \n    BufferedFileStream* fs2 = new BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = new CryptoBufferedFileStream();\n}\n```\n\n这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。\n\n\n\n* 重构\n\n```cpp\n//扩展操作\nclass CryptoFileStream {\n    FileStream* stream;//=new FileStream()\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream {\n    NetworkStream* stream;\t//=new NetworkStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream {\n    MemoryStream* stream;\t//=new MemoryStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n```\n\n* 继续重构\n\n```cpp\n//扩展操作\nclass CryptoStream: public Stream {\n    Stream* stream;//...\npublic:\n    CryptoStream(Stream* stm): stream(stm) {\n        \n    }\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public Stream {\n    Stream* stream; //...\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范\n\n\n\n* 继续重构\n\nCryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，\n\n设置一个DecoratorStream中间类\n\n```cpp\n//扩展操作\nclass DecoratorStream: public Stream {\nprotected:\n    Stream* stream; //...\n    DecoratorStream(Stream* stm): DecoratorStream(stm) {\n        \n    }\n}\nclass CryptoStream: public DecoratorStream {\npublic:\n    CryptoStream(Stream* stm): DecoratorStream(stm) {}\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public DecoratorStream {\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n新的类关系\n\n<img src=\"image-20200807143823919.png\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n## 结构\n\n<img src=\"image-20200807160507597.png\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* 通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的\"灵活性差\"和\"多子类衍生问题\"。\n\n* Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。\n\n* Decorator模式的目的并非解决\"多子类衍生的多继承\"问题，Decorator模式应用的要点在于解决\"主体类在多个方向上的扩展 功能\"——是为\"装饰\"的含义。","source":"_posts/DesignPatterns/Decorator.md","raw":"---\ntitle: Decorator\ndate: 2020-08-07 14:15:57\nindex_img: /img/image-20200807160507597.png\ntags: Design Patterns\ncategories: Design Patterns\n\n---\n\n## Decorator属于\"单一职责\"模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge\n\n## 动机\n\n在某些情况下我们可能会\"过度地使用继承来扩展对象的功能\"， 由于继承为类型引入的**静态特质**，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。\n\n如何使\"对象功能的扩展\"能够根据需要来动态地实现？同时避免\"扩展功能的增多\"带来的子类膨胀问题？从而使得任何\"功能扩展变化\"所导致的影响将为最低？\n\n所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream->Read(), 支持多态，可以产生变化。\n\n\n\n## 模式定义\n\n动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 & 减少子类个数）。\n\n\n\n## 代码示例\n\n下面给出一个Stream代码示例，其继承关系如下所示\n\n<img src=\"image-20200807143722316.png\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" />\n\n```cpp\n//业务操作\nclass Stream {\npublic:\n    virtual char Read(int number) = 0;\n    virtual void Seek(int position) = 0;\n    virtual void Write(char data) = 0;\n    \n    virtual ~Stream() {}\n};\n\n//主体类\nclass FileStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读文件流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位文件流\n    }\n    \n    virtual void Write(char data) {\n        //写文件流\n    }\n};\n\nclass NetworkStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读网络流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位网络流\n    }\n    \n    virtual void Write(char data) {\n        //写网络流\n    }\n};\n\nclass MemoryStream: public Stream {\npublic:\n    virtual char Read(int number) {\n        //读内存流\n\t}\n    \n    virtual void Seek(int position) {\n        //定位内存流\n    }\n    \n    virtual void Write(char data) {\n        //写内存流\n    }\n};\n\n//扩展操作\nclass CryptoFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        FileStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        FileStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        FileStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream: public NetworkStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        NetworkStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        NetworkStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        NetworkStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream: public MemoryStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        MemoryStream::Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        MemoryStream::Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        MemoryStream::Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedFileStream: public FileStream {\n    //...\n};\n\nclass BufferedNetworkStream: public NetworkStream {\n    //...\n};\n\nclass BufferedMemoryStream: public MemoryStream {\n    //...\n};\n\nclass CryptoBufferedFileStream: public FileStream {\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Read(number);//读文件流\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Seek(position);//定位文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n    \n    virtual void Write(int position) {\n        //额外的加密操作...\n        //额外的缓冲操作...\n        FileStream::Write(position);//写文件流\n        //额外的加密操作...\n        //额外的缓冲操作...\n    }\n};\n\nvoid Process() {\n    //编译时装配\n    CryptoFileStream* fs1 = new CryptoFileStream();\n    \n    BufferedFileStream* fs2 = new BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = new CryptoBufferedFileStream();\n}\n```\n\n这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。\n\n\n\n* 重构\n\n```cpp\n//扩展操作\nclass CryptoFileStream {\n    FileStream* stream;//=new FileStream()\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoNetworkStream {\n    NetworkStream* stream;\t//=new NetworkStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass CryptoMemoryStream {\n    MemoryStream* stream;\t//=new MemoryStream();\npublic:\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n```\n\n* 继续重构\n\n```cpp\n//扩展操作\nclass CryptoStream: public Stream {\n    Stream* stream;//...\npublic:\n    CryptoStream(Stream* stm): stream(stm) {\n        \n    }\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public Stream {\n    Stream* stream; //...\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范\n\n\n\n* 继续重构\n\nCryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，\n\n设置一个DecoratorStream中间类\n\n```cpp\n//扩展操作\nclass DecoratorStream: public Stream {\nprotected:\n    Stream* stream; //...\n    DecoratorStream(Stream* stm): DecoratorStream(stm) {\n        \n    }\n}\nclass CryptoStream: public DecoratorStream {\npublic:\n    CryptoStream(Stream* stm): DecoratorStream(stm) {}\n    virtual char Read(int number) {\n        //额外的加密操作...\n        stream->Read(number);\n    }\n    \n    virtual void Seek(int position) {\n        //额外的加密操作...\n        stream->Seek(position);\n        //额外的加密操作\n    }\n    \n    virtual void Write(byte data) {\n        //额外的加密操作...\n        stream->Write(data);\n        //额外的加密操作...\n    }\n};\n\nclass BufferedStream: public DecoratorStream {\n    //...\n};\n\nvoid Process() {\n    //运行时装配\n    FileStream* s1 = new FileStream();\n    CryptoStream* s2 = new CryptoStream(s1);\n    BufferedStream* s3 = new BufferedStream(s1);\n    BufferedStream* s4 = new BufferedStream(s2);\n}\n```\n\n新的类关系\n\n<img src=\"image-20200807143823919.png\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" />\n\n\n\n## 结构\n\n<img src=\"image-20200807160507597.png\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* 通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的\"灵活性差\"和\"多子类衍生问题\"。\n\n* Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。\n\n* Decorator模式的目的并非解决\"多子类衍生的多继承\"问题，Decorator模式应用的要点在于解决\"主体类在多个方向上的扩展 功能\"——是为\"装饰\"的含义。","slug":"DesignPatterns/Decorator","published":1,"updated":"2020-08-11T07:05:53.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxffb000hdbufe88igkf2","content":"<h2 id=\"Decorator属于”单一职责”模式\"><a href=\"#Decorator属于”单一职责”模式\" class=\"headerlink\" title=\"Decorator属于”单一职责”模式\"></a>Decorator属于”单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在某些情况下我们可能会”过度地使用继承来扩展对象的功能”， 由于继承为类型引入的<strong>静态特质</strong>，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p>\n<p>如何使”对象功能的扩展”能够根据需要来动态地实现？同时避免”扩展功能的增多”带来的子类膨胀问题？从而使得任何”功能扩展变化”所导致的影响将为最低？</p>\n<p>所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream-&gt;Read(), 支持多态，可以产生变化。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>下面给出一个Stream代码示例，其继承关系如下所示</p>\n<p><img src=\"image-20200807143722316.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" /></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//业务操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stream</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Stream() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-comment\">//主体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读文件流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写文件流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读网络流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位网络流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写网络流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读内存流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位内存流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写内存流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoBufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Read(number);<span class=\"hljs-comment\">//读文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Seek(position);<span class=\"hljs-comment\">//定位文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Write(position);<span class=\"hljs-comment\">//写文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//编译时装配</span>\n    CryptoFileStream* fs1 = <span class=\"hljs-keyword\">new</span> CryptoFileStream();\n    \n    BufferedFileStream* fs2 = <span class=\"hljs-keyword\">new</span> BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = <span class=\"hljs-keyword\">new</span> CryptoBufferedFileStream();\n&#125;</code></pre></div>\n<p>这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。</p>\n<ul>\n<li>重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span> &#123;</span>\n    FileStream* stream;<span class=\"hljs-comment\">//=new FileStream()</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span> &#123;</span>\n    NetworkStream* stream;\t<span class=\"hljs-comment\">//=new NetworkStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span> &#123;</span>\n    MemoryStream* stream;\t<span class=\"hljs-comment\">//=new MemoryStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;</code></pre></div>\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream;<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): stream(stm) &#123;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n<p>很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>CryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，</p>\n<p>设置一个DecoratorStream中间类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    DecoratorStream(Stream* stm): DecoratorStream(stm) &#123;\n        \n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): DecoratorStream(stm) &#123;&#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n<p>新的类关系</p>\n<p><img src=\"image-20200807143823919.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" /></p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200807160507597.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的”灵活性差”和”多子类衍生问题”。</p>\n</li>\n<li><p>Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。</p>\n</li>\n<li><p>Decorator模式的目的并非解决”多子类衍生的多继承”问题，Decorator模式应用的要点在于解决”主体类在多个方向上的扩展 功能”——是为”装饰”的含义。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"Decorator属于”单一职责”模式\"><a href=\"#Decorator属于”单一职责”模式\" class=\"headerlink\" title=\"Decorator属于”单一职责”模式\"></a>Decorator属于”单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在某些情况下我们可能会”过度地使用继承来扩展对象的功能”， 由于继承为类型引入的<strong>静态特质</strong>，使得这种扩展方式缺乏灵活性； 并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p>\n<p>如何使”对象功能的扩展”能够根据需要来动态地实现？同时避免”扩展功能的增多”带来的子类膨胀问题？从而使得任何”功能扩展变化”所导致的影响将为最低？</p>\n<p>所谓静态特质, 比如在CryptoNetworkStream的Read函数中定死了调用NetworkStream::Read(), 而我们重构后的CryptoStream中的Read函数调用stream-&gt;Read(), 支持多态，可以产生变化。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>下面给出一个Stream代码示例，其继承关系如下所示</p>\n<p><img src=\"image-20200807143722316.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143722316\" style=\"zoom:30%;\" /></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//业务操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stream</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Stream() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-comment\">//主体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读文件流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写文件流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读网络流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位网络流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写网络流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//读内存流</span>\n\t&#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//定位内存流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//写内存流</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        FileStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        NetworkStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        MemoryStream::Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedNetworkStream</span>:</span> <span class=\"hljs-keyword\">public</span> NetworkStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedMemoryStream</span>:</span> <span class=\"hljs-keyword\">public</span> MemoryStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoBufferedFileStream</span>:</span> <span class=\"hljs-keyword\">public</span> FileStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Read(number);<span class=\"hljs-comment\">//读文件流</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Seek(position);<span class=\"hljs-comment\">//定位文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n        FileStream::Write(position);<span class=\"hljs-comment\">//写文件流</span>\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        <span class=\"hljs-comment\">//额外的缓冲操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//编译时装配</span>\n    CryptoFileStream* fs1 = <span class=\"hljs-keyword\">new</span> CryptoFileStream();\n    \n    BufferedFileStream* fs2 = <span class=\"hljs-keyword\">new</span> BufferedFileStream();\n    \n    CryptoBufferedFileStream* fs3 = <span class=\"hljs-keyword\">new</span> CryptoBufferedFileStream();\n&#125;</code></pre></div>\n<p>这样设计的代码存在大量的冗余，比如对于不同的stream, 无论是FileStream还是NetworkStream还是MemoryStream, 他们的加密操作都是一样的。</p>\n<ul>\n<li>重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoFileStream</span> &#123;</span>\n    FileStream* stream;<span class=\"hljs-comment\">//=new FileStream()</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoNetworkStream</span> &#123;</span>\n    NetworkStream* stream;\t<span class=\"hljs-comment\">//=new NetworkStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoMemoryStream</span> &#123;</span>\n    MemoryStream* stream;\t<span class=\"hljs-comment\">//=new MemoryStream();</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;</code></pre></div>\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream;<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): stream(stm) &#123;\n        \n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n<p>很神奇，CryptoStream既有Stream基类，也有Stream字段。这里还需要继承Stream是因为他定义了基类的接口规范</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>CryptoStream, BufferedStream都有Stream这个字段，把他们提到一个中间类中，</p>\n<p>设置一个DecoratorStream中间类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//扩展操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorStream</span>:</span> <span class=\"hljs-keyword\">public</span> Stream &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    Stream* stream; <span class=\"hljs-comment\">//...</span>\n    DecoratorStream(Stream* stm): DecoratorStream(stm) &#123;\n        \n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CryptoStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n<span class=\"hljs-keyword\">public</span>:\n    CryptoStream(Stream* stm): DecoratorStream(stm) &#123;&#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">char</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> number)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Read(number);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Seek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Seek(position);\n        <span class=\"hljs-comment\">//额外的加密操作</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Write</span><span class=\"hljs-params\">(byte data)</span> </span>&#123;\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n        stream-&gt;Write(data);\n        <span class=\"hljs-comment\">//额外的加密操作...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BufferedStream</span>:</span> <span class=\"hljs-keyword\">public</span> DecoratorStream &#123;\n    <span class=\"hljs-comment\">//...</span>\n&#125;;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Process</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-comment\">//运行时装配</span>\n    FileStream* s1 = <span class=\"hljs-keyword\">new</span> FileStream();\n    CryptoStream* s2 = <span class=\"hljs-keyword\">new</span> CryptoStream(s1);\n    BufferedStream* s3 = <span class=\"hljs-keyword\">new</span> BufferedStream(s1);\n    BufferedStream* s4 = <span class=\"hljs-keyword\">new</span> BufferedStream(s2);\n&#125;</code></pre></div>\n<p>新的类关系</p>\n<p><img src=\"image-20200807143823919.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807143823919\" style=\"zoom:30%;\" /></p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200807160507597.png\" srcset=\"/img/loading.gif\" alt=\"image-20200807160507597\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免 了使用继承带来的”灵活性差”和”多子类衍生问题”。</p>\n</li>\n<li><p>Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又 表现为has-a Component的组合关系，即Decorator类又使用了 另外一个Component类。</p>\n</li>\n<li><p>Decorator模式的目的并非解决”多子类衍生的多继承”问题，Decorator模式应用的要点在于解决”主体类在多个方向上的扩展 功能”——是为”装饰”的含义。</p>\n</li>\n</ul>\n"},{"title":"Observer 观察者模式","date":"2020-08-06T06:22:25.000Z","index_img":"/img/image-20200806160700160.png","_content":"\n\n\n## 动机\n\n在软件构建过程中，我们需要为某些对象建立一种\"通知依赖关系\" \n\n<u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。\n\n使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。\n\n\n\n## 模式定义\n\n定义对象间的一种<u>***一对多***</u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u>***自动更新***</u>。\n\n\n\n## 代码示例\n\n考虑一个文件分割器程序，将一个大文件分割成几个小文件。\n\n我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割\n\n代码如下\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n        }\n    }\n}\n```\n\n\n\n#### 需求1：文件分割进度条\n\n* 第一种实现方式\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n/***增加progress bar***/\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n/***增加progres bar***/\n    ProgressBar* m_progressBar;\npublic:\n/***增加初始化参数***/\n    FileSplitter(const strign& filePath, int fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n/***更新progress bar***/\n            if(m_progressBar != NULL) {\n                m_progressBar->setValue((i + 1) / m_fileNumber);\n            }\n        }\n    }\n}\n```\n\n{% note warning%}\n\n但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。\n\n{% endnote %}\n\n\n\n* 第二种实现方式\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            if(m_iprogress != NULL) {\n                float progressValue = m_fileNumber;\n                progressValue = (i + 1) / progressValue;\n                m_iprogress->DoProgress(progressValue); //更新进度条\n            }\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n```\n\nC++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况\n\n* 再修改一下\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        if(m_iprogress != NULL) {\n\t        m_iprogress->DoProgress(value);\t//更新进度条\n        }\n    }\n}\n```\n\n\n\n\n\n#### 需求2: 多观察者\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    List<IProgress*> m_iprogressList; //抽象通知机制, 支持多个观察者\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void addIProgress(IProgress* iprogress) {\n        m_iprogressList.add(iprogress);\n    }\n    \n    void removeIProgress(IProgress* iprogress) {\n        m_iprogressList.remove(iprogress);\n    }\n    \n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        List<IProgress*>::iterator it = m_iprogressList.begin();\n        \n\t\twhile(it != m_iprogressList.end()) {\n            (*it)->DoProgress(value);\n            it++;\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        ConsoleNotifier cn;\n        FileSplitter splitter(filePath, number);\n        \n        splitter.addIprogress(this);\n        splitter.addIprogress(&cn);\n        \n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n\nclass ConsoleNotifier: public IProgress {\npublic:\n    virtual void DoProgress(float value) {\n        cout << \".\";\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200806160700160.png\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n## 总结\n\n* 使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 \n\n* 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。\n\n* 观察者自己决定是否需要订阅通知，目标对象对此一无所知。 \n* Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。","source":"_posts/DesignPatterns/Observer.md","raw":"---\ntitle: Observer 观察者模式\ndate: 2020-08-06 14:22:25\nindex_img: /img/image-20200806160700160.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n\n\n## 动机\n\n在软件构建过程中，我们需要为某些对象建立一种\"通知依赖关系\" \n\n<u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。\n\n使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。\n\n\n\n## 模式定义\n\n定义对象间的一种<u>***一对多***</u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u>***自动更新***</u>。\n\n\n\n## 代码示例\n\n考虑一个文件分割器程序，将一个大文件分割成几个小文件。\n\n我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割\n\n代码如下\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n        }\n    }\n}\n```\n\n\n\n#### 需求1：文件分割进度条\n\n* 第一种实现方式\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n/***增加progress bar***/\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n}\n```\n\n\n\n```cpp\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n/***增加progres bar***/\n    ProgressBar* m_progressBar;\npublic:\n/***增加初始化参数***/\n    FileSplitter(const strign& filePath, int fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n/***更新progress bar***/\n            if(m_progressBar != NULL) {\n                m_progressBar->setValue((i + 1) / m_fileNumber);\n            }\n        }\n    }\n}\n```\n\n{% note warning%}\n\n但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。\n\n{% endnote %}\n\n\n\n* 第二种实现方式\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            if(m_iprogress != NULL) {\n                float progressValue = m_fileNumber;\n                progressValue = (i + 1) / progressValue;\n                m_iprogress->DoProgress(progressValue); //更新进度条\n            }\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        FileSplitter splitter(filePath, number);\n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n```\n\nC++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况\n\n* 再修改一下\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    //ProgressBar* m_progressBar; 这是一个通知控件\n    IProgress* m_iprogress; //抽象通知机制\npublic:\n    FileSplitter(const strign& filePath, int fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress){\n            \n    }\n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        if(m_iprogress != NULL) {\n\t        m_iprogress->DoProgress(value);\t//更新进度条\n        }\n    }\n}\n```\n\n\n\n\n\n#### 需求2: 多观察者\n\n```cpp\nclass IProgress {\npublic:\n    virtual void DoProgresss(float value) = 0;\n    virtual ~IProgress() {}\n}\nclass FileSplitter {\n    string m_filePath;\n    int m_fileNumber;\n    List<IProgress*> m_iprogressList; //抽象通知机制, 支持多个观察者\npublic:\n    FileSplitter(const strign& filePath, int fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) {\n            \n    }\n    \n    void addIProgress(IProgress* iprogress) {\n        m_iprogressList.add(iprogress);\n    }\n    \n    void removeIProgress(IProgress* iprogress) {\n        m_iprogressList.remove(iprogress);\n    }\n    \n    \n    void split() {\n        //1. 读取大文件\n        \n        //2. 分批次向小文件中写入\n        for(int i = 0; i < m_fileNumber; i++) {\n            //...\n\t\t\t\n            float progressValue = m_fileNumber;\n            progressValue = (i + 1) / progressValue;\n            onProgress(progressValue);\n        }\n    }\nprotected:\n    void onProgress(float value) {\n        List<IProgress*>::iterator it = m_iprogressList.begin();\n        \n\t\twhile(it != m_iprogressList.end()) {\n            (*it)->DoProgress(value);\n            it++;\n        }\n    }\n}\n```\n\n```cpp\nclass MainForm: public Form, public IProgress{\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\npublic:\n    void Button1_Click() {\n        string filePath = txtFilePath->getText();\n        int number = atoi(txtFileNumber->getText().c_str());\n        \n        ConsoleNotifier cn;\n        FileSplitter splitter(filePath, number);\n        \n        splitter.addIprogress(this);\n        splitter.addIprogress(&cn);\n        \n        splitter.split();\n    }\n    \n    virtual void DoProgress(float value) {\n        progressBar->setValue(value);\n    }\n}\n\nclass ConsoleNotifier: public IProgress {\npublic:\n    virtual void DoProgress(float value) {\n        cout << \".\";\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200806160700160.png\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" />\n\n\n\n## 总结\n\n* 使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 \n\n* 目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。\n\n* 观察者自己决定是否需要订阅通知，目标对象对此一无所知。 \n* Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。","slug":"DesignPatterns/Observer","published":1,"updated":"2020-08-06T08:29:54.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxffd000idbuf7cwmcftl","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，我们需要为某些对象建立一种”通知依赖关系” </p>\n<p><u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。</p>\n<p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义对象间的一种<u><strong><em>一对多</em></strong></u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u><strong><em>自动更新</em></strong></u>。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一个文件分割器程序，将一个大文件分割成几个小文件。</p>\n<p>我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割</p>\n<p>代码如下</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<h4 id=\"需求1：文件分割进度条\"><a href=\"#需求1：文件分割进度条\" class=\"headerlink\" title=\"需求1：文件分割进度条\"></a>需求1：文件分割进度条</h4><ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-comment\">/***增加progress bar***/</span>\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-comment\">/***增加progres bar***/</span>\n    ProgressBar* m_progressBar;\n<span class=\"hljs-keyword\">public</span>:\n<span class=\"hljs-comment\">/***增加初始化参数***/</span>\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-comment\">/***更新progress bar***/</span>\n            <span class=\"hljs-keyword\">if</span>(m_progressBar != <span class=\"hljs-literal\">NULL</span>) &#123;\n                m_progressBar-&gt;setValue((i + <span class=\"hljs-number\">1</span>) / m_fileNumber);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"note note-warning\">\n            <p>但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。</p>\n          </div>\n<ul>\n<li>第二种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n                <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n                progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n                m_iprogress-&gt;DoProgress(progressValue); <span class=\"hljs-comment\">//更新进度条</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;</code></pre></div>\n<p>C++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况</p>\n<ul>\n<li>再修改一下</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n\t        m_iprogress-&gt;DoProgress(value);\t<span class=\"hljs-comment\">//更新进度条</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<h4 id=\"需求2-多观察者\"><a href=\"#需求2-多观察者\" class=\"headerlink\" title=\"需求2: 多观察者\"></a>需求2: 多观察者</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    List&lt;IProgress*&gt; m_iprogressList; <span class=\"hljs-comment\">//抽象通知机制, 支持多个观察者</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.add(iprogress);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.remove(iprogress);\n    &#125;\n    \n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        List&lt;IProgress*&gt;::iterator it = m_iprogressList.begin();\n        \n\t\t<span class=\"hljs-keyword\">while</span>(it != m_iprogressList.end()) &#123;\n            (*it)-&gt;DoProgress(value);\n            it++;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        ConsoleNotifier cn;\n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        \n        splitter.addIprogress(<span class=\"hljs-keyword\">this</span>);\n        splitter.addIprogress(&amp;cn);\n        \n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsoleNotifier</span>:</span> <span class=\"hljs-keyword\">public</span> IProgress &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\".\"</span>;\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200806160700160.png\" srcset=\"/img/loading.gif\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 </p>\n</li>\n<li><p>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</p>\n</li>\n<li><p>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </p>\n</li>\n<li>Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，我们需要为某些对象建立一种”通知依赖关系” </p>\n<p><u>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密， 将使软件不能很好地抵御变化</u>。</p>\n<p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义对象间的一种<u><strong><em>一对多</em></strong></u>（变化）的依赖关系，以便当一个 对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并<u><strong><em>自动更新</em></strong></u>。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一个文件分割器程序，将一个大文件分割成几个小文件。</p>\n<p>我们有一个主界面MainForm (在这里是一个观察者), 里面有两个对象，一个是文件路径，一个是分割成的文件都个数。当button click时就会调用filesplitter将文件分割</p>\n<p>代码如下</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<h4 id=\"需求1：文件分割进度条\"><a href=\"#需求1：文件分割进度条\" class=\"headerlink\" title=\"需求1：文件分割进度条\"></a>需求1：文件分割进度条</h4><ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n<span class=\"hljs-comment\">/***增加progress bar***/</span>\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n<span class=\"hljs-comment\">/***增加progres bar***/</span>\n    ProgressBar* m_progressBar;\n<span class=\"hljs-keyword\">public</span>:\n<span class=\"hljs-comment\">/***增加初始化参数***/</span>\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, ProgressBar* progressBar):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_progressBar(progressBar)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-comment\">/***更新progress bar***/</span>\n            <span class=\"hljs-keyword\">if</span>(m_progressBar != <span class=\"hljs-literal\">NULL</span>) &#123;\n                m_progressBar-&gt;setValue((i + <span class=\"hljs-number\">1</span>) / m_fileNumber);\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"note note-warning\">\n            <p>但是这种实现方式违反了<u>依赖倒置原则</u>。FileSplitter依赖ProgressBar 这样一种具体的实现细节，但是进度条的种类和展现形式是变化的，如果我们想将进度条换一种展现形式，比如不断打点，那么就会面临需求变更的困扰。</p>\n          </div>\n<ul>\n<li>第二种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n                <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n                progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n                m_iprogress-&gt;DoProgress(progressValue); <span class=\"hljs-comment\">//更新进度条</span>\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;</code></pre></div>\n<p>C++支持多继承，但是不推荐使用多继承，因为会带来很多耦合的问题。但是有一种情况是推荐使用多继承的，一个主的继承类，其他都是接口  (单继承多实现), 这里就属于这种情况</p>\n<ul>\n<li>再修改一下</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    <span class=\"hljs-comment\">//ProgressBar* m_progressBar; 这是一个通知控件</span>\n    IProgress* m_iprogress; <span class=\"hljs-comment\">//抽象通知机制</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber, IProgress* iprogress):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) \n        m_iprogress(iprogress)&#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span>(m_iprogress != <span class=\"hljs-literal\">NULL</span>) &#123;\n\t        m_iprogress-&gt;DoProgress(value);\t<span class=\"hljs-comment\">//更新进度条</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<h4 id=\"需求2-多观察者\"><a href=\"#需求2-多观察者\" class=\"headerlink\" title=\"需求2: 多观察者\"></a>需求2: 多观察者</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IProgress</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgresss</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~IProgress() &#123;&#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSplitter</span> &#123;</span>\n    <span class=\"hljs-built_in\">string</span> m_filePath;\n    <span class=\"hljs-keyword\">int</span> m_fileNumber;\n    List&lt;IProgress*&gt; m_iprogressList; <span class=\"hljs-comment\">//抽象通知机制, 支持多个观察者</span>\n<span class=\"hljs-keyword\">public</span>:\n    FileSplitter(<span class=\"hljs-keyword\">const</span> strign&amp; filePath, <span class=\"hljs-keyword\">int</span> fileNumber):\n    \tm_filePath(filePath),\n    \tm_fileNumber(fileNumber) &#123;\n            \n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.add(iprogress);\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeIProgress</span><span class=\"hljs-params\">(IProgress* iprogress)</span> </span>&#123;\n        m_iprogressList.remove(iprogress);\n    &#125;\n    \n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//1. 读取大文件</span>\n        \n        <span class=\"hljs-comment\">//2. 分批次向小文件中写入</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m_fileNumber; i++) &#123;\n            <span class=\"hljs-comment\">//...</span>\n\t\t\t\n            <span class=\"hljs-keyword\">float</span> progressValue = m_fileNumber;\n            progressValue = (i + <span class=\"hljs-number\">1</span>) / progressValue;\n            onProgress(progressValue);\n        &#125;\n    &#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        List&lt;IProgress*&gt;::iterator it = m_iprogressList.begin();\n        \n\t\t<span class=\"hljs-keyword\">while</span>(it != m_iprogressList.end()) &#123;\n            (*it)-&gt;DoProgress(value);\n            it++;\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form, <span class=\"hljs-keyword\">public</span> IProgress&#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressbar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-built_in\">string</span> filePath = txtFilePath-&gt;getText();\n        <span class=\"hljs-keyword\">int</span> number = atoi(txtFileNumber-&gt;getText().c_str());\n        \n        ConsoleNotifier cn;\n        <span class=\"hljs-function\">FileSplitter <span class=\"hljs-title\">splitter</span><span class=\"hljs-params\">(filePath, number)</span></span>;\n        \n        splitter.addIprogress(<span class=\"hljs-keyword\">this</span>);\n        splitter.addIprogress(&amp;cn);\n        \n        splitter.split();\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        progressBar-&gt;setValue(value);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConsoleNotifier</span>:</span> <span class=\"hljs-keyword\">public</span> IProgress &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoProgress</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> value)</span> </span>&#123;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\".\"</span>;\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200806160700160.png\" srcset=\"/img/loading.gif\" alt=\"image-20200806160700160\" style=\"zoom: 50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。 </p>\n</li>\n<li><p>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</p>\n</li>\n<li><p>观察者自己决定是否需要订阅通知，目标对象对此一无所知。 </p>\n</li>\n<li>Observer模式是基于事件的UI框架中非常常用的设计模式，也是 MVC模式的一个重要组成部分。</li>\n</ul>\n"},{"title":"Strategy Method","date":"2020-08-05T07:53:57.000Z","index_img":"/img/image-20200805135526277.png","_content":"\n## 动机\n\n在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担\n\n如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？\n\n\n\n## Strategy Method定义\n\n定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。\n\n\n\n## 代码示例\n\n考虑一下计算税的例子\n\n* 第一种实现方式\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        //***\n    }\n}\n```\n\n有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在`TaxBase`中中增加一个`FR_Tax`, 还需要在`SalesOrder`中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    /***加入France***/\n    FR_Tax,\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        /***加入France***/\n        else if(tax == FR_Tax) {\n          \n        }\n        //***\n    }\n}\n```\n\n\n\n* 考虑另一种实现方式\n\n```cpp\nclass TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) = 0;\n    virtual ~TaxStrategy() {}\n};\n\nclass CNTax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n};\n\nclass USTax: public TaxStrategy {\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\nclass DETax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n```cpp\nclass SalesOrder {\nprivate:\n    TaxStrategy* strategy;\npublic:\n    SalesOrder(StrategyFactory* strategyFactory) {\n        this->strategy = strategyFactory->NewStrategy();\n    }\n    \n    ~SalesOrder() {\n        delete this->strategy;\n    }\n    \n    public double CalculateTax() {\n        //...\n        Context context();\n        \n        double val = \n            \tsrtategy->Calculate(context);//多态调用\n    }\n}\n```\n\n如果要增加法国，只需增加一个`FRTax`类\n\n```cpp\nclass FRTax: public TaxStrategy {\npublic:\n    virtual doubel Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。\n\n复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件\n\n\n\n## 结构\n\n\n\n![image-20200805135526277](image-20200805135526277.png) \n\n\n\n## 总结\n\n* Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。\n\n* Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。\n\n* 如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销\n\n\n\n\n\n","source":"_posts/DesignPatterns/StrategyMethod.md","raw":"---\ntitle: Strategy Method\ndate: 2020-08-05 15:53:57\nindex_img: /img/image-20200805135526277.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## 动机\n\n在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担\n\n如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？\n\n\n\n## Strategy Method定义\n\n定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。\n\n\n\n## 代码示例\n\n考虑一下计算税的例子\n\n* 第一种实现方式\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        //***\n    }\n}\n```\n\n有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在`TaxBase`中中增加一个`FR_Tax`, 还需要在`SalesOrder`中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码\n\n```cpp\nenum TaxBase {\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    /***加入France***/\n    FR_Tax,\n};\n\nclass SalesOrder {\n    TaxBase tax;\npublic:\n    double CalculateTax() {\n        //...\n        \n        if(tax == CN_Tax) {\n            //CN*****\n        } else if(tax == US_Tax) {\n            //US*****\n        } else if(tax == DE_Tax) {\n            //DE*****\n        }\n        /***加入France***/\n        else if(tax == FR_Tax) {\n          \n        }\n        //***\n    }\n}\n```\n\n\n\n* 考虑另一种实现方式\n\n```cpp\nclass TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) = 0;\n    virtual ~TaxStrategy() {}\n};\n\nclass CNTax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n};\n\nclass USTax: public TaxStrategy {\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\nclass DETax: public TaxStrategy {\npublic:\n    virtual double Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n```cpp\nclass SalesOrder {\nprivate:\n    TaxStrategy* strategy;\npublic:\n    SalesOrder(StrategyFactory* strategyFactory) {\n        this->strategy = strategyFactory->NewStrategy();\n    }\n    \n    ~SalesOrder() {\n        delete this->strategy;\n    }\n    \n    public double CalculateTax() {\n        //...\n        Context context();\n        \n        double val = \n            \tsrtategy->Calculate(context);//多态调用\n    }\n}\n```\n\n如果要增加法国，只需增加一个`FRTax`类\n\n```cpp\nclass FRTax: public TaxStrategy {\npublic:\n    virtual doubel Calculate(const Context& context) {\n        //...\n    }\n}\n```\n\n这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。\n\n复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件\n\n\n\n## 结构\n\n\n\n![image-20200805135526277](image-20200805135526277.png) \n\n\n\n## 总结\n\n* Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。\n\n* Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。\n\n* 如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销\n\n\n\n\n\n","slug":"DesignPatterns/StrategyMethod","published":1,"updated":"2020-08-06T08:30:43.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxfff000ldbufh1w4ev3p","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担</p>\n<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>\n<h2 id=\"Strategy-Method定义\"><a href=\"#Strategy-Method定义\" class=\"headerlink\" title=\"Strategy Method定义\"></a>Strategy Method定义</h2><p>定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一下计算税的例子</p>\n<ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n<p>有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在<code>TaxBase</code>中中增加一个<code>FR_Tax</code>, 还需要在<code>SalesOrder</code>中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    <span class=\"hljs-comment\">/***加入France***/</span>\n    FR_Tax,\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">/***加入France***/</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == FR_Tax) &#123;\n          \n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>考虑另一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TaxStrategy</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~TaxStrategy() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CNTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">USTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DETax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n<span class=\"hljs-keyword\">private</span>:\n    TaxStrategy* strategy;\n<span class=\"hljs-keyword\">public</span>:\n    SalesOrder(StrategyFactory* strategyFactory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();\n    &#125;\n    \n    ~SalesOrder() &#123;\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>-&gt;strategy;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        <span class=\"hljs-function\">Context <span class=\"hljs-title\">context</span><span class=\"hljs-params\">()</span></span>;\n        \n        <span class=\"hljs-keyword\">double</span> val = \n            \tsrtategy-&gt;Calculate(context);<span class=\"hljs-comment\">//多态调用</span>\n    &#125;\n&#125;</code></pre></div>\n<p>如果要增加法国，只需增加一个<code>FRTax</code>类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FRTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> doubel <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。</p>\n<p>复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200805135526277.png\" srcset=\"/img/loading.gif\" alt=\"image-20200805135526277\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。</p>\n</li>\n<li><p>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。</p>\n</li>\n<li><p>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂； 而且有时候支持不使用的算法也是一个性能负担</p>\n<p>如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</p>\n<h2 id=\"Strategy-Method定义\"><a href=\"#Strategy-Method定义\" class=\"headerlink\" title=\"Strategy Method定义\"></a>Strategy Method定义</h2><p>定义一系列算法，把它们一个个封装起来，并且使它们可互 相替换（变化）。该模式使得算法可独立于使用它的客户程 序(稳定)而变化（扩展，子类化）。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>考虑一下计算税的例子</p>\n<ul>\n<li>第一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n<p>有些时候，静态地去观察是看不出来的，加入时间轴，考虑到未来的动态变化，问题就会暴露出来。考虑上述例子，如果要加入一个国家，比如法国，那么我们不仅要在<code>TaxBase</code>中中增加一个<code>FR_Tax</code>, 还需要在<code>SalesOrder</code>中增加判断语句。这样的更改违背了开闭原则： 对扩展开放，对修改封闭 (避免去修改源代码</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">enum</span> TaxBase &#123;\n    CN_Tax,\n    US_Tax,\n    DE_Tax,\n    <span class=\"hljs-comment\">/***加入France***/</span>\n    FR_Tax,\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n    TaxBase tax;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        \n        <span class=\"hljs-keyword\">if</span>(tax == CN_Tax) &#123;\n            <span class=\"hljs-comment\">//CN*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == US_Tax) &#123;\n            <span class=\"hljs-comment\">//US*****</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == DE_Tax) &#123;\n            <span class=\"hljs-comment\">//DE*****</span>\n        &#125;\n        <span class=\"hljs-comment\">/***加入France***/</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(tax == FR_Tax) &#123;\n          \n        &#125;\n        <span class=\"hljs-comment\">//***</span>\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>考虑另一种实现方式</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TaxStrategy</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~TaxStrategy() &#123;&#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CNTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">USTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DETax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SalesOrder</span> &#123;</span>\n<span class=\"hljs-keyword\">private</span>:\n    TaxStrategy* strategy;\n<span class=\"hljs-keyword\">public</span>:\n    SalesOrder(StrategyFactory* strategyFactory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;strategy = strategyFactory-&gt;NewStrategy();\n    &#125;\n    \n    ~SalesOrder() &#123;\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">this</span>-&gt;strategy;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">CalculateTax</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n        <span class=\"hljs-function\">Context <span class=\"hljs-title\">context</span><span class=\"hljs-params\">()</span></span>;\n        \n        <span class=\"hljs-keyword\">double</span> val = \n            \tsrtategy-&gt;Calculate(context);<span class=\"hljs-comment\">//多态调用</span>\n    &#125;\n&#125;</code></pre></div>\n<p>如果要增加法国，只需增加一个<code>FRTax</code>类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FRTax</span>:</span> <span class=\"hljs-keyword\">public</span> TaxStrategy &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> doubel <span class=\"hljs-title\">Calculate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Context&amp; context)</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>这是一种扩展的做法，在这里只需要增加一个FRTax类，不需要更改SalesOrder。</p>\n<p>复用性一般是指二进制层面下的复用性，如果使用第一种方法，那么整个系统需要重新编译，重新测试。虽然修改后保留了一部分原来的代码，但是这个并不是复用。而策略方法不\u0010需要重新编译之前编译好的文件，只需要重新编译FRTax这个文件</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200805135526277.png\" srcset=\"/img/loading.gif\" alt=\"image-20200805135526277\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使 得类型在运行时方便地根据需要在各个算法之间进行切换。</p>\n</li>\n<li><p>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件 判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需 要Strategy模式。</p>\n</li>\n<li><p>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个 Strategy对象，从而节省对象开销</p>\n</li>\n</ul>\n"},{"title":"Bridge 桥模式","date":"2020-08-11T06:48:03.000Z","index_img":"/img/image-20200811150059187.png","_content":"\n## Bridge属于\"单一职责\"模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge\n\n\n\n## 动机\n\n\n\n由于某些类型的固有的实现逻辑，使得它们具有<u>两个变化的维度， 乃至多个纬度</u>的变化。\n\n如何应对这种\"多维度的变化\"？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？\n\n\n\n## 模式定义\n\n将抽象部分(业务功能)与实现部分(平台实现)分离，使他们都可以独立地变化\n\n## 代码示例\n\n一个通信模块Messager。根据平台分为PC, Mobile，派生出两个子类PCMessagerBase, MobileMessagerBase。根据业务分成perfect和lite, 前面的两个子类又派生出PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect.\n\n如果设平台有n中选择，业务有m中，那么类的数目为$1 + n + m * n$\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual void PlaySound() = 0;\n    virtual void DrawShape() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~Message() {}\n}\n\n//平台实现\nclass PCMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass PCMessagerLite: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n        PCMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        PCMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        PCMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass PCMessagerPerfect: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n\t\tPCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tPCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        PCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass MobileMessagerLite: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n        MobileMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        MobileMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        MobileMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass MobileMessagerPerfect: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n\t\tMobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tMobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        MobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::DrawShape();\n        //......\n    }\n}\n```\n\n\n\n但是这样设置的类有很多的结构性重复。比如PCMessagerPerfect, MobileMessagerPerfect。\n\n* 重构\n\n将PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect的继承改为组合。\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual void PlaySound() = 0;\n    virtual void DrawShape() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~Message() {}\n}\n\n//平台实现\nclass PCMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite {\n    Messager* messager;\npublic:\n    virtual void Login(string username, string password) {\n        messager->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messager->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messager->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect {\n    Messager* messager;\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessager->PlaySound();\n        //******\n        messager->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessager->PlaySound();\n        //******\n        messager->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessager->PlaySound();\n        //******\n        messager->DrawShape();\n        //......\n    }\n}\n```\n\n注意，这样修改之后并不是完整的，因为MessagerLite和MessagerPerfect没有了PlaySound, Connect...这些函数\n\n* 继续重构\n\n可以看到平台类在重载PlaySound, PlaySound, WriteText, Connect这几个函数。而业务类在重载Login, SendMessage, SendPicture这几个函数。因此把这两块函数放在一个类里面是不合适的，我们把他们拆分成两个类\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual ~Message() {}\n}\n\nclass MessagerImp {\npublic:\n    virtual void PlaySound() = 0;\n    virtual void PlaySound() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~MessageImp() {}\n}\n\n//平台实现\nclass PCMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite: public Messager {\n    MessagerImp* messagerImp;\t//...\npublic:\n    virtual void Login(string username, string password) {\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messagerImp->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect: public Messager {\n    MessagerImp* messagerImp;\t//...\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessagerImp->PlaySound();\n        //******\n        messagerImp->DrawShape();\n        //......\n    }\n}\n```\n\n* 再重构\n\n可以看到MessageLite和MessagerPerfect这两个类里面都有MessagerImp字段。根据重构的原则，应该将他往上提到Messager类中。\n\n最终类的数目编程$1+n+m$\n\n```cpp\nclass Messager {\nprotected:\n    MessagerImp* messagerImp;\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual ~Message() {}\n}\n\nclass MessagerImp {\npublic:\n    virtual void PlaySound() = 0;\n    virtual void PlaySound() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~MessageImp() {}\n}\n\n//平台实现\nclass PCMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite: public Messager {\npublic:\n    virtual void Login(string username, string password) {\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messagerImp->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect: public Messager {\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessagerImp->PlaySound();\n        //******\n        messagerImp->DrawShape();\n        //......\n    }\n}\n```\n\n\n\n## 结构\n\n\n\n<img src=\"image-20200811150059187.png\" alt=\"image-20200811150059187\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* Bridge模式使用\"对象间的组合关系\"解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓 抽象和实现沿着各自纬度的变化，即\"子类化\"它们。\n\n* Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。\n\n* Bridge模式的应用一般在\"两个非常强的变化维度\"，有时一个 类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。","source":"_posts/DesignPatterns/Bridge.md","raw":"---\ntitle: Bridge 桥模式\ndate: 2020-08-11 14:48:03\nindex_img: /img/image-20200811150059187.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## Bridge属于\"单一职责\"模式\n\n在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。\n\n* 典型模式\n\n  • Decorator\n\n  • Bridge\n\n\n\n## 动机\n\n\n\n由于某些类型的固有的实现逻辑，使得它们具有<u>两个变化的维度， 乃至多个纬度</u>的变化。\n\n如何应对这种\"多维度的变化\"？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？\n\n\n\n## 模式定义\n\n将抽象部分(业务功能)与实现部分(平台实现)分离，使他们都可以独立地变化\n\n## 代码示例\n\n一个通信模块Messager。根据平台分为PC, Mobile，派生出两个子类PCMessagerBase, MobileMessagerBase。根据业务分成perfect和lite, 前面的两个子类又派生出PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect.\n\n如果设平台有n中选择，业务有m中，那么类的数目为$1 + n + m * n$\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual void PlaySound() = 0;\n    virtual void DrawShape() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~Message() {}\n}\n\n//平台实现\nclass PCMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass PCMessagerLite: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n        PCMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        PCMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        PCMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass PCMessagerPerfect: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n\t\tPCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tPCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        PCMessagerBase::PlaySound();\n        //******\n        PCMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass MobileMessagerLite: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n        MobileMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        MobileMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        MobileMessagerBase::DrawShape();\n        //......\n    }\n}\n\nclass MobileMessagerPerfect: public PCMessagerBase {\npublic:\n    virtual void Login(string username, string password) {\n\t\tMobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tMobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        MobileMessagerBase::PlaySound();\n        //******\n        MobileMessagerBase::DrawShape();\n        //......\n    }\n}\n```\n\n\n\n但是这样设置的类有很多的结构性重复。比如PCMessagerPerfect, MobileMessagerPerfect。\n\n* 重构\n\n将PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect的继承改为组合。\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual void PlaySound() = 0;\n    virtual void DrawShape() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~Message() {}\n}\n\n//平台实现\nclass PCMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public Messager {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite {\n    Messager* messager;\npublic:\n    virtual void Login(string username, string password) {\n        messager->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messager->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messager->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect {\n    Messager* messager;\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessager->PlaySound();\n        //******\n        messager->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessager->PlaySound();\n        //******\n        messager->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessager->PlaySound();\n        //******\n        messager->DrawShape();\n        //......\n    }\n}\n```\n\n注意，这样修改之后并不是完整的，因为MessagerLite和MessagerPerfect没有了PlaySound, Connect...这些函数\n\n* 继续重构\n\n可以看到平台类在重载PlaySound, PlaySound, WriteText, Connect这几个函数。而业务类在重载Login, SendMessage, SendPicture这几个函数。因此把这两块函数放在一个类里面是不合适的，我们把他们拆分成两个类\n\n```cpp\nclass Messager {\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual ~Message() {}\n}\n\nclass MessagerImp {\npublic:\n    virtual void PlaySound() = 0;\n    virtual void PlaySound() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~MessageImp() {}\n}\n\n//平台实现\nclass PCMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite: public Messager {\n    MessagerImp* messagerImp;\t//...\npublic:\n    virtual void Login(string username, string password) {\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messagerImp->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect: public Messager {\n    MessagerImp* messagerImp;\t//...\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessagerImp->PlaySound();\n        //******\n        messagerImp->DrawShape();\n        //......\n    }\n}\n```\n\n* 再重构\n\n可以看到MessageLite和MessagerPerfect这两个类里面都有MessagerImp字段。根据重构的原则，应该将他往上提到Messager类中。\n\n最终类的数目编程$1+n+m$\n\n```cpp\nclass Messager {\nprotected:\n    MessagerImp* messagerImp;\npublic:\n    virtual void Login(string username, string password) = 0;\n    virtual void SendMessage(string message) = 0;\n    virtual void SendPicture(Image image) = 0;\n    \n    virtual ~Message() {}\n}\n\nclass MessagerImp {\npublic:\n    virtual void PlaySound() = 0;\n    virtual void PlaySound() = 0;\n    virtual void WriteText() = 0;\n    virtual void Connect() = 0;\n    \n    virtual ~MessageImp() {}\n}\n\n//平台实现\nclass PCMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n\nclass MobileMessagerBase: public MessagerImp {\npublic:\n    virtual void PlaySound() {\n        //******\n    }\n    virtual void DrawShape() {\n        //******\n    }\n    virtual void WriteText() {\n        //******\n    }\n    virtual void Connect() {\n        //******\n    }\n};\n \n//业务抽象\nclass MessagerLite: public Messager {\npublic:\n    virtual void Login(string username, string password) {\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n        messagerImp->DrawShape();\n        //......\n    }\n}\n\nclass MessagerPerfect: public Messager {\npublic:\n    virtual void Login(string username, string password) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->Connect();\n        //......\n    }\n    \n    virtual void SendMessage(string message) {\n\t\tmessagerImp->PlaySound();\n        //******\n        messagerImp->WriteText();\n        //......\n    }\n    \n    virtual void SendPicture(Image image) {\n       \tmessagerImp->PlaySound();\n        //******\n        messagerImp->DrawShape();\n        //......\n    }\n}\n```\n\n\n\n## 结构\n\n\n\n<img src=\"image-20200811150059187.png\" alt=\"image-20200811150059187\" style=\"zoom:50%;\" />\n\n\n\n## 总结\n\n* Bridge模式使用\"对象间的组合关系\"解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓 抽象和实现沿着各自纬度的变化，即\"子类化\"它们。\n\n* Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。\n\n* Bridge模式的应用一般在\"两个非常强的变化维度\"，有时一个 类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。","slug":"DesignPatterns/Bridge","published":1,"updated":"2020-08-11T07:38:07.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxffi000mdbuf0lsh6v4r","content":"<h2 id=\"Bridge属于”单一职责”模式\"><a href=\"#Bridge属于”单一职责”模式\" class=\"headerlink\" title=\"Bridge属于”单一职责”模式\"></a>Bridge属于”单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>由于某些类型的固有的实现逻辑，使得它们具有<u>两个变化的维度， 乃至多个纬度</u>的变化。</p>\n<p>如何应对这种”多维度的变化”？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>将抽象部分(业务功能)与实现部分(平台实现)分离，使他们都可以独立地变化</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>一个通信模块Messager。根据平台分为PC, Mobile，派生出两个子类PCMessagerBase, MobileMessagerBase。根据业务分成perfect和lite, 前面的两个子类又派生出PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect.</p>\n<p>如果设平台有n中选择，业务有m中，那么类的数目为$1 + n + m * n$</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        PCMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        PCMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        PCMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tPCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tPCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        PCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        MobileMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        MobileMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        MobileMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tMobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tMobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        MobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<p>但是这样设置的类有很多的结构性重复。比如PCMessagerPerfect, MobileMessagerPerfect。</p>\n<ul>\n<li>重构</li>\n</ul>\n<p>将PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect的继承改为组合。</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span> &#123;</span>\n    Messager* messager;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messager-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messager-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messager-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span> &#123;</span>\n    Messager* messager;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<p>注意，这样修改之后并不是完整的，因为MessagerLite和MessagerPerfect没有了PlaySound, Connect…这些函数</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>可以看到平台类在重载PlaySound, PlaySound, WriteText, Connect这几个函数。而业务类在重载Login, SendMessage, SendPicture这几个函数。因此把这两块函数放在一个类里面是不合适的，我们把他们拆分成两个类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerImp</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~MessageImp() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n    MessagerImp* messagerImp;\t<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n    MessagerImp* messagerImp;\t<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>再重构</li>\n</ul>\n<p>可以看到MessageLite和MessagerPerfect这两个类里面都有MessagerImp字段。根据重构的原则，应该将他往上提到Messager类中。</p>\n<p>最终类的数目编程$1+n+m$</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">protected</span>:\n    MessagerImp* messagerImp;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerImp</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~MessageImp() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200811150059187.png\" srcset=\"/img/loading.gif\" alt=\"image-20200811150059187\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Bridge模式使用”对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓 抽象和实现沿着各自纬度的变化，即”子类化”它们。</p>\n</li>\n<li><p>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。</p>\n</li>\n<li><p>Bridge模式的应用一般在”两个非常强的变化维度”，有时一个 类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"Bridge属于”单一职责”模式\"><a href=\"#Bridge属于”单一职责”模式\" class=\"headerlink\" title=\"Bridge属于”单一职责”模式\"></a>Bridge属于”单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码， 这时候的关键是划清责任。</p>\n<ul>\n<li><p>典型模式</p>\n<p>• Decorator</p>\n<p>• Bridge</p>\n</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>由于某些类型的固有的实现逻辑，使得它们具有<u>两个变化的维度， 乃至多个纬度</u>的变化。</p>\n<p>如何应对这种”多维度的变化”？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>将抽象部分(业务功能)与实现部分(平台实现)分离，使他们都可以独立地变化</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>一个通信模块Messager。根据平台分为PC, Mobile，派生出两个子类PCMessagerBase, MobileMessagerBase。根据业务分成perfect和lite, 前面的两个子类又派生出PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect.</p>\n<p>如果设平台有n中选择，业务有m中，那么类的数目为$1 + n + m * n$</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        PCMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        PCMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        PCMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tPCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tPCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        PCMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        PCMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        MobileMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        MobileMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        MobileMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> PCMessagerBase &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tMobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tMobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        MobileMessagerBase::PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        MobileMessagerBase::DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<p>但是这样设置的类有很多的结构性重复。比如PCMessagerPerfect, MobileMessagerPerfect。</p>\n<ul>\n<li>重构</li>\n</ul>\n<p>将PCMessagerLite, PCMessagerPerfect, MobileMessagerLite, MobileMessagerPerfect的继承改为组合。</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span> &#123;</span>\n    Messager* messager;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messager-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messager-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messager-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span> &#123;</span>\n    Messager* messager;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessager-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messager-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<p>注意，这样修改之后并不是完整的，因为MessagerLite和MessagerPerfect没有了PlaySound, Connect…这些函数</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<p>可以看到平台类在重载PlaySound, PlaySound, WriteText, Connect这几个函数。而业务类在重载Login, SendMessage, SendPicture这几个函数。因此把这两块函数放在一个类里面是不合适的，我们把他们拆分成两个类</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerImp</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~MessageImp() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n    MessagerImp* messagerImp;\t<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n    MessagerImp* messagerImp;\t<span class=\"hljs-comment\">//...</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>再重构</li>\n</ul>\n<p>可以看到MessageLite和MessagerPerfect这两个类里面都有MessagerImp字段。根据重构的原则，应该将他往上提到Messager类中。</p>\n<p>最终类的数目编程$1+n+m$</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Messager</span> &#123;</span>\n<span class=\"hljs-keyword\">protected</span>:\n    MessagerImp* messagerImp;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Message() &#123;&#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerImp</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~MessageImp() &#123;&#125;\n&#125;\n\n<span class=\"hljs-comment\">//平台实现</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MobileMessagerBase</span>:</span> <span class=\"hljs-keyword\">public</span> MessagerImp &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PlaySound</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DrawShape</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">WriteText</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Connect</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//******</span>\n    &#125;\n&#125;;\n \n<span class=\"hljs-comment\">//业务抽象</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerLite</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MessagerPerfect</span>:</span> <span class=\"hljs-keyword\">public</span> Messager &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Login</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> username, <span class=\"hljs-built_in\">string</span> password)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;Connect();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendMessage</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> message)</span> </span>&#123;\n\t\tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;WriteText();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SendPicture</span><span class=\"hljs-params\">(Image image)</span> </span>&#123;\n       \tmessagerImp-&gt;PlaySound();\n        <span class=\"hljs-comment\">//******</span>\n        messagerImp-&gt;DrawShape();\n        <span class=\"hljs-comment\">//......</span>\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200811150059187.png\" srcset=\"/img/loading.gif\" alt=\"image-20200811150059187\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Bridge模式使用”对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓 抽象和实现沿着各自纬度的变化，即”子类化”它们。</p>\n</li>\n<li><p>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。</p>\n</li>\n<li><p>Bridge模式的应用一般在”两个非常强的变化维度”，有时一个 类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</p>\n</li>\n</ul>\n"},{"title":"Template Method","date":"2020-08-05T08:10:25.000Z","index_img":"/img/image-20200710192039991.png","_content":"\n## 动机\n\n在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。\n\n核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。\n\n如何在确定**稳定操作结构**的前提下，来灵活应对**各个子步骤的变化**或者**晚期实现需求**？\n\n假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的\n\n<img src=\"image-20200710191024075.png\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n## 结构化软件流程设计\n\n<img src=\"image-20200710191212499.png\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Step1() {\n        //...\n    }\n    void Step3() {\n        //...\n    }\n    void Step5() {\n        //...\n    }\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application {\npublic:\n    bool Step2() {\n        //...\n    }\n    void Step4() {\n        //...\n    }\n}\n```\n\n主程序\n\n```cpp\nint main() {\n    Library lib();\n    Application app();\n    \n    lib.Step1();\n    \n    if(app.Step2()) {\n        lib.Step3();\n    }\n    for(int i = 0; i < 4; i++) {\n        app.Step4();\n    }\n    lib.Step5();\n}\n```\n\n\n\n## 用模板方法的代码重构为\n\n<img src=\"image-20200710191917988.png\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Run() {\n        Step1();\n        if(Step2()) {\n            Step3();\n        }\n        for(int i = 0; i < 4; i++) {\n            Step4();\n        }\n        Step5();\n    }\n    \n    virtual ~Library() {}\nprotected:\n    void Step1() { //稳定\n        //...\n    }\n    void Step3() { //稳定\n        //...\n    }\n    void Step5() { //稳定\n        //...\n    }\n    \n    virtual bool Step2() = 0; //变化\n    virtual void Step4() = 0; //变化\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application: public Library {\nprotected:\n    virtual bool Step2() {\n        //...\n    }\n    virtual void Step4() {\n        //...\n    }\n};\n```\n\n主程序\n\n```cpp\nint main() {\n    Library* pLib = new Application();\n    lib.Run();\n    delete pLib;\n}\n```\n\n\n\n## 总结\n\n这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定\n\n<img src=\"image-20200710192039991.png\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。\n\n","source":"_posts/DesignPatterns/TemplateMethod.md","raw":"---\ntitle: Template Method\ndate: 2020-08-05 16:10:25\nindex_img: /img/image-20200710192039991.png\ntags: Design Patterns\ncategories: Design Patterns\n---\n\n## 动机\n\n在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。\n\n核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。\n\n如何在确定**稳定操作结构**的前提下，来灵活应对**各个子步骤的变化**或者**晚期实现需求**？\n\n假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的\n\n<img src=\"image-20200710191024075.png\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" />\n\n\n\n## 结构化软件流程设计\n\n<img src=\"image-20200710191212499.png\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Step1() {\n        //...\n    }\n    void Step3() {\n        //...\n    }\n    void Step5() {\n        //...\n    }\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application {\npublic:\n    bool Step2() {\n        //...\n    }\n    void Step4() {\n        //...\n    }\n}\n```\n\n主程序\n\n```cpp\nint main() {\n    Library lib();\n    Application app();\n    \n    lib.Step1();\n    \n    if(app.Step2()) {\n        lib.Step3();\n    }\n    for(int i = 0; i < 4; i++) {\n        app.Step4();\n    }\n    lib.Step5();\n}\n```\n\n\n\n## 用模板方法的代码重构为\n\n<img src=\"image-20200710191917988.png\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" />\n\nlib.cpp\n\n```cpp\nclass Library {\npublic:\n    void Run() {\n        Step1();\n        if(Step2()) {\n            Step3();\n        }\n        for(int i = 0; i < 4; i++) {\n            Step4();\n        }\n        Step5();\n    }\n    \n    virtual ~Library() {}\nprotected:\n    void Step1() { //稳定\n        //...\n    }\n    void Step3() { //稳定\n        //...\n    }\n    void Step5() { //稳定\n        //...\n    }\n    \n    virtual bool Step2() = 0; //变化\n    virtual void Step4() = 0; //变化\n}\n```\n\napp.cpp\n\n```cpp\n//应用程序开发人员\nclass Application: public Library {\nprotected:\n    virtual bool Step2() {\n        //...\n    }\n    virtual void Step4() {\n        //...\n    }\n};\n```\n\n主程序\n\n```cpp\nint main() {\n    Library* pLib = new Application();\n    lib.Run();\n    delete pLib;\n}\n```\n\n\n\n## 总结\n\n这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定\n\n<img src=\"image-20200710192039991.png\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" />\n\n定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。\n\n","slug":"DesignPatterns/TemplateMethod","published":1,"updated":"2020-08-06T08:30:27.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxffm000ndbuf1d9mgw17","content":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p>\n<p>核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。</p>\n<p>如何在确定<strong>稳定操作结构</strong>的前提下，来灵活应对<strong>各个子步骤的变化</strong>或者<strong>晚期实现需求</strong>？</p>\n<p>假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的</p>\n<p><img src=\"image-20200710191024075.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" /></p>\n<h2 id=\"结构化软件流程设计\"><a href=\"#结构化软件流程设计\" class=\"headerlink\" title=\"结构化软件流程设计\"></a>结构化软件流程设计</h2><p><img src=\"image-20200710191212499.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" /></p>\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-function\">Library <span class=\"hljs-title\">lib</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\">Application <span class=\"hljs-title\">app</span><span class=\"hljs-params\">()</span></span>;\n    \n    lib.Step1();\n    \n    <span class=\"hljs-keyword\">if</span>(app.Step2()) &#123;\n        lib.Step3();\n    &#125;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n        app.Step4();\n    &#125;\n    lib.Step5();\n&#125;</code></pre></div>\n<h2 id=\"用模板方法的代码重构为\"><a href=\"#用模板方法的代码重构为\" class=\"headerlink\" title=\"用模板方法的代码重构为\"></a>用模板方法的代码重构为</h2><p><img src=\"image-20200710191917988.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" /></p>\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Step1();\n        <span class=\"hljs-keyword\">if</span>(Step2()) &#123;\n            Step3();\n        &#125;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n            Step4();\n        &#125;\n        Step5();\n    &#125;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Library() &#123;&#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n&#125;</code></pre></div>\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span>:</span> <span class=\"hljs-keyword\">public</span> Library &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;</code></pre></div>\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    Library* pLib = <span class=\"hljs-keyword\">new</span> Application();\n    lib.Run();\n    <span class=\"hljs-keyword\">delete</span> pLib;\n&#125;</code></pre></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定</p>\n<p><img src=\"image-20200710192039991.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" /></p>\n<p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因 （比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p>\n<p>核心在于在稳定与变化之间求得一个平衡，如果全部稳定或者全部变化都是不需要设计模式的。</p>\n<p>如何在确定<strong>稳定操作结构</strong>的前提下，来灵活应对<strong>各个子步骤的变化</strong>或者<strong>晚期实现需求</strong>？</p>\n<p>假设整个代码的操作结构如下图所示，其中红色是Library开发人员完成的，蓝色部分是Application开发人员完成的</p>\n<p><img src=\"image-20200710191024075.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191024075\" style=\"zoom:33%;\" /></p>\n<h2 id=\"结构化软件流程设计\"><a href=\"#结构化软件流程设计\" class=\"headerlink\" title=\"结构化软件流程设计\"></a>结构化软件流程设计</h2><p><img src=\"image-20200710191212499.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191212499\" style=\"zoom:50%;\" /></p>\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    <span class=\"hljs-function\">Library <span class=\"hljs-title\">lib</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-function\">Application <span class=\"hljs-title\">app</span><span class=\"hljs-params\">()</span></span>;\n    \n    lib.Step1();\n    \n    <span class=\"hljs-keyword\">if</span>(app.Step2()) &#123;\n        lib.Step3();\n    &#125;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n        app.Step4();\n    &#125;\n    lib.Step5();\n&#125;</code></pre></div>\n<h2 id=\"用模板方法的代码重构为\"><a href=\"#用模板方法的代码重构为\" class=\"headerlink\" title=\"用模板方法的代码重构为\"></a>用模板方法的代码重构为</h2><p><img src=\"image-20200710191917988.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710191917988\" style=\"zoom:50%;\" /></p>\n<p>lib.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Library</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">()</span> </span>&#123;\n        Step1();\n        <span class=\"hljs-keyword\">if</span>(Step2()) &#123;\n            Step3();\n        &#125;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;\n            Step4();\n        &#125;\n        Step5();\n    &#125;\n    \n    <span class=\"hljs-keyword\">virtual</span> ~Library() &#123;&#125;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step1</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step3</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step5</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//稳定</span>\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//变化</span>\n&#125;</code></pre></div>\n<p>app.cpp</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//应用程序开发人员</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span>:</span> <span class=\"hljs-keyword\">public</span> Library &#123;\n<span class=\"hljs-keyword\">protected</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Step2</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Step4</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;;</code></pre></div>\n<p>主程序</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;\n    Library* pLib = <span class=\"hljs-keyword\">new</span> Application();\n    lib.Run();\n    <span class=\"hljs-keyword\">delete</span> pLib;\n&#125;</code></pre></div>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这两者的区别在于早绑定和晚绑定。前者属于早绑定，而template method属于晚绑定</p>\n<p><img src=\"image-20200710192039991.png\" srcset=\"/img/loading.gif\" alt=\"image-20200710192039991\" style=\"zoom:50%;\" /></p>\n<p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。</p>\n"},{"title":"面向对象设计原则","date":"2020-08-06T07:20:24.000Z","_content":"\n\n\n{% note info%}\n\n变化是复用的天敌！ 面向对象设计最大的优势在于：<u>***抵御变化***</u>\n\n{% endnote %}\n\n\n\n#### 依赖倒置原则 (DIP)\n\n* 高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。\n\n* 抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。\n\n<br>\n\n#### 开放封闭原则 (OCP)\n\n* 对扩展开放，对更改封闭。\n\n* 类模块应该是可扩展的，但是不可修改。","source":"_posts/DesignPatterns/Principle.md","raw":"---\ntitle: 面向对象设计原则\ndate: 2020-08-06 15:20:24\ntags: Design Patterns\n---\n\n\n\n{% note info%}\n\n变化是复用的天敌！ 面向对象设计最大的优势在于：<u>***抵御变化***</u>\n\n{% endnote %}\n\n\n\n#### 依赖倒置原则 (DIP)\n\n* 高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。\n\n* 抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。\n\n<br>\n\n#### 开放封闭原则 (OCP)\n\n* 对扩展开放，对更改封闭。\n\n* 类模块应该是可扩展的，但是不可修改。","slug":"DesignPatterns/Principle","published":1,"updated":"2020-08-06T07:26:55.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpnxffr000rdbufgiia5ngu","content":"<div class=\"note note-info\">\n            <p>变化是复用的天敌！ 面向对象设计最大的优势在于：<u><strong><em>抵御变化</em></strong></u></p>\n          </div>\n<h4 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h4><ul>\n<li><p>高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</p>\n</li>\n<li><p>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</p>\n</li>\n</ul>\n<p><br></p>\n<h4 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h4><ul>\n<li><p>对扩展开放，对更改封闭。</p>\n</li>\n<li><p>类模块应该是可扩展的，但是不可修改。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<div class=\"note note-info\">\n            <p>变化是复用的天敌！ 面向对象设计最大的优势在于：<u><strong><em>抵御变化</em></strong></u></p>\n          </div>\n<h4 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h4><ul>\n<li><p>高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</p>\n</li>\n<li><p>抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</p>\n</li>\n</ul>\n<p><br></p>\n<h4 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h4><ul>\n<li><p>对扩展开放，对更改封闭。</p>\n</li>\n<li><p>类模块应该是可扩展的，但是不可修改。</p>\n</li>\n</ul>\n"},{"title":"Computer network--物理层","date":"2019-09-17T08:29:39.000Z","index_img":"/img/image-20190917211449784.png","_content":"\n# 1 数据通信的理论基础\n\n## 1.1傅里叶分析\n\n任何一个行为合理周期为T的函数g(t)，都可以表示成正弦函数和余弦函数组成的无穷级数\n\n$$g(t)=\\frac{1}{2}c+\\sum_{n=1}^{\\infty}a_nsin(2\\pi nft)+\\sum_{n=1}^{\\infty}b_ncos(2\\pi nft)$$\n\n其中$f=\\frac{1}{T}$是基本频率，$a_n$和$b_n$是n次谐波的正弦振幅和余弦振幅,c是常数\n\n<br/>\n\n## 1.2 带宽有限的信号\n\n我们考虑一个特殊的例子：\n\n传输ASCII字符b,这个字符被编码成一个8比特长的字节，01100010\n\n可以得到系数\n\n<center><img src=\"image-20190917211816031.png\" alt=\"image-20190917211816031\" style=\"zoom:50%;\" /></center>\n\n>  所有传输设施在传输过程中都要损失一些能量    \n>\n>  \n>\n>  如果所有傅里叶分量都等量衰减，则结果信号将会在振幅上有所减小，但形状不会变。  \n>\n>  \n\n> 但是，实际情况是，所有传输设施对于不同傅里叶分量的衰减程度并不相同，这会导致接收端接收到的信号发生**变形**。  \n>\n> 一般对导线来说，在[0,$f_c$]的频率范围，振幅在传输过程中不回衰减，而在$f_c$这个截止频率之上的所有频率的振幅都会有不同程度的减弱。    \n>\n> \n>\n> 这个在传输过程中振幅不回明显减弱的频率的宽度就称为**带宽**   \n>\n> \n>\n> 但是截止频率不是一个突变的量，不是说到达某个阈值，振幅就突然减弱了，所以通常引用的带宽是指从0到接收能量保留一半到那个频率位置\n\n带宽是传输介质的一种物理特性，取决于介质  \n\n\n\n一般将从0到某个最大频率的信号称为**基带信号**，将被搬移并占用某个更大频率范围的信号称为**通带信号**  \n\n\n\n<center><img src=\"image-20190917211449784.png\" alt=\"image-20190917211449784\" style=\"zoom: 67%;\" /></center>\n\n<br/>\n\n#### 带宽很低，会发生什么？\n\n如果带宽很低，则只有几个最低频率才能被传输\n\n假设比特率为$b$ bit/s[每秒发送8个比特]\n\n则发送8个比特所需要的时间是$\\frac{8}{b}$秒\n\n所以第一个谐波频率是$\\frac{b}{8}$赫兹\n\n如果截止频率是3000hz,则可以通过的最高谐波数为\n\n$$\\frac{3000}{\\frac{8}{b}}$$\n\n<center><img src=\"image-20190917213738345.png\" alt=\"image-20190917213738345\" style=\"zoom:50%;\" /></center>\n\n如上图所示，如果能发送的频率数很少，我们就没办法精确表示周期函数\n\n<br/>\n\n## 1.3 信道的最大数据速率\n\n<a href=\"https://blog.csdn.net/supreme42/article/details/7734763\">一些概念</a>\n\n波特率[baud rate/ symbol rate]\n\n> 波特率指的是信号每秒钟电平变化的次数，单位是*Hz*\n\n比特率\n\n> 信号每秒钟传输的数据的位数。计算机中数据都是用*0*，*1*表示的，所以比特率也就是每秒钟传输*0*和*1*的个数，单位是*bps*[*bit per second*]\n\n波特率和比特率的关系\n\n> 我们可以假设一个信号只有两个电平，那么这个时候可以把低电平理解为*“0”*，高电平理解为*“1”*，这样每秒钟电平变化的次数也就是传输的*0*，*1*个数了，即比特率 *=* 波特率。\n>\n> 但是有些信号可能不止两个电平，比如一个四电平的信号，那么每个电平就可以被理解成*“00”*，*“01”*，*“10”*，*“11”*，这样每次电平变化就能传输两位的数据了，即比特率 *= 2 ×* 波特率。\n>\n> 一般的，$bit\\,rate = buad\\,rate × log_2V$，这里V就是信号电平的个数。\n\n\n\nNyquist证明：如果一个任意信号通过一个带宽为B的低通滤波器，那么只要进行每秒2B次确切采样[一个周期采样2次]，就可以完全重构出被过滤的信号\n\n不考虑噪声，如果信号包含了V个离散等级，那么公式可以写为\n\n$$最大数据速率=2Blog_2V(bit/s)$$\n\n[最大symbol rate=$2B\\,symbol/s$]\n\n> 每秒采样2B次，也就是采样了2B个电平信号\n>\n> 也就是采样了2BlogV个bits\n\n事实上，要想重构出信号，每秒2B次采样是不够的，要多一些才够。\n\n<center><img src=\"9FC21EC72573A17040AD0FCD3C37A790.png\" alt=\"9FC21EC72573A17040AD0FCD3C37A790\" style=\"zoom:10%;\" /></center>\n\n<br/>\n\n#### 接下来考虑如果存在随机噪声\n\n$$信噪比(SNR)=\\frac{信号功率}{噪声功率}=\\frac{S}{N}$$  \n\n\n\n通常将其写成对数形式$10log_{10}\\frac{S}{N}$,单位为分贝. \n\n\n\n香农得出：对于一条带宽为B赫兹，噪声比是$\\frac{S}{N}$的有噪声通道，他的最大数据传输速率是. \n\n$$最大比特率=Blog_2{(1+\\frac{S}{N})}$$\n\n\n\n## 2 引导性传输介质[有线传输]\n\n物理层的作用是将bit从一条机器传输到另一台机器。传输所用的物理介质会在传输带宽、延迟、成本等方面产生差别。\n\n可以将介质分为\n\n* 引导性介质：如铜线、光纤\n* 非引导性介质：如卫星、激光\n\n<br/>\n\n### 2.1 磁介质\n\nNever underestimate the bandwidth of station wagon full of tapes hurtling down the highway.\n\n### 2.2 双绞线\n\n构成\n\n> 双绞线由两根铜线以螺旋状的形式紧紧地绞在一起。\n\n之所以要绞在一起，是因为这样不同电线产生的干扰波会相互抵消，显著降低电线的辐射。\n\n并且，信号以两根电线的电压差来承载，这样对外部噪声有更好的免疫力，因为噪声对两根电线的干扰是相同的，因此电压差不会改变。\n\n<br/>\n\n双绞线既可以传输模拟信号，也可以传输数字信号。\n\n传输方向：\n\n* 全双工链路[full-duplex]：可以双向同时使用的链路\n* 半双工链路half-duplex]：可以双向使用但一次只能使用一个方向\n* 单工链路[simplex]：只允许一个方向上传输\n\n双绞线的type:\n\n> – Category 5 [100Mbps, 1Gbps]\n> – Category 6 [10Gbps]\n> – Category 7 [Shielded Twisted Pair]\n\n<center><img src=\"image-20191007125121828.png\" alt=\"image-20191007125121828\" style=\"zoom:33%;\" /></center>\n\n双绞线的缺点是：\n\n传输距离远的话，信号衰减很厉害，需要使用中继器\n\n### 2.3 同轴电缆[coaxial cable]\n\n构成：\n\n> 硬的铜芯，外面包上一层绝缘材料，绝缘材料的外面是网状圆柱导体，外层导体再覆盖上一层保护塑料外套\n\n<center><img src=\"image-20191007133601513.png\" alt=\"image-20191007133601513\" style=\"zoom: 33%;\" /></center>\n\n特点：\n\n> 同轴电缆的结构和屏蔽性使得它既有很高的带宽，又有很好的抗噪性。\n>\n> 这点比双绞线更优秀，因此也比双绞线传的远\n\n\n\n### 2.4 电力线[power line]\n\n\n\n<center><img src=\"image-20191007133946196.png\" alt=\"image-20191007133946196\" style=\"zoom: 33%;\" /></center>\n\n### 2.5 Fiber optics\n\n<center><img src=\"page40image34686176.png\" alt=\"page40image34686176.jpg\" style=\"zoom:33%;\" /></center>\n\nTypes:\n\n> Multimode多模：many different rays\n>\n> Unimode单模：single rays, longer distance\n\n\n\nTransmission of light through fiber:\n\n> -Attenuation [衰减] of light through fiber in the infrared region.\n>\n> – Three wavelength bands are used for optical communication. They are centered at 0.85, 1.30, and 1.55 micros [微米].\n\n<center><img src=\"page41image34714624.png\" alt=\"page41image34714624.jpg\" style=\"zoom: 33%;\" /></center>\n\n#### <u>光缆</u>：\n\n构成：\n\n> 中间core是玻璃芯，光秒冲通过它传播\n>\n> 玻璃芯外面是一个玻璃覆盖层[cladding]，覆盖层的折射率比玻璃低，这样可以限制所有光都限制在玻璃芯内[全反射]\n>\n> 最外面是一层塑料封套[jacket],用来保护里面的玻璃包层\n>\n> 光纤通常被扎捆成束，最外面再加一层保护套\n\n<center><img src=\"page42image34731632.png\" alt=\"page42image34731632.jpg\" style=\"zoom:35%;\" /></center>\n\n信号源一半有两种光源：发光LED和半导体激光\n\n<center><img src=\"page44image34725184.png\" alt=\"page44image34725184.jpg\" style=\"zoom:33%;\" /></center>\n\n#### <u>光纤和铜线的比较</u>   \n\n– Advantages\n\n- Higher bandwidths and Low attenuation.\n- Not being affected by power surges, electromagnetic interference, or power failures.\n- Not affected by corrosive chemicals in the air.\n- Thin and lightweight.\n- Fibers do not leak light and quite difficult to tap.\n\n– Disadvantages\n\n* Less familiar technology.\n\n  要求较高的操作技能，光纤被过度弯曲容易折断\n\n* Fiber interfaces more expensive.\n\n– Conclusion: For new routes [longer ones], fiber win\n\n\n\n# 3 无线传输\n\n## 3.1电磁频谱\n\n<center><img src=\"image-20191007140913262.png\" alt=\"image-20191007140913262\" style=\"zoom:30%;\" /></center>\n\n由香农定理我们知道一个电磁波的信号能够携带的信息量与带宽成正比，从图中可以看到光纤带宽是多么宽\n\n\n\nSome spread its frequency over a *wide frequency band*[spread spectrum, 扩频].\n\n– Frequency hopping spread spectrum [military, 802.11, Bluetooth]\n\n– Direct sequence spread spectrum [3G mobile phones]\n\n– UWB [UltraWideBand]\n\n\n\n<center><img src=\"page49image35151168.png\" alt=\"page49image35151168.jpg\" style=\"zoom:33%;\" /></center>\n\n###  3.2 Radar\n\n### 3.3 Radio transmission\n\n[a] In the VLF, LF, and MF bands, radio waves follow the curvature of the earth.\n\n[b] In the HF band, they bounce off the ionosphere [电离层].\n\n<center><img src=\"page52image35155536.png\" alt=\"page52image35155536.jpg\" style=\"zoom:33%;\" /></center>\n\n### 3.4 Microwave transmission\n\n\n\n# 4 数字调制与多路复用\n\n#### 什么是数字调制？  \n\n> 比特与代表他们的信号之间的转换过程称为**数字调制**\n\n<br/>\n\n我们首先来看如何把**比特直接转换成信号**的方案，这些方案导致了**基带传输**\n\n> 基带传输是指：信号的传输占有传输介质上从0到最大值之间的全部频率\n\n然后我们看通过调节载波信号的幅值、相位或者频率来运载比特的模式，这些方案导致了**通带传输**\n\n> 通带传输是指：信号占据了以载波信号频率为中心的一段频带\n\n\n\n<br/>\n\n信道通常被多个信号共享，这种信道的共享形式称为**多路复用技术**\n\n多路复用技术可以通过：时分复用、频分复用、码分复用 实现\n\n\n\n## 4.1 基带传输\n\n<center><img src=\"image-20200101212239647.png\" alt=\"image-20200101212239647\" style=\"zoom:50%;\" /></center>\n\n\n### NRZ\n\n翻转代表1，不翻转代表0\n\n一旦NRZ信号被发出去，它沿线缆传播。另一端的接收器以一定周期对信号采样，然后把采样信号转换成比特。\n\nProblem:\n\n> a long run of 0s or 1s leaves the signal unchanged. \n>\n> After a while it is hard to tell the bits apart, as 15 zeros look much like 16 zeros unless you have a very accurate clock.\n\nAccurate clock: \n\n>  For all schemes that encode bits into symbols, the receiver must know **when one symbol ends and the next symbol begins** to correctly decode the bits.\n\n\n\n一般来说，accurate clock是很难做到的，那么我们该怎么办呢？\n\n#### <u>Clock Recovery</u>\n\n- 一种方法，额外拉一根时钟线，给接收器发送单独的时钟信号\n\n  这个方法不好，因为这很浪费，用一根额外的线来发送时钟，还不如用它来发送数据呢\n\n\n\n- A clever trick is to mix the clock signal with the data signal by XORing them together so that no extra line is needed.→**<u>Manchester Encoding</u>**\n\n  \n\n  **<u>Manchester Encoding</u>**的方法是，时钟的频率是比特率的两倍，也就是在一个bit 时间内，时钟会产生一次跳变。时钟XOR bit，产生输出\n\n  如上图所示\n\n  >  第一个bit时间t内，传输的bit是1，时钟在[0,t/2]内是0，与bit 1异或，编码成1; \n  >\n  >  在[t/2, t]内时钟跳变到1，与bit 0异或，编码成0.\n  >\n  >  因此我们在第一个bit时间看到的编码先是1后翻转到0\n\n  问题：需要两倍于NRZ的带宽，一个bit时间他要传输两个信号\n\n- As a step in the right direction, we can simplify the situation by encoding a 1 as a transition and a 0 as no transition, or vice versa.→**<u>NRZI</u>** [Non-Return-to- Zero Inverted,不归零倒相制, Used in USB]\n\n  \n\n  **<u>NRZI</u>**方法是：编码有跳变表示1，编码无跳变表示0\n\n  这样，再长的一串1都不会产生时钟恢复问题；但是一长串的0仍然有问题\n\n  \n\n* Problem: long runs of 0s?→**<u>4B/5B</u>**\n\n  **<u>4B/5B</u>**的方法是：每4个bits被映射成一个5bits的模式，映射按照一张固定的转换表进行，5bits的选择使得映射结果永远不会出现连续3个0\n\n  <center><img src=\"page63image36690640.png\" alt=\"page63image36690640.png\" style=\"zoom:33%;\" /></center>\n\n  问题：增加了25%的带宽\n\n\n<br/>\n\n## 4.2 通带传输\n\n一般情况下，我们在一个信道上发送信息使用的频率范围并不是从0开始的。对于无线信道来说，发送非常低频率的信号不切实际，因为天线的大小与信号的波长成比例，低频信号需要很大的天线。\n\n发射频率一般是由监管约束和避免干扰的需要决定的\n\n### 4.2.1 数字调试\n\n<center><img src=\"image-20191007153614734.png\" alt=\"image-20191007153614734\" style=\"zoom:50%;\" /></center>\n\n#### A 幅移键控[ASK, Amplitude Shift Keying]\n\n通过采用不同的振幅表示0和1\n\n> 如上图(b)所示，这里采用非零幅值和一个零幅值\n\n#### B 频移键控[FSK, Frequency Shift Keying]\n\n采用两个或更多的频率\n\n> 如上图[c]所示，使用两个频率表示0和1\n\n#### C 相移键控[PSK, Phase Shift Keying]\n\n在每个符号的周期中，系统把载波波形偏移0度或者180度。由于只有两个相位，这种调制方法称为二进制相移键控[BPSK]，这里的二进制表示的是两个符号\n\n> 如上图[d]所示，使用两种相位量表示0和1\n\n当然，我们可以用更多数量的偏移。比如用4个偏移，45，135，225，315，那么每个符号可以表示2bit。这种称为正交相移键控[QPSK, Quadrature]\n\n\n\n#### D 集大成者\n\n我们可以综合以上调制方式，使得每个符号表示更多的bit.\n\n我们选择综合振幅和相位。为什么不考虑频率呢？因为频率和相位有关\n\n<br/>\n\n我们给出星座图\n\n>  一个点的相位是以他为起点到原点的线与x轴正方向的夹角\n>\n>  一个点的振幅是他到原点的距离\n\n<center><img src=\"image-20191007154637608.png\" alt=\"image-20191007154637608\" style=\"zoom: 33%;\" /></center>\n\n> 如图[b], QAM-16：\n>\n> 一共有16个符号，16个符号可以表示出4bits的所有组合\n>\n> 因此一个符号可以传输4个比特\n>\n> 同样，如图[c], QAM-64\n>\n> 一共有64个符号，一个符号可以传输6bits [..$2^6=64$]\n\n\n\n## 4.3 Multiplexing\n\n### 4.3.1 频分复用[FDM,Frequency Division Multiplexing]\n\n利用通带传输的优势使多个用户共享一个信道。\n\nFDM将频谱分成几个频段，每个用户完全拥有其中一个频段来发送自己的信号\n\n<center><img src=\"image-20191005234836200.png\" alt=\"image-20191005234836200\" style=\"zoom: 40%;\" /></center>\n\n#### 正交频分复用[OFDM,orthogonal]\n\n信道带宽被分成许多独立发送数据的子载波，每个子载波之间频率的间隔是$\\Delta f$\n\n每个子载波发出的信号虽然可以扩散到相邻子载波，但是每个子载波的频率响应被设计成在相邻子载波的中心为0。因此，可以在子载波中心频率采样而不会收到其邻居的干扰\n\n<center><img src=\"image-20191007160446233.png\" alt=\"image-20191007160446233\" style=\"zoom:40%;\" /></center>\n\n### 4.3.2 时分复用\n\n用户以循环的方式轮流工作。每个用户周期性获得整个带宽非常短的一个时间\n\n<center><img src=\"image-20191005234914576.png\" alt=\"image-20191005234914576\" style=\"zoom:40%;\" /></center>\n\n### 4.3.3 码分复用\n\n传输一个bit的时间被划分成m个更短的时间间隔，称这个时间间隔为<u>码片</u>[chip]。每个站分配得到唯一的m位码，称为 <u>码片序列</u>\n\n如果要发送bit 1,站就发送分配给他的码片序列；如果要发送bit 0,站就发送分配给他的码片序列的反码。\n\n> m=8,即一个bit时间传输的码片序列是8位的。\n>\n> 如果A站分配到的码片序列为[-1-1-1+1+1-1+1+1]\n>\n> 那么如果A想发送bit 1，就发送码片序列[-1-1-1+1+1-1+1+1]\n>\n> 如果A想发送 bit 0, 就发送码片序列[+1+1+1-1-1+1-1-1]\n\n\n\n码片序列的要求：\n\n>  所有的码片序列都要两两正交\n\n<center><img src=\"image-20191006000007082.png\" alt=\"image-20191006000007082\" style=\"zoom:35%;\" /></center>\n\nA,B,C,D 是发送信号的4个station，他们的码片序列两两正交。\n\nS1,S2,...S6是6个例子,S6表示这个比特时间A,B,D发送了bit 1，C发送了bit 0。但是我们收到的是S6这个不同站的信号都混淆在一起的整体。怎么把C站发送的比特提取出来呢？\n\n方法是S6与C做归一化内积。即$S_6\\cdot C=[2-2+0-2+0-2-4+0]/8=-1$\n\n因此我们知道在S6所处的这个比特时间内，C站传输了bit 0。\n\n> 内积结果\n>\n> =1 说明该站发送了 bit 1\n>\n> =-1说明该站发送了bit 0\n>\n> =0 说明该站没有发送数据\n\n\n\n# 5 公共电话交换网络\n\nHow to connect computers?\n\n> For small number of computers and a local area\n>\n> * LAN \n>\n> For a large number of computers or a wide area or lacking right of way\n>\n> * PSTN [Public Switched Telephone Network]\n\n## 5.1 Structure of the Telephone System\n\n\n\n电话网络的变迁\n\n<center><img src=\"image-20191007161859322.png\" alt=\"image-20191007161859322\" style=\"zoom:40%;\" /></center>\n\nBell system model\n\nLevels:\n\n* End office 本地局\n* toll office 长途局\n* primary office 初级局\n* Sectional office 地区局\n* Regional office 区域局\n\nMajor components \n\n- Local loops [本地回路]: 进入家庭和公司的模拟双绞线\n\n- Trunks [干线]: 连接交换局的数字光纤\n\n- Switching offices [交换局]:电话呼叫在这里从一条中继线被接入另一条中继线\n\n\n\n<center><img src=\"image-2019100742053.png\" alt=\"屏幕快照 2019-10-07 下午4.20.53\" style=\"zoom:50%;\" /></center>\n\n## 5.1 本地回路：调制解调器、ADSL、光纤\n\n### A 电话调制解调器\n\n要在物理信道上发送比特，必须把比特转换为可以在信道上传输的模拟信号。这个方式我们在上一节已经学过。\n\n在信号的另一端，模拟信号要被还原成比特\n\n<br/>\n\n**<u>调制解调器</u>**\n\n是什么\n\n> 执行数字比特流和模拟信号流之间转换的设备就是调制解调器[modem]\n>\n> 调制解调器是调制器[modulator]和解调器[demodulator]的缩写\n\n<center><img src=\"page102image35767104.png\" alt=\"page102image35767104.png\" style=\"zoom:70%;\" /> </center>","source":"_posts/PhysicalLayer.md","raw":"---\ntitle: Computer network--物理层\ndate: 2019-09-17 16:29:39\ntags:  Computer Network\ncategories:  Computer Network\nindex_img: /img/image-20190917211449784.png\n---\n\n# 1 数据通信的理论基础\n\n## 1.1傅里叶分析\n\n任何一个行为合理周期为T的函数g(t)，都可以表示成正弦函数和余弦函数组成的无穷级数\n\n$$g(t)=\\frac{1}{2}c+\\sum_{n=1}^{\\infty}a_nsin(2\\pi nft)+\\sum_{n=1}^{\\infty}b_ncos(2\\pi nft)$$\n\n其中$f=\\frac{1}{T}$是基本频率，$a_n$和$b_n$是n次谐波的正弦振幅和余弦振幅,c是常数\n\n<br/>\n\n## 1.2 带宽有限的信号\n\n我们考虑一个特殊的例子：\n\n传输ASCII字符b,这个字符被编码成一个8比特长的字节，01100010\n\n可以得到系数\n\n<center><img src=\"image-20190917211816031.png\" alt=\"image-20190917211816031\" style=\"zoom:50%;\" /></center>\n\n>  所有传输设施在传输过程中都要损失一些能量    \n>\n>  \n>\n>  如果所有傅里叶分量都等量衰减，则结果信号将会在振幅上有所减小，但形状不会变。  \n>\n>  \n\n> 但是，实际情况是，所有传输设施对于不同傅里叶分量的衰减程度并不相同，这会导致接收端接收到的信号发生**变形**。  \n>\n> 一般对导线来说，在[0,$f_c$]的频率范围，振幅在传输过程中不回衰减，而在$f_c$这个截止频率之上的所有频率的振幅都会有不同程度的减弱。    \n>\n> \n>\n> 这个在传输过程中振幅不回明显减弱的频率的宽度就称为**带宽**   \n>\n> \n>\n> 但是截止频率不是一个突变的量，不是说到达某个阈值，振幅就突然减弱了，所以通常引用的带宽是指从0到接收能量保留一半到那个频率位置\n\n带宽是传输介质的一种物理特性，取决于介质  \n\n\n\n一般将从0到某个最大频率的信号称为**基带信号**，将被搬移并占用某个更大频率范围的信号称为**通带信号**  \n\n\n\n<center><img src=\"image-20190917211449784.png\" alt=\"image-20190917211449784\" style=\"zoom: 67%;\" /></center>\n\n<br/>\n\n#### 带宽很低，会发生什么？\n\n如果带宽很低，则只有几个最低频率才能被传输\n\n假设比特率为$b$ bit/s[每秒发送8个比特]\n\n则发送8个比特所需要的时间是$\\frac{8}{b}$秒\n\n所以第一个谐波频率是$\\frac{b}{8}$赫兹\n\n如果截止频率是3000hz,则可以通过的最高谐波数为\n\n$$\\frac{3000}{\\frac{8}{b}}$$\n\n<center><img src=\"image-20190917213738345.png\" alt=\"image-20190917213738345\" style=\"zoom:50%;\" /></center>\n\n如上图所示，如果能发送的频率数很少，我们就没办法精确表示周期函数\n\n<br/>\n\n## 1.3 信道的最大数据速率\n\n<a href=\"https://blog.csdn.net/supreme42/article/details/7734763\">一些概念</a>\n\n波特率[baud rate/ symbol rate]\n\n> 波特率指的是信号每秒钟电平变化的次数，单位是*Hz*\n\n比特率\n\n> 信号每秒钟传输的数据的位数。计算机中数据都是用*0*，*1*表示的，所以比特率也就是每秒钟传输*0*和*1*的个数，单位是*bps*[*bit per second*]\n\n波特率和比特率的关系\n\n> 我们可以假设一个信号只有两个电平，那么这个时候可以把低电平理解为*“0”*，高电平理解为*“1”*，这样每秒钟电平变化的次数也就是传输的*0*，*1*个数了，即比特率 *=* 波特率。\n>\n> 但是有些信号可能不止两个电平，比如一个四电平的信号，那么每个电平就可以被理解成*“00”*，*“01”*，*“10”*，*“11”*，这样每次电平变化就能传输两位的数据了，即比特率 *= 2 ×* 波特率。\n>\n> 一般的，$bit\\,rate = buad\\,rate × log_2V$，这里V就是信号电平的个数。\n\n\n\nNyquist证明：如果一个任意信号通过一个带宽为B的低通滤波器，那么只要进行每秒2B次确切采样[一个周期采样2次]，就可以完全重构出被过滤的信号\n\n不考虑噪声，如果信号包含了V个离散等级，那么公式可以写为\n\n$$最大数据速率=2Blog_2V(bit/s)$$\n\n[最大symbol rate=$2B\\,symbol/s$]\n\n> 每秒采样2B次，也就是采样了2B个电平信号\n>\n> 也就是采样了2BlogV个bits\n\n事实上，要想重构出信号，每秒2B次采样是不够的，要多一些才够。\n\n<center><img src=\"9FC21EC72573A17040AD0FCD3C37A790.png\" alt=\"9FC21EC72573A17040AD0FCD3C37A790\" style=\"zoom:10%;\" /></center>\n\n<br/>\n\n#### 接下来考虑如果存在随机噪声\n\n$$信噪比(SNR)=\\frac{信号功率}{噪声功率}=\\frac{S}{N}$$  \n\n\n\n通常将其写成对数形式$10log_{10}\\frac{S}{N}$,单位为分贝. \n\n\n\n香农得出：对于一条带宽为B赫兹，噪声比是$\\frac{S}{N}$的有噪声通道，他的最大数据传输速率是. \n\n$$最大比特率=Blog_2{(1+\\frac{S}{N})}$$\n\n\n\n## 2 引导性传输介质[有线传输]\n\n物理层的作用是将bit从一条机器传输到另一台机器。传输所用的物理介质会在传输带宽、延迟、成本等方面产生差别。\n\n可以将介质分为\n\n* 引导性介质：如铜线、光纤\n* 非引导性介质：如卫星、激光\n\n<br/>\n\n### 2.1 磁介质\n\nNever underestimate the bandwidth of station wagon full of tapes hurtling down the highway.\n\n### 2.2 双绞线\n\n构成\n\n> 双绞线由两根铜线以螺旋状的形式紧紧地绞在一起。\n\n之所以要绞在一起，是因为这样不同电线产生的干扰波会相互抵消，显著降低电线的辐射。\n\n并且，信号以两根电线的电压差来承载，这样对外部噪声有更好的免疫力，因为噪声对两根电线的干扰是相同的，因此电压差不会改变。\n\n<br/>\n\n双绞线既可以传输模拟信号，也可以传输数字信号。\n\n传输方向：\n\n* 全双工链路[full-duplex]：可以双向同时使用的链路\n* 半双工链路half-duplex]：可以双向使用但一次只能使用一个方向\n* 单工链路[simplex]：只允许一个方向上传输\n\n双绞线的type:\n\n> – Category 5 [100Mbps, 1Gbps]\n> – Category 6 [10Gbps]\n> – Category 7 [Shielded Twisted Pair]\n\n<center><img src=\"image-20191007125121828.png\" alt=\"image-20191007125121828\" style=\"zoom:33%;\" /></center>\n\n双绞线的缺点是：\n\n传输距离远的话，信号衰减很厉害，需要使用中继器\n\n### 2.3 同轴电缆[coaxial cable]\n\n构成：\n\n> 硬的铜芯，外面包上一层绝缘材料，绝缘材料的外面是网状圆柱导体，外层导体再覆盖上一层保护塑料外套\n\n<center><img src=\"image-20191007133601513.png\" alt=\"image-20191007133601513\" style=\"zoom: 33%;\" /></center>\n\n特点：\n\n> 同轴电缆的结构和屏蔽性使得它既有很高的带宽，又有很好的抗噪性。\n>\n> 这点比双绞线更优秀，因此也比双绞线传的远\n\n\n\n### 2.4 电力线[power line]\n\n\n\n<center><img src=\"image-20191007133946196.png\" alt=\"image-20191007133946196\" style=\"zoom: 33%;\" /></center>\n\n### 2.5 Fiber optics\n\n<center><img src=\"page40image34686176.png\" alt=\"page40image34686176.jpg\" style=\"zoom:33%;\" /></center>\n\nTypes:\n\n> Multimode多模：many different rays\n>\n> Unimode单模：single rays, longer distance\n\n\n\nTransmission of light through fiber:\n\n> -Attenuation [衰减] of light through fiber in the infrared region.\n>\n> – Three wavelength bands are used for optical communication. They are centered at 0.85, 1.30, and 1.55 micros [微米].\n\n<center><img src=\"page41image34714624.png\" alt=\"page41image34714624.jpg\" style=\"zoom: 33%;\" /></center>\n\n#### <u>光缆</u>：\n\n构成：\n\n> 中间core是玻璃芯，光秒冲通过它传播\n>\n> 玻璃芯外面是一个玻璃覆盖层[cladding]，覆盖层的折射率比玻璃低，这样可以限制所有光都限制在玻璃芯内[全反射]\n>\n> 最外面是一层塑料封套[jacket],用来保护里面的玻璃包层\n>\n> 光纤通常被扎捆成束，最外面再加一层保护套\n\n<center><img src=\"page42image34731632.png\" alt=\"page42image34731632.jpg\" style=\"zoom:35%;\" /></center>\n\n信号源一半有两种光源：发光LED和半导体激光\n\n<center><img src=\"page44image34725184.png\" alt=\"page44image34725184.jpg\" style=\"zoom:33%;\" /></center>\n\n#### <u>光纤和铜线的比较</u>   \n\n– Advantages\n\n- Higher bandwidths and Low attenuation.\n- Not being affected by power surges, electromagnetic interference, or power failures.\n- Not affected by corrosive chemicals in the air.\n- Thin and lightweight.\n- Fibers do not leak light and quite difficult to tap.\n\n– Disadvantages\n\n* Less familiar technology.\n\n  要求较高的操作技能，光纤被过度弯曲容易折断\n\n* Fiber interfaces more expensive.\n\n– Conclusion: For new routes [longer ones], fiber win\n\n\n\n# 3 无线传输\n\n## 3.1电磁频谱\n\n<center><img src=\"image-20191007140913262.png\" alt=\"image-20191007140913262\" style=\"zoom:30%;\" /></center>\n\n由香农定理我们知道一个电磁波的信号能够携带的信息量与带宽成正比，从图中可以看到光纤带宽是多么宽\n\n\n\nSome spread its frequency over a *wide frequency band*[spread spectrum, 扩频].\n\n– Frequency hopping spread spectrum [military, 802.11, Bluetooth]\n\n– Direct sequence spread spectrum [3G mobile phones]\n\n– UWB [UltraWideBand]\n\n\n\n<center><img src=\"page49image35151168.png\" alt=\"page49image35151168.jpg\" style=\"zoom:33%;\" /></center>\n\n###  3.2 Radar\n\n### 3.3 Radio transmission\n\n[a] In the VLF, LF, and MF bands, radio waves follow the curvature of the earth.\n\n[b] In the HF band, they bounce off the ionosphere [电离层].\n\n<center><img src=\"page52image35155536.png\" alt=\"page52image35155536.jpg\" style=\"zoom:33%;\" /></center>\n\n### 3.4 Microwave transmission\n\n\n\n# 4 数字调制与多路复用\n\n#### 什么是数字调制？  \n\n> 比特与代表他们的信号之间的转换过程称为**数字调制**\n\n<br/>\n\n我们首先来看如何把**比特直接转换成信号**的方案，这些方案导致了**基带传输**\n\n> 基带传输是指：信号的传输占有传输介质上从0到最大值之间的全部频率\n\n然后我们看通过调节载波信号的幅值、相位或者频率来运载比特的模式，这些方案导致了**通带传输**\n\n> 通带传输是指：信号占据了以载波信号频率为中心的一段频带\n\n\n\n<br/>\n\n信道通常被多个信号共享，这种信道的共享形式称为**多路复用技术**\n\n多路复用技术可以通过：时分复用、频分复用、码分复用 实现\n\n\n\n## 4.1 基带传输\n\n<center><img src=\"image-20200101212239647.png\" alt=\"image-20200101212239647\" style=\"zoom:50%;\" /></center>\n\n\n### NRZ\n\n翻转代表1，不翻转代表0\n\n一旦NRZ信号被发出去，它沿线缆传播。另一端的接收器以一定周期对信号采样，然后把采样信号转换成比特。\n\nProblem:\n\n> a long run of 0s or 1s leaves the signal unchanged. \n>\n> After a while it is hard to tell the bits apart, as 15 zeros look much like 16 zeros unless you have a very accurate clock.\n\nAccurate clock: \n\n>  For all schemes that encode bits into symbols, the receiver must know **when one symbol ends and the next symbol begins** to correctly decode the bits.\n\n\n\n一般来说，accurate clock是很难做到的，那么我们该怎么办呢？\n\n#### <u>Clock Recovery</u>\n\n- 一种方法，额外拉一根时钟线，给接收器发送单独的时钟信号\n\n  这个方法不好，因为这很浪费，用一根额外的线来发送时钟，还不如用它来发送数据呢\n\n\n\n- A clever trick is to mix the clock signal with the data signal by XORing them together so that no extra line is needed.→**<u>Manchester Encoding</u>**\n\n  \n\n  **<u>Manchester Encoding</u>**的方法是，时钟的频率是比特率的两倍，也就是在一个bit 时间内，时钟会产生一次跳变。时钟XOR bit，产生输出\n\n  如上图所示\n\n  >  第一个bit时间t内，传输的bit是1，时钟在[0,t/2]内是0，与bit 1异或，编码成1; \n  >\n  >  在[t/2, t]内时钟跳变到1，与bit 0异或，编码成0.\n  >\n  >  因此我们在第一个bit时间看到的编码先是1后翻转到0\n\n  问题：需要两倍于NRZ的带宽，一个bit时间他要传输两个信号\n\n- As a step in the right direction, we can simplify the situation by encoding a 1 as a transition and a 0 as no transition, or vice versa.→**<u>NRZI</u>** [Non-Return-to- Zero Inverted,不归零倒相制, Used in USB]\n\n  \n\n  **<u>NRZI</u>**方法是：编码有跳变表示1，编码无跳变表示0\n\n  这样，再长的一串1都不会产生时钟恢复问题；但是一长串的0仍然有问题\n\n  \n\n* Problem: long runs of 0s?→**<u>4B/5B</u>**\n\n  **<u>4B/5B</u>**的方法是：每4个bits被映射成一个5bits的模式，映射按照一张固定的转换表进行，5bits的选择使得映射结果永远不会出现连续3个0\n\n  <center><img src=\"page63image36690640.png\" alt=\"page63image36690640.png\" style=\"zoom:33%;\" /></center>\n\n  问题：增加了25%的带宽\n\n\n<br/>\n\n## 4.2 通带传输\n\n一般情况下，我们在一个信道上发送信息使用的频率范围并不是从0开始的。对于无线信道来说，发送非常低频率的信号不切实际，因为天线的大小与信号的波长成比例，低频信号需要很大的天线。\n\n发射频率一般是由监管约束和避免干扰的需要决定的\n\n### 4.2.1 数字调试\n\n<center><img src=\"image-20191007153614734.png\" alt=\"image-20191007153614734\" style=\"zoom:50%;\" /></center>\n\n#### A 幅移键控[ASK, Amplitude Shift Keying]\n\n通过采用不同的振幅表示0和1\n\n> 如上图(b)所示，这里采用非零幅值和一个零幅值\n\n#### B 频移键控[FSK, Frequency Shift Keying]\n\n采用两个或更多的频率\n\n> 如上图[c]所示，使用两个频率表示0和1\n\n#### C 相移键控[PSK, Phase Shift Keying]\n\n在每个符号的周期中，系统把载波波形偏移0度或者180度。由于只有两个相位，这种调制方法称为二进制相移键控[BPSK]，这里的二进制表示的是两个符号\n\n> 如上图[d]所示，使用两种相位量表示0和1\n\n当然，我们可以用更多数量的偏移。比如用4个偏移，45，135，225，315，那么每个符号可以表示2bit。这种称为正交相移键控[QPSK, Quadrature]\n\n\n\n#### D 集大成者\n\n我们可以综合以上调制方式，使得每个符号表示更多的bit.\n\n我们选择综合振幅和相位。为什么不考虑频率呢？因为频率和相位有关\n\n<br/>\n\n我们给出星座图\n\n>  一个点的相位是以他为起点到原点的线与x轴正方向的夹角\n>\n>  一个点的振幅是他到原点的距离\n\n<center><img src=\"image-20191007154637608.png\" alt=\"image-20191007154637608\" style=\"zoom: 33%;\" /></center>\n\n> 如图[b], QAM-16：\n>\n> 一共有16个符号，16个符号可以表示出4bits的所有组合\n>\n> 因此一个符号可以传输4个比特\n>\n> 同样，如图[c], QAM-64\n>\n> 一共有64个符号，一个符号可以传输6bits [..$2^6=64$]\n\n\n\n## 4.3 Multiplexing\n\n### 4.3.1 频分复用[FDM,Frequency Division Multiplexing]\n\n利用通带传输的优势使多个用户共享一个信道。\n\nFDM将频谱分成几个频段，每个用户完全拥有其中一个频段来发送自己的信号\n\n<center><img src=\"image-20191005234836200.png\" alt=\"image-20191005234836200\" style=\"zoom: 40%;\" /></center>\n\n#### 正交频分复用[OFDM,orthogonal]\n\n信道带宽被分成许多独立发送数据的子载波，每个子载波之间频率的间隔是$\\Delta f$\n\n每个子载波发出的信号虽然可以扩散到相邻子载波，但是每个子载波的频率响应被设计成在相邻子载波的中心为0。因此，可以在子载波中心频率采样而不会收到其邻居的干扰\n\n<center><img src=\"image-20191007160446233.png\" alt=\"image-20191007160446233\" style=\"zoom:40%;\" /></center>\n\n### 4.3.2 时分复用\n\n用户以循环的方式轮流工作。每个用户周期性获得整个带宽非常短的一个时间\n\n<center><img src=\"image-20191005234914576.png\" alt=\"image-20191005234914576\" style=\"zoom:40%;\" /></center>\n\n### 4.3.3 码分复用\n\n传输一个bit的时间被划分成m个更短的时间间隔，称这个时间间隔为<u>码片</u>[chip]。每个站分配得到唯一的m位码，称为 <u>码片序列</u>\n\n如果要发送bit 1,站就发送分配给他的码片序列；如果要发送bit 0,站就发送分配给他的码片序列的反码。\n\n> m=8,即一个bit时间传输的码片序列是8位的。\n>\n> 如果A站分配到的码片序列为[-1-1-1+1+1-1+1+1]\n>\n> 那么如果A想发送bit 1，就发送码片序列[-1-1-1+1+1-1+1+1]\n>\n> 如果A想发送 bit 0, 就发送码片序列[+1+1+1-1-1+1-1-1]\n\n\n\n码片序列的要求：\n\n>  所有的码片序列都要两两正交\n\n<center><img src=\"image-20191006000007082.png\" alt=\"image-20191006000007082\" style=\"zoom:35%;\" /></center>\n\nA,B,C,D 是发送信号的4个station，他们的码片序列两两正交。\n\nS1,S2,...S6是6个例子,S6表示这个比特时间A,B,D发送了bit 1，C发送了bit 0。但是我们收到的是S6这个不同站的信号都混淆在一起的整体。怎么把C站发送的比特提取出来呢？\n\n方法是S6与C做归一化内积。即$S_6\\cdot C=[2-2+0-2+0-2-4+0]/8=-1$\n\n因此我们知道在S6所处的这个比特时间内，C站传输了bit 0。\n\n> 内积结果\n>\n> =1 说明该站发送了 bit 1\n>\n> =-1说明该站发送了bit 0\n>\n> =0 说明该站没有发送数据\n\n\n\n# 5 公共电话交换网络\n\nHow to connect computers?\n\n> For small number of computers and a local area\n>\n> * LAN \n>\n> For a large number of computers or a wide area or lacking right of way\n>\n> * PSTN [Public Switched Telephone Network]\n\n## 5.1 Structure of the Telephone System\n\n\n\n电话网络的变迁\n\n<center><img src=\"image-20191007161859322.png\" alt=\"image-20191007161859322\" style=\"zoom:40%;\" /></center>\n\nBell system model\n\nLevels:\n\n* End office 本地局\n* toll office 长途局\n* primary office 初级局\n* Sectional office 地区局\n* Regional office 区域局\n\nMajor components \n\n- Local loops [本地回路]: 进入家庭和公司的模拟双绞线\n\n- Trunks [干线]: 连接交换局的数字光纤\n\n- Switching offices [交换局]:电话呼叫在这里从一条中继线被接入另一条中继线\n\n\n\n<center><img src=\"image-2019100742053.png\" alt=\"屏幕快照 2019-10-07 下午4.20.53\" style=\"zoom:50%;\" /></center>\n\n## 5.1 本地回路：调制解调器、ADSL、光纤\n\n### A 电话调制解调器\n\n要在物理信道上发送比特，必须把比特转换为可以在信道上传输的模拟信号。这个方式我们在上一节已经学过。\n\n在信号的另一端，模拟信号要被还原成比特\n\n<br/>\n\n**<u>调制解调器</u>**\n\n是什么\n\n> 执行数字比特流和模拟信号流之间转换的设备就是调制解调器[modem]\n>\n> 调制解调器是调制器[modulator]和解调器[demodulator]的缩写\n\n<center><img src=\"page102image35767104.png\" alt=\"page102image35767104.png\" style=\"zoom:70%;\" /> </center>","slug":"PhysicalLayer","published":1,"updated":"2020-08-11T08:46:05.273Z","_id":"ckdpp3i1500000ruf62mqhhxz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-数据通信的理论基础\"><a href=\"#1-数据通信的理论基础\" class=\"headerlink\" title=\"1 数据通信的理论基础\"></a>1 数据通信的理论基础</h1><h2 id=\"1-1傅里叶分析\"><a href=\"#1-1傅里叶分析\" class=\"headerlink\" title=\"1.1傅里叶分析\"></a>1.1傅里叶分析</h2><p>任何一个行为合理周期为T的函数g(t)，都可以表示成正弦函数和余弦函数组成的无穷级数</p>\n<script type=\"math/tex; mode=display\">g(t)=\\frac{1}{2}c+\\sum_{n=1}^{\\infty}a_nsin(2\\pi nft)+\\sum_{n=1}^{\\infty}b_ncos(2\\pi nft)</script><p>其中$f=\\frac{1}{T}$是基本频率，$a_n$和$b_n$是n次谐波的正弦振幅和余弦振幅,c是常数</p>\n<p><br/></p>\n<h2 id=\"1-2-带宽有限的信号\"><a href=\"#1-2-带宽有限的信号\" class=\"headerlink\" title=\"1.2 带宽有限的信号\"></a>1.2 带宽有限的信号</h2><p>我们考虑一个特殊的例子：</p>\n<p>传输ASCII字符b,这个字符被编码成一个8比特长的字节，01100010</p>\n<p>可以得到系数</p>\n<center><img src=\"image-20190917211816031.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917211816031\" style=\"zoom:50%;\" /></center>\n\n<blockquote>\n<p> 所有传输设施在传输过程中都要损失一些能量    </p>\n<p> 如果所有傅里叶分量都等量衰减，则结果信号将会在振幅上有所减小，但形状不会变。  </p>\n<p>但是，实际情况是，所有传输设施对于不同傅里叶分量的衰减程度并不相同，这会导致接收端接收到的信号发生<strong>变形</strong>。  </p>\n<p>一般对导线来说，在[0,$f_c$]的频率范围，振幅在传输过程中不回衰减，而在$f_c$这个截止频率之上的所有频率的振幅都会有不同程度的减弱。    </p>\n<p>这个在传输过程中振幅不回明显减弱的频率的宽度就称为<strong>带宽</strong>   </p>\n<p>但是截止频率不是一个突变的量，不是说到达某个阈值，振幅就突然减弱了，所以通常引用的带宽是指从0到接收能量保留一半到那个频率位置</p>\n</blockquote>\n<p>带宽是传输介质的一种物理特性，取决于介质  </p>\n<p>一般将从0到某个最大频率的信号称为<strong>基带信号</strong>，将被搬移并占用某个更大频率范围的信号称为<strong>通带信号</strong>  </p>\n<center><img src=\"image-20190917211449784.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917211449784\" style=\"zoom: 67%;\" /></center>\n\n<p><br/></p>\n<h4 id=\"带宽很低，会发生什么？\"><a href=\"#带宽很低，会发生什么？\" class=\"headerlink\" title=\"带宽很低，会发生什么？\"></a>带宽很低，会发生什么？</h4><p>如果带宽很低，则只有几个最低频率才能被传输</p>\n<p>假设比特率为$b$ bit/s[每秒发送8个比特]</p>\n<p>则发送8个比特所需要的时间是$\\frac{8}{b}$秒</p>\n<p>所以第一个谐波频率是$\\frac{b}{8}$赫兹</p>\n<p>如果截止频率是3000hz,则可以通过的最高谐波数为</p>\n<script type=\"math/tex; mode=display\">\\frac{3000}{\\frac{8}{b}}</script><center><img src=\"image-20190917213738345.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917213738345\" style=\"zoom:50%;\" /></center>\n\n<p>如上图所示，如果能发送的频率数很少，我们就没办法精确表示周期函数</p>\n<p><br/></p>\n<h2 id=\"1-3-信道的最大数据速率\"><a href=\"#1-3-信道的最大数据速率\" class=\"headerlink\" title=\"1.3 信道的最大数据速率\"></a>1.3 信道的最大数据速率</h2><p><a href=\"https://blog.csdn.net/supreme42/article/details/7734763\" target=\"_blank\" rel=\"noopener\">一些概念</a></p>\n<p>波特率[baud rate/ symbol rate]</p>\n<blockquote>\n<p>波特率指的是信号每秒钟电平变化的次数，单位是<em>Hz</em></p>\n</blockquote>\n<p>比特率</p>\n<blockquote>\n<p>信号每秒钟传输的数据的位数。计算机中数据都是用<em>0</em>，<em>1</em>表示的，所以比特率也就是每秒钟传输<em>0</em>和<em>1</em>的个数，单位是<em>bps</em>[<em>bit per second</em>]</p>\n</blockquote>\n<p>波特率和比特率的关系</p>\n<blockquote>\n<p>我们可以假设一个信号只有两个电平，那么这个时候可以把低电平理解为<em>“0”</em>，高电平理解为<em>“1”</em>，这样每秒钟电平变化的次数也就是传输的<em>0</em>，<em>1</em>个数了，即比特率 <em>=</em> 波特率。</p>\n<p>但是有些信号可能不止两个电平，比如一个四电平的信号，那么每个电平就可以被理解成<em>“00”</em>，<em>“01”</em>，<em>“10”</em>，<em>“11”</em>，这样每次电平变化就能传输两位的数据了，即比特率 <em>= 2 ×</em> 波特率。</p>\n<p>一般的，$bit\\,rate = buad\\,rate × log_2V$，这里V就是信号电平的个数。</p>\n</blockquote>\n<p>Nyquist证明：如果一个任意信号通过一个带宽为B的低通滤波器，那么只要进行每秒2B次确切采样[一个周期采样2次]，就可以完全重构出被过滤的信号</p>\n<p>不考虑噪声，如果信号包含了V个离散等级，那么公式可以写为</p>\n<script type=\"math/tex; mode=display\">最大数据速率=2Blog_2V(bit/s)</script><p>[最大symbol rate=$2B\\,symbol/s$]</p>\n<blockquote>\n<p>每秒采样2B次，也就是采样了2B个电平信号</p>\n<p>也就是采样了2BlogV个bits</p>\n</blockquote>\n<p>事实上，要想重构出信号，每秒2B次采样是不够的，要多一些才够。</p>\n<center><img src=\"9FC21EC72573A17040AD0FCD3C37A790.png\" srcset=\"/img/loading.gif\" alt=\"9FC21EC72573A17040AD0FCD3C37A790\" style=\"zoom:10%;\" /></center>\n\n<p><br/></p>\n<h4 id=\"接下来考虑如果存在随机噪声\"><a href=\"#接下来考虑如果存在随机噪声\" class=\"headerlink\" title=\"接下来考虑如果存在随机噪声\"></a>接下来考虑如果存在随机噪声</h4><script type=\"math/tex; mode=display\">信噪比(SNR)=\\frac{信号功率}{噪声功率}=\\frac{S}{N}</script><p>通常将其写成对数形式$10log_{10}\\frac{S}{N}$,单位为分贝. </p>\n<p>香农得出：对于一条带宽为B赫兹，噪声比是$\\frac{S}{N}$的有噪声通道，他的最大数据传输速率是. </p>\n<script type=\"math/tex; mode=display\">最大比特率=Blog_2{(1+\\frac{S}{N})}</script><h2 id=\"2-引导性传输介质-有线传输\"><a href=\"#2-引导性传输介质-有线传输\" class=\"headerlink\" title=\"2 引导性传输介质[有线传输]\"></a>2 引导性传输介质[有线传输]</h2><p>物理层的作用是将bit从一条机器传输到另一台机器。传输所用的物理介质会在传输带宽、延迟、成本等方面产生差别。</p>\n<p>可以将介质分为</p>\n<ul>\n<li>引导性介质：如铜线、光纤</li>\n<li>非引导性介质：如卫星、激光</li>\n</ul>\n<p><br/></p>\n<h3 id=\"2-1-磁介质\"><a href=\"#2-1-磁介质\" class=\"headerlink\" title=\"2.1 磁介质\"></a>2.1 磁介质</h3><p>Never underestimate the bandwidth of station wagon full of tapes hurtling down the highway.</p>\n<h3 id=\"2-2-双绞线\"><a href=\"#2-2-双绞线\" class=\"headerlink\" title=\"2.2 双绞线\"></a>2.2 双绞线</h3><p>构成</p>\n<blockquote>\n<p>双绞线由两根铜线以螺旋状的形式紧紧地绞在一起。</p>\n</blockquote>\n<p>之所以要绞在一起，是因为这样不同电线产生的干扰波会相互抵消，显著降低电线的辐射。</p>\n<p>并且，信号以两根电线的电压差来承载，这样对外部噪声有更好的免疫力，因为噪声对两根电线的干扰是相同的，因此电压差不会改变。</p>\n<p><br/></p>\n<p>双绞线既可以传输模拟信号，也可以传输数字信号。</p>\n<p>传输方向：</p>\n<ul>\n<li>全双工链路[full-duplex]：可以双向同时使用的链路</li>\n<li>半双工链路half-duplex]：可以双向使用但一次只能使用一个方向</li>\n<li>单工链路[simplex]：只允许一个方向上传输</li>\n</ul>\n<p>双绞线的type:</p>\n<blockquote>\n<p>– Category 5 [100Mbps, 1Gbps]<br>– Category 6 [10Gbps]<br>– Category 7 [Shielded Twisted Pair]</p>\n</blockquote>\n<center><img src=\"image-20191007125121828.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007125121828\" style=\"zoom:33%;\" /></center>\n\n<p>双绞线的缺点是：</p>\n<p>传输距离远的话，信号衰减很厉害，需要使用中继器</p>\n<h3 id=\"2-3-同轴电缆-coaxial-cable\"><a href=\"#2-3-同轴电缆-coaxial-cable\" class=\"headerlink\" title=\"2.3 同轴电缆[coaxial cable]\"></a>2.3 同轴电缆[coaxial cable]</h3><p>构成：</p>\n<blockquote>\n<p>硬的铜芯，外面包上一层绝缘材料，绝缘材料的外面是网状圆柱导体，外层导体再覆盖上一层保护塑料外套</p>\n</blockquote>\n<center><img src=\"image-20191007133601513.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007133601513\" style=\"zoom: 33%;\" /></center>\n\n<p>特点：</p>\n<blockquote>\n<p>同轴电缆的结构和屏蔽性使得它既有很高的带宽，又有很好的抗噪性。</p>\n<p>这点比双绞线更优秀，因此也比双绞线传的远</p>\n</blockquote>\n<h3 id=\"2-4-电力线-power-line\"><a href=\"#2-4-电力线-power-line\" class=\"headerlink\" title=\"2.4 电力线[power line]\"></a>2.4 电力线[power line]</h3><center><img src=\"image-20191007133946196.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007133946196\" style=\"zoom: 33%;\" /></center>\n\n<h3 id=\"2-5-Fiber-optics\"><a href=\"#2-5-Fiber-optics\" class=\"headerlink\" title=\"2.5 Fiber optics\"></a>2.5 Fiber optics</h3><center><img src=\"page40image34686176.png\" srcset=\"/img/loading.gif\" alt=\"page40image34686176.jpg\" style=\"zoom:33%;\" /></center>\n\n<p>Types:</p>\n<blockquote>\n<p>Multimode多模：many different rays</p>\n<p>Unimode单模：single rays, longer distance</p>\n</blockquote>\n<p>Transmission of light through fiber:</p>\n<blockquote>\n<p>-Attenuation [衰减] of light through fiber in the infrared region.</p>\n<p>– Three wavelength bands are used for optical communication. They are centered at 0.85, 1.30, and 1.55 micros [微米].</p>\n</blockquote>\n<center><img src=\"page41image34714624.png\" srcset=\"/img/loading.gif\" alt=\"page41image34714624.jpg\" style=\"zoom: 33%;\" /></center>\n\n<h4 id=\"光缆：\"><a href=\"#光缆：\" class=\"headerlink\" title=\"光缆：\"></a><u>光缆</u>：</h4><p>构成：</p>\n<blockquote>\n<p>中间core是玻璃芯，光秒冲通过它传播</p>\n<p>玻璃芯外面是一个玻璃覆盖层[cladding]，覆盖层的折射率比玻璃低，这样可以限制所有光都限制在玻璃芯内[全反射]</p>\n<p>最外面是一层塑料封套[jacket],用来保护里面的玻璃包层</p>\n<p>光纤通常被扎捆成束，最外面再加一层保护套</p>\n</blockquote>\n<center><img src=\"page42image34731632.png\" srcset=\"/img/loading.gif\" alt=\"page42image34731632.jpg\" style=\"zoom:35%;\" /></center>\n\n<p>信号源一半有两种光源：发光LED和半导体激光</p>\n<center><img src=\"page44image34725184.png\" srcset=\"/img/loading.gif\" alt=\"page44image34725184.jpg\" style=\"zoom:33%;\" /></center>\n\n<h4 id=\"光纤和铜线的比较\"><a href=\"#光纤和铜线的比较\" class=\"headerlink\" title=\"光纤和铜线的比较\"></a><u>光纤和铜线的比较</u></h4><p>– Advantages</p>\n<ul>\n<li>Higher bandwidths and Low attenuation.</li>\n<li>Not being affected by power surges, electromagnetic interference, or power failures.</li>\n<li>Not affected by corrosive chemicals in the air.</li>\n<li>Thin and lightweight.</li>\n<li>Fibers do not leak light and quite difficult to tap.</li>\n</ul>\n<p>– Disadvantages</p>\n<ul>\n<li><p>Less familiar technology.</p>\n<p>要求较高的操作技能，光纤被过度弯曲容易折断</p>\n</li>\n<li><p>Fiber interfaces more expensive.</p>\n</li>\n</ul>\n<p>– Conclusion: For new routes [longer ones], fiber win</p>\n<h1 id=\"3-无线传输\"><a href=\"#3-无线传输\" class=\"headerlink\" title=\"3 无线传输\"></a>3 无线传输</h1><h2 id=\"3-1电磁频谱\"><a href=\"#3-1电磁频谱\" class=\"headerlink\" title=\"3.1电磁频谱\"></a>3.1电磁频谱</h2><center><img src=\"image-20191007140913262.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007140913262\" style=\"zoom:30%;\" /></center>\n\n<p>由香农定理我们知道一个电磁波的信号能够携带的信息量与带宽成正比，从图中可以看到光纤带宽是多么宽</p>\n<p>Some spread its frequency over a <em>wide frequency band</em>[spread spectrum, 扩频].</p>\n<p>– Frequency hopping spread spectrum [military, 802.11, Bluetooth]</p>\n<p>– Direct sequence spread spectrum [3G mobile phones]</p>\n<p>– UWB [UltraWideBand]</p>\n<center><img src=\"page49image35151168.png\" srcset=\"/img/loading.gif\" alt=\"page49image35151168.jpg\" style=\"zoom:33%;\" /></center>\n\n<h3 id=\"3-2-Radar\"><a href=\"#3-2-Radar\" class=\"headerlink\" title=\"3.2 Radar\"></a>3.2 Radar</h3><h3 id=\"3-3-Radio-transmission\"><a href=\"#3-3-Radio-transmission\" class=\"headerlink\" title=\"3.3 Radio transmission\"></a>3.3 Radio transmission</h3><p>[a] In the VLF, LF, and MF bands, radio waves follow the curvature of the earth.</p>\n<p>[b] In the HF band, they bounce off the ionosphere [电离层].</p>\n<center><img src=\"page52image35155536.png\" srcset=\"/img/loading.gif\" alt=\"page52image35155536.jpg\" style=\"zoom:33%;\" /></center>\n\n<h3 id=\"3-4-Microwave-transmission\"><a href=\"#3-4-Microwave-transmission\" class=\"headerlink\" title=\"3.4 Microwave transmission\"></a>3.4 Microwave transmission</h3><h1 id=\"4-数字调制与多路复用\"><a href=\"#4-数字调制与多路复用\" class=\"headerlink\" title=\"4 数字调制与多路复用\"></a>4 数字调制与多路复用</h1><h4 id=\"什么是数字调制？\"><a href=\"#什么是数字调制？\" class=\"headerlink\" title=\"什么是数字调制？\"></a>什么是数字调制？</h4><blockquote>\n<p>比特与代表他们的信号之间的转换过程称为<strong>数字调制</strong></p>\n</blockquote>\n<p><br/></p>\n<p>我们首先来看如何把<strong>比特直接转换成信号</strong>的方案，这些方案导致了<strong>基带传输</strong></p>\n<blockquote>\n<p>基带传输是指：信号的传输占有传输介质上从0到最大值之间的全部频率</p>\n</blockquote>\n<p>然后我们看通过调节载波信号的幅值、相位或者频率来运载比特的模式，这些方案导致了<strong>通带传输</strong></p>\n<blockquote>\n<p>通带传输是指：信号占据了以载波信号频率为中心的一段频带</p>\n</blockquote>\n<p><br/></p>\n<p>信道通常被多个信号共享，这种信道的共享形式称为<strong>多路复用技术</strong></p>\n<p>多路复用技术可以通过：时分复用、频分复用、码分复用 实现</p>\n<h2 id=\"4-1-基带传输\"><a href=\"#4-1-基带传输\" class=\"headerlink\" title=\"4.1 基带传输\"></a>4.1 基带传输</h2><center><img src=\"image-20200101212239647.png\" srcset=\"/img/loading.gif\" alt=\"image-20200101212239647\" style=\"zoom:50%;\" /></center>\n\n\n<h3 id=\"NRZ\"><a href=\"#NRZ\" class=\"headerlink\" title=\"NRZ\"></a>NRZ</h3><p>翻转代表1，不翻转代表0</p>\n<p>一旦NRZ信号被发出去，它沿线缆传播。另一端的接收器以一定周期对信号采样，然后把采样信号转换成比特。</p>\n<p>Problem:</p>\n<blockquote>\n<p>a long run of 0s or 1s leaves the signal unchanged. </p>\n<p>After a while it is hard to tell the bits apart, as 15 zeros look much like 16 zeros unless you have a very accurate clock.</p>\n</blockquote>\n<p>Accurate clock: </p>\n<blockquote>\n<p> For all schemes that encode bits into symbols, the receiver must know <strong>when one symbol ends and the next symbol begins</strong> to correctly decode the bits.</p>\n</blockquote>\n<p>一般来说，accurate clock是很难做到的，那么我们该怎么办呢？</p>\n<h4 id=\"Clock-Recovery\"><a href=\"#Clock-Recovery\" class=\"headerlink\" title=\"Clock Recovery\"></a><u>Clock Recovery</u></h4><ul>\n<li><p>一种方法，额外拉一根时钟线，给接收器发送单独的时钟信号</p>\n<p>这个方法不好，因为这很浪费，用一根额外的线来发送时钟，还不如用它来发送数据呢</p>\n</li>\n</ul>\n<ul>\n<li>A clever trick is to mix the clock signal with the data signal by XORing them together so that no extra line is needed.→<strong><u>Manchester Encoding</u></strong></li>\n</ul>\n<p>  <strong><u>Manchester Encoding</u></strong>的方法是，时钟的频率是比特率的两倍，也就是在一个bit 时间内，时钟会产生一次跳变。时钟XOR bit，产生输出</p>\n<p>  如上图所示</p>\n<blockquote>\n<p> 第一个bit时间t内，传输的bit是1，时钟在[0,t/2]内是0，与bit 1异或，编码成1; </p>\n<p> 在[t/2, t]内时钟跳变到1，与bit 0异或，编码成0.</p>\n<p> 因此我们在第一个bit时间看到的编码先是1后翻转到0</p>\n</blockquote>\n<p>  问题：需要两倍于NRZ的带宽，一个bit时间他要传输两个信号</p>\n<ul>\n<li>As a step in the right direction, we can simplify the situation by encoding a 1 as a transition and a 0 as no transition, or vice versa.→<strong><u>NRZI</u></strong> [Non-Return-to- Zero Inverted,不归零倒相制, Used in USB]</li>\n</ul>\n<p>  <strong><u>NRZI</u></strong>方法是：编码有跳变表示1，编码无跳变表示0</p>\n<p>  这样，再长的一串1都不会产生时钟恢复问题；但是一长串的0仍然有问题</p>\n<ul>\n<li><p>Problem: long runs of 0s?→<strong><u>4B/5B</u></strong></p>\n<p><strong><u>4B/5B</u></strong>的方法是：每4个bits被映射成一个5bits的模式，映射按照一张固定的转换表进行，5bits的选择使得映射结果永远不会出现连续3个0</p>\n<center><img src=\"page63image36690640.png\" srcset=\"/img/loading.gif\" alt=\"page63image36690640.png\" style=\"zoom:33%;\" /></center>\n\n<p>问题：增加了25%的带宽</p>\n</li>\n</ul>\n<p><br/></p>\n<h2 id=\"4-2-通带传输\"><a href=\"#4-2-通带传输\" class=\"headerlink\" title=\"4.2 通带传输\"></a>4.2 通带传输</h2><p>一般情况下，我们在一个信道上发送信息使用的频率范围并不是从0开始的。对于无线信道来说，发送非常低频率的信号不切实际，因为天线的大小与信号的波长成比例，低频信号需要很大的天线。</p>\n<p>发射频率一般是由监管约束和避免干扰的需要决定的</p>\n<h3 id=\"4-2-1-数字调试\"><a href=\"#4-2-1-数字调试\" class=\"headerlink\" title=\"4.2.1 数字调试\"></a>4.2.1 数字调试</h3><center><img src=\"image-20191007153614734.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007153614734\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"A-幅移键控-ASK-Amplitude-Shift-Keying\"><a href=\"#A-幅移键控-ASK-Amplitude-Shift-Keying\" class=\"headerlink\" title=\"A 幅移键控[ASK, Amplitude Shift Keying]\"></a>A 幅移键控[ASK, Amplitude Shift Keying]</h4><p>通过采用不同的振幅表示0和1</p>\n<blockquote>\n<p>如上图(b)所示，这里采用非零幅值和一个零幅值</p>\n</blockquote>\n<h4 id=\"B-频移键控-FSK-Frequency-Shift-Keying\"><a href=\"#B-频移键控-FSK-Frequency-Shift-Keying\" class=\"headerlink\" title=\"B 频移键控[FSK, Frequency Shift Keying]\"></a>B 频移键控[FSK, Frequency Shift Keying]</h4><p>采用两个或更多的频率</p>\n<blockquote>\n<p>如上图[c]所示，使用两个频率表示0和1</p>\n</blockquote>\n<h4 id=\"C-相移键控-PSK-Phase-Shift-Keying\"><a href=\"#C-相移键控-PSK-Phase-Shift-Keying\" class=\"headerlink\" title=\"C 相移键控[PSK, Phase Shift Keying]\"></a>C 相移键控[PSK, Phase Shift Keying]</h4><p>在每个符号的周期中，系统把载波波形偏移0度或者180度。由于只有两个相位，这种调制方法称为二进制相移键控[BPSK]，这里的二进制表示的是两个符号</p>\n<blockquote>\n<p>如上图[d]所示，使用两种相位量表示0和1</p>\n</blockquote>\n<p>当然，我们可以用更多数量的偏移。比如用4个偏移，45，135，225，315，那么每个符号可以表示2bit。这种称为正交相移键控[QPSK, Quadrature]</p>\n<h4 id=\"D-集大成者\"><a href=\"#D-集大成者\" class=\"headerlink\" title=\"D 集大成者\"></a>D 集大成者</h4><p>我们可以综合以上调制方式，使得每个符号表示更多的bit.</p>\n<p>我们选择综合振幅和相位。为什么不考虑频率呢？因为频率和相位有关</p>\n<p><br/></p>\n<p>我们给出星座图</p>\n<blockquote>\n<p> 一个点的相位是以他为起点到原点的线与x轴正方向的夹角</p>\n<p> 一个点的振幅是他到原点的距离</p>\n</blockquote>\n<center><img src=\"image-20191007154637608.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007154637608\" style=\"zoom: 33%;\" /></center>\n\n<blockquote>\n<p>如图[b], QAM-16：</p>\n<p>一共有16个符号，16个符号可以表示出4bits的所有组合</p>\n<p>因此一个符号可以传输4个比特</p>\n<p>同样，如图[c], QAM-64</p>\n<p>一共有64个符号，一个符号可以传输6bits [..$2^6=64$]</p>\n</blockquote>\n<h2 id=\"4-3-Multiplexing\"><a href=\"#4-3-Multiplexing\" class=\"headerlink\" title=\"4.3 Multiplexing\"></a>4.3 Multiplexing</h2><h3 id=\"4-3-1-频分复用-FDM-Frequency-Division-Multiplexing\"><a href=\"#4-3-1-频分复用-FDM-Frequency-Division-Multiplexing\" class=\"headerlink\" title=\"4.3.1 频分复用[FDM,Frequency Division Multiplexing]\"></a>4.3.1 频分复用[FDM,Frequency Division Multiplexing]</h3><p>利用通带传输的优势使多个用户共享一个信道。</p>\n<p>FDM将频谱分成几个频段，每个用户完全拥有其中一个频段来发送自己的信号</p>\n<center><img src=\"image-20191005234836200.png\" srcset=\"/img/loading.gif\" alt=\"image-20191005234836200\" style=\"zoom: 40%;\" /></center>\n\n<h4 id=\"正交频分复用-OFDM-orthogonal\"><a href=\"#正交频分复用-OFDM-orthogonal\" class=\"headerlink\" title=\"正交频分复用[OFDM,orthogonal]\"></a>正交频分复用[OFDM,orthogonal]</h4><p>信道带宽被分成许多独立发送数据的子载波，每个子载波之间频率的间隔是$\\Delta f$</p>\n<p>每个子载波发出的信号虽然可以扩散到相邻子载波，但是每个子载波的频率响应被设计成在相邻子载波的中心为0。因此，可以在子载波中心频率采样而不会收到其邻居的干扰</p>\n<center><img src=\"image-20191007160446233.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007160446233\" style=\"zoom:40%;\" /></center>\n\n<h3 id=\"4-3-2-时分复用\"><a href=\"#4-3-2-时分复用\" class=\"headerlink\" title=\"4.3.2 时分复用\"></a>4.3.2 时分复用</h3><p>用户以循环的方式轮流工作。每个用户周期性获得整个带宽非常短的一个时间</p>\n<center><img src=\"image-20191005234914576.png\" srcset=\"/img/loading.gif\" alt=\"image-20191005234914576\" style=\"zoom:40%;\" /></center>\n\n<h3 id=\"4-3-3-码分复用\"><a href=\"#4-3-3-码分复用\" class=\"headerlink\" title=\"4.3.3 码分复用\"></a>4.3.3 码分复用</h3><p>传输一个bit的时间被划分成m个更短的时间间隔，称这个时间间隔为<u>码片</u>[chip]。每个站分配得到唯一的m位码，称为 <u>码片序列</u></p>\n<p>如果要发送bit 1,站就发送分配给他的码片序列；如果要发送bit 0,站就发送分配给他的码片序列的反码。</p>\n<blockquote>\n<p>m=8,即一个bit时间传输的码片序列是8位的。</p>\n<p>如果A站分配到的码片序列为[-1-1-1+1+1-1+1+1]</p>\n<p>那么如果A想发送bit 1，就发送码片序列[-1-1-1+1+1-1+1+1]</p>\n<p>如果A想发送 bit 0, 就发送码片序列[+1+1+1-1-1+1-1-1]</p>\n</blockquote>\n<p>码片序列的要求：</p>\n<blockquote>\n<p> 所有的码片序列都要两两正交</p>\n</blockquote>\n<center><img src=\"image-20191006000007082.png\" srcset=\"/img/loading.gif\" alt=\"image-20191006000007082\" style=\"zoom:35%;\" /></center>\n\n<p>A,B,C,D 是发送信号的4个station，他们的码片序列两两正交。</p>\n<p>S1,S2,…S6是6个例子,S6表示这个比特时间A,B,D发送了bit 1，C发送了bit 0。但是我们收到的是S6这个不同站的信号都混淆在一起的整体。怎么把C站发送的比特提取出来呢？</p>\n<p>方法是S6与C做归一化内积。即$S_6\\cdot C=[2-2+0-2+0-2-4+0]/8=-1$</p>\n<p>因此我们知道在S6所处的这个比特时间内，C站传输了bit 0。</p>\n<blockquote>\n<p>内积结果</p>\n<p>=1 说明该站发送了 bit 1</p>\n<p>=-1说明该站发送了bit 0</p>\n<p>=0 说明该站没有发送数据</p>\n</blockquote>\n<h1 id=\"5-公共电话交换网络\"><a href=\"#5-公共电话交换网络\" class=\"headerlink\" title=\"5 公共电话交换网络\"></a>5 公共电话交换网络</h1><p>How to connect computers?</p>\n<blockquote>\n<p>For small number of computers and a local area</p>\n<ul>\n<li>LAN </li>\n</ul>\n<p>For a large number of computers or a wide area or lacking right of way</p>\n<ul>\n<li>PSTN [Public Switched Telephone Network]</li>\n</ul>\n</blockquote>\n<h2 id=\"5-1-Structure-of-the-Telephone-System\"><a href=\"#5-1-Structure-of-the-Telephone-System\" class=\"headerlink\" title=\"5.1 Structure of the Telephone System\"></a>5.1 Structure of the Telephone System</h2><p>电话网络的变迁</p>\n<center><img src=\"image-20191007161859322.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007161859322\" style=\"zoom:40%;\" /></center>\n\n<p>Bell system model</p>\n<p>Levels:</p>\n<ul>\n<li>End office 本地局</li>\n<li>toll office 长途局</li>\n<li>primary office 初级局</li>\n<li>Sectional office 地区局</li>\n<li>Regional office 区域局</li>\n</ul>\n<p>Major components </p>\n<ul>\n<li><p>Local loops [本地回路]: 进入家庭和公司的模拟双绞线</p>\n</li>\n<li><p>Trunks [干线]: 连接交换局的数字光纤</p>\n</li>\n<li><p>Switching offices [交换局]:电话呼叫在这里从一条中继线被接入另一条中继线</p>\n</li>\n</ul>\n<center><img src=\"image-2019100742053.png\" srcset=\"/img/loading.gif\" alt=\"屏幕快照 2019-10-07 下午4.20.53\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"5-1-本地回路：调制解调器、ADSL、光纤\"><a href=\"#5-1-本地回路：调制解调器、ADSL、光纤\" class=\"headerlink\" title=\"5.1 本地回路：调制解调器、ADSL、光纤\"></a>5.1 本地回路：调制解调器、ADSL、光纤</h2><h3 id=\"A-电话调制解调器\"><a href=\"#A-电话调制解调器\" class=\"headerlink\" title=\"A 电话调制解调器\"></a>A 电话调制解调器</h3><p>要在物理信道上发送比特，必须把比特转换为可以在信道上传输的模拟信号。这个方式我们在上一节已经学过。</p>\n<p>在信号的另一端，模拟信号要被还原成比特</p>\n<p><br/></p>\n<p><strong><u>调制解调器</u></strong></p>\n<p>是什么</p>\n<blockquote>\n<p>执行数字比特流和模拟信号流之间转换的设备就是调制解调器[modem]</p>\n<p>调制解调器是调制器[modulator]和解调器[demodulator]的缩写</p>\n</blockquote>\n<center><img src=\"page102image35767104.png\" srcset=\"/img/loading.gif\" alt=\"page102image35767104.png\" style=\"zoom:70%;\" /> </center>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"1-数据通信的理论基础\"><a href=\"#1-数据通信的理论基础\" class=\"headerlink\" title=\"1 数据通信的理论基础\"></a>1 数据通信的理论基础</h1><h2 id=\"1-1傅里叶分析\"><a href=\"#1-1傅里叶分析\" class=\"headerlink\" title=\"1.1傅里叶分析\"></a>1.1傅里叶分析</h2><p>任何一个行为合理周期为T的函数g(t)，都可以表示成正弦函数和余弦函数组成的无穷级数</p>\n<script type=\"math/tex; mode=display\">g(t)=\\frac{1}{2}c+\\sum_{n=1}^{\\infty}a_nsin(2\\pi nft)+\\sum_{n=1}^{\\infty}b_ncos(2\\pi nft)</script><p>其中$f=\\frac{1}{T}$是基本频率，$a_n$和$b_n$是n次谐波的正弦振幅和余弦振幅,c是常数</p>\n<p><br/></p>\n<h2 id=\"1-2-带宽有限的信号\"><a href=\"#1-2-带宽有限的信号\" class=\"headerlink\" title=\"1.2 带宽有限的信号\"></a>1.2 带宽有限的信号</h2><p>我们考虑一个特殊的例子：</p>\n<p>传输ASCII字符b,这个字符被编码成一个8比特长的字节，01100010</p>\n<p>可以得到系数</p>\n<center><img src=\"image-20190917211816031.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917211816031\" style=\"zoom:50%;\" /></center>\n\n<blockquote>\n<p> 所有传输设施在传输过程中都要损失一些能量    </p>\n<p> 如果所有傅里叶分量都等量衰减，则结果信号将会在振幅上有所减小，但形状不会变。  </p>\n<p>但是，实际情况是，所有传输设施对于不同傅里叶分量的衰减程度并不相同，这会导致接收端接收到的信号发生<strong>变形</strong>。  </p>\n<p>一般对导线来说，在[0,$f_c$]的频率范围，振幅在传输过程中不回衰减，而在$f_c$这个截止频率之上的所有频率的振幅都会有不同程度的减弱。    </p>\n<p>这个在传输过程中振幅不回明显减弱的频率的宽度就称为<strong>带宽</strong>   </p>\n<p>但是截止频率不是一个突变的量，不是说到达某个阈值，振幅就突然减弱了，所以通常引用的带宽是指从0到接收能量保留一半到那个频率位置</p>\n</blockquote>\n<p>带宽是传输介质的一种物理特性，取决于介质  </p>\n<p>一般将从0到某个最大频率的信号称为<strong>基带信号</strong>，将被搬移并占用某个更大频率范围的信号称为<strong>通带信号</strong>  </p>\n<center><img src=\"image-20190917211449784.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917211449784\" style=\"zoom: 67%;\" /></center>\n\n<p><br/></p>\n<h4 id=\"带宽很低，会发生什么？\"><a href=\"#带宽很低，会发生什么？\" class=\"headerlink\" title=\"带宽很低，会发生什么？\"></a>带宽很低，会发生什么？</h4><p>如果带宽很低，则只有几个最低频率才能被传输</p>\n<p>假设比特率为$b$ bit/s[每秒发送8个比特]</p>\n<p>则发送8个比特所需要的时间是$\\frac{8}{b}$秒</p>\n<p>所以第一个谐波频率是$\\frac{b}{8}$赫兹</p>\n<p>如果截止频率是3000hz,则可以通过的最高谐波数为</p>\n<script type=\"math/tex; mode=display\">\\frac{3000}{\\frac{8}{b}}</script><center><img src=\"image-20190917213738345.png\" srcset=\"/img/loading.gif\" alt=\"image-20190917213738345\" style=\"zoom:50%;\" /></center>\n\n<p>如上图所示，如果能发送的频率数很少，我们就没办法精确表示周期函数</p>\n<p><br/></p>\n<h2 id=\"1-3-信道的最大数据速率\"><a href=\"#1-3-信道的最大数据速率\" class=\"headerlink\" title=\"1.3 信道的最大数据速率\"></a>1.3 信道的最大数据速率</h2><p><a href=\"https://blog.csdn.net/supreme42/article/details/7734763\" target=\"_blank\" rel=\"noopener\">一些概念</a></p>\n<p>波特率[baud rate/ symbol rate]</p>\n<blockquote>\n<p>波特率指的是信号每秒钟电平变化的次数，单位是<em>Hz</em></p>\n</blockquote>\n<p>比特率</p>\n<blockquote>\n<p>信号每秒钟传输的数据的位数。计算机中数据都是用<em>0</em>，<em>1</em>表示的，所以比特率也就是每秒钟传输<em>0</em>和<em>1</em>的个数，单位是<em>bps</em>[<em>bit per second</em>]</p>\n</blockquote>\n<p>波特率和比特率的关系</p>\n<blockquote>\n<p>我们可以假设一个信号只有两个电平，那么这个时候可以把低电平理解为<em>“0”</em>，高电平理解为<em>“1”</em>，这样每秒钟电平变化的次数也就是传输的<em>0</em>，<em>1</em>个数了，即比特率 <em>=</em> 波特率。</p>\n<p>但是有些信号可能不止两个电平，比如一个四电平的信号，那么每个电平就可以被理解成<em>“00”</em>，<em>“01”</em>，<em>“10”</em>，<em>“11”</em>，这样每次电平变化就能传输两位的数据了，即比特率 <em>= 2 ×</em> 波特率。</p>\n<p>一般的，$bit\\,rate = buad\\,rate × log_2V$，这里V就是信号电平的个数。</p>\n</blockquote>\n<p>Nyquist证明：如果一个任意信号通过一个带宽为B的低通滤波器，那么只要进行每秒2B次确切采样[一个周期采样2次]，就可以完全重构出被过滤的信号</p>\n<p>不考虑噪声，如果信号包含了V个离散等级，那么公式可以写为</p>\n<script type=\"math/tex; mode=display\">最大数据速率=2Blog_2V(bit/s)</script><p>[最大symbol rate=$2B\\,symbol/s$]</p>\n<blockquote>\n<p>每秒采样2B次，也就是采样了2B个电平信号</p>\n<p>也就是采样了2BlogV个bits</p>\n</blockquote>\n<p>事实上，要想重构出信号，每秒2B次采样是不够的，要多一些才够。</p>\n<center><img src=\"9FC21EC72573A17040AD0FCD3C37A790.png\" srcset=\"/img/loading.gif\" alt=\"9FC21EC72573A17040AD0FCD3C37A790\" style=\"zoom:10%;\" /></center>\n\n<p><br/></p>\n<h4 id=\"接下来考虑如果存在随机噪声\"><a href=\"#接下来考虑如果存在随机噪声\" class=\"headerlink\" title=\"接下来考虑如果存在随机噪声\"></a>接下来考虑如果存在随机噪声</h4><script type=\"math/tex; mode=display\">信噪比(SNR)=\\frac{信号功率}{噪声功率}=\\frac{S}{N}</script><p>通常将其写成对数形式$10log_{10}\\frac{S}{N}$,单位为分贝. </p>\n<p>香农得出：对于一条带宽为B赫兹，噪声比是$\\frac{S}{N}$的有噪声通道，他的最大数据传输速率是. </p>\n<script type=\"math/tex; mode=display\">最大比特率=Blog_2{(1+\\frac{S}{N})}</script><h2 id=\"2-引导性传输介质-有线传输\"><a href=\"#2-引导性传输介质-有线传输\" class=\"headerlink\" title=\"2 引导性传输介质[有线传输]\"></a>2 引导性传输介质[有线传输]</h2><p>物理层的作用是将bit从一条机器传输到另一台机器。传输所用的物理介质会在传输带宽、延迟、成本等方面产生差别。</p>\n<p>可以将介质分为</p>\n<ul>\n<li>引导性介质：如铜线、光纤</li>\n<li>非引导性介质：如卫星、激光</li>\n</ul>\n<p><br/></p>\n<h3 id=\"2-1-磁介质\"><a href=\"#2-1-磁介质\" class=\"headerlink\" title=\"2.1 磁介质\"></a>2.1 磁介质</h3><p>Never underestimate the bandwidth of station wagon full of tapes hurtling down the highway.</p>\n<h3 id=\"2-2-双绞线\"><a href=\"#2-2-双绞线\" class=\"headerlink\" title=\"2.2 双绞线\"></a>2.2 双绞线</h3><p>构成</p>\n<blockquote>\n<p>双绞线由两根铜线以螺旋状的形式紧紧地绞在一起。</p>\n</blockquote>\n<p>之所以要绞在一起，是因为这样不同电线产生的干扰波会相互抵消，显著降低电线的辐射。</p>\n<p>并且，信号以两根电线的电压差来承载，这样对外部噪声有更好的免疫力，因为噪声对两根电线的干扰是相同的，因此电压差不会改变。</p>\n<p><br/></p>\n<p>双绞线既可以传输模拟信号，也可以传输数字信号。</p>\n<p>传输方向：</p>\n<ul>\n<li>全双工链路[full-duplex]：可以双向同时使用的链路</li>\n<li>半双工链路half-duplex]：可以双向使用但一次只能使用一个方向</li>\n<li>单工链路[simplex]：只允许一个方向上传输</li>\n</ul>\n<p>双绞线的type:</p>\n<blockquote>\n<p>– Category 5 [100Mbps, 1Gbps]<br>– Category 6 [10Gbps]<br>– Category 7 [Shielded Twisted Pair]</p>\n</blockquote>\n<center><img src=\"image-20191007125121828.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007125121828\" style=\"zoom:33%;\" /></center>\n\n<p>双绞线的缺点是：</p>\n<p>传输距离远的话，信号衰减很厉害，需要使用中继器</p>\n<h3 id=\"2-3-同轴电缆-coaxial-cable\"><a href=\"#2-3-同轴电缆-coaxial-cable\" class=\"headerlink\" title=\"2.3 同轴电缆[coaxial cable]\"></a>2.3 同轴电缆[coaxial cable]</h3><p>构成：</p>\n<blockquote>\n<p>硬的铜芯，外面包上一层绝缘材料，绝缘材料的外面是网状圆柱导体，外层导体再覆盖上一层保护塑料外套</p>\n</blockquote>\n<center><img src=\"image-20191007133601513.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007133601513\" style=\"zoom: 33%;\" /></center>\n\n<p>特点：</p>\n<blockquote>\n<p>同轴电缆的结构和屏蔽性使得它既有很高的带宽，又有很好的抗噪性。</p>\n<p>这点比双绞线更优秀，因此也比双绞线传的远</p>\n</blockquote>\n<h3 id=\"2-4-电力线-power-line\"><a href=\"#2-4-电力线-power-line\" class=\"headerlink\" title=\"2.4 电力线[power line]\"></a>2.4 电力线[power line]</h3><center><img src=\"image-20191007133946196.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007133946196\" style=\"zoom: 33%;\" /></center>\n\n<h3 id=\"2-5-Fiber-optics\"><a href=\"#2-5-Fiber-optics\" class=\"headerlink\" title=\"2.5 Fiber optics\"></a>2.5 Fiber optics</h3><center><img src=\"page40image34686176.png\" srcset=\"/img/loading.gif\" alt=\"page40image34686176.jpg\" style=\"zoom:33%;\" /></center>\n\n<p>Types:</p>\n<blockquote>\n<p>Multimode多模：many different rays</p>\n<p>Unimode单模：single rays, longer distance</p>\n</blockquote>\n<p>Transmission of light through fiber:</p>\n<blockquote>\n<p>-Attenuation [衰减] of light through fiber in the infrared region.</p>\n<p>– Three wavelength bands are used for optical communication. They are centered at 0.85, 1.30, and 1.55 micros [微米].</p>\n</blockquote>\n<center><img src=\"page41image34714624.png\" srcset=\"/img/loading.gif\" alt=\"page41image34714624.jpg\" style=\"zoom: 33%;\" /></center>\n\n<h4 id=\"光缆：\"><a href=\"#光缆：\" class=\"headerlink\" title=\"光缆：\"></a><u>光缆</u>：</h4><p>构成：</p>\n<blockquote>\n<p>中间core是玻璃芯，光秒冲通过它传播</p>\n<p>玻璃芯外面是一个玻璃覆盖层[cladding]，覆盖层的折射率比玻璃低，这样可以限制所有光都限制在玻璃芯内[全反射]</p>\n<p>最外面是一层塑料封套[jacket],用来保护里面的玻璃包层</p>\n<p>光纤通常被扎捆成束，最外面再加一层保护套</p>\n</blockquote>\n<center><img src=\"page42image34731632.png\" srcset=\"/img/loading.gif\" alt=\"page42image34731632.jpg\" style=\"zoom:35%;\" /></center>\n\n<p>信号源一半有两种光源：发光LED和半导体激光</p>\n<center><img src=\"page44image34725184.png\" srcset=\"/img/loading.gif\" alt=\"page44image34725184.jpg\" style=\"zoom:33%;\" /></center>\n\n<h4 id=\"光纤和铜线的比较\"><a href=\"#光纤和铜线的比较\" class=\"headerlink\" title=\"光纤和铜线的比较\"></a><u>光纤和铜线的比较</u></h4><p>– Advantages</p>\n<ul>\n<li>Higher bandwidths and Low attenuation.</li>\n<li>Not being affected by power surges, electromagnetic interference, or power failures.</li>\n<li>Not affected by corrosive chemicals in the air.</li>\n<li>Thin and lightweight.</li>\n<li>Fibers do not leak light and quite difficult to tap.</li>\n</ul>\n<p>– Disadvantages</p>\n<ul>\n<li><p>Less familiar technology.</p>\n<p>要求较高的操作技能，光纤被过度弯曲容易折断</p>\n</li>\n<li><p>Fiber interfaces more expensive.</p>\n</li>\n</ul>\n<p>– Conclusion: For new routes [longer ones], fiber win</p>\n<h1 id=\"3-无线传输\"><a href=\"#3-无线传输\" class=\"headerlink\" title=\"3 无线传输\"></a>3 无线传输</h1><h2 id=\"3-1电磁频谱\"><a href=\"#3-1电磁频谱\" class=\"headerlink\" title=\"3.1电磁频谱\"></a>3.1电磁频谱</h2><center><img src=\"image-20191007140913262.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007140913262\" style=\"zoom:30%;\" /></center>\n\n<p>由香农定理我们知道一个电磁波的信号能够携带的信息量与带宽成正比，从图中可以看到光纤带宽是多么宽</p>\n<p>Some spread its frequency over a <em>wide frequency band</em>[spread spectrum, 扩频].</p>\n<p>– Frequency hopping spread spectrum [military, 802.11, Bluetooth]</p>\n<p>– Direct sequence spread spectrum [3G mobile phones]</p>\n<p>– UWB [UltraWideBand]</p>\n<center><img src=\"page49image35151168.png\" srcset=\"/img/loading.gif\" alt=\"page49image35151168.jpg\" style=\"zoom:33%;\" /></center>\n\n<h3 id=\"3-2-Radar\"><a href=\"#3-2-Radar\" class=\"headerlink\" title=\"3.2 Radar\"></a>3.2 Radar</h3><h3 id=\"3-3-Radio-transmission\"><a href=\"#3-3-Radio-transmission\" class=\"headerlink\" title=\"3.3 Radio transmission\"></a>3.3 Radio transmission</h3><p>[a] In the VLF, LF, and MF bands, radio waves follow the curvature of the earth.</p>\n<p>[b] In the HF band, they bounce off the ionosphere [电离层].</p>\n<center><img src=\"page52image35155536.png\" srcset=\"/img/loading.gif\" alt=\"page52image35155536.jpg\" style=\"zoom:33%;\" /></center>\n\n<h3 id=\"3-4-Microwave-transmission\"><a href=\"#3-4-Microwave-transmission\" class=\"headerlink\" title=\"3.4 Microwave transmission\"></a>3.4 Microwave transmission</h3><h1 id=\"4-数字调制与多路复用\"><a href=\"#4-数字调制与多路复用\" class=\"headerlink\" title=\"4 数字调制与多路复用\"></a>4 数字调制与多路复用</h1><h4 id=\"什么是数字调制？\"><a href=\"#什么是数字调制？\" class=\"headerlink\" title=\"什么是数字调制？\"></a>什么是数字调制？</h4><blockquote>\n<p>比特与代表他们的信号之间的转换过程称为<strong>数字调制</strong></p>\n</blockquote>\n<p><br/></p>\n<p>我们首先来看如何把<strong>比特直接转换成信号</strong>的方案，这些方案导致了<strong>基带传输</strong></p>\n<blockquote>\n<p>基带传输是指：信号的传输占有传输介质上从0到最大值之间的全部频率</p>\n</blockquote>\n<p>然后我们看通过调节载波信号的幅值、相位或者频率来运载比特的模式，这些方案导致了<strong>通带传输</strong></p>\n<blockquote>\n<p>通带传输是指：信号占据了以载波信号频率为中心的一段频带</p>\n</blockquote>\n<p><br/></p>\n<p>信道通常被多个信号共享，这种信道的共享形式称为<strong>多路复用技术</strong></p>\n<p>多路复用技术可以通过：时分复用、频分复用、码分复用 实现</p>\n<h2 id=\"4-1-基带传输\"><a href=\"#4-1-基带传输\" class=\"headerlink\" title=\"4.1 基带传输\"></a>4.1 基带传输</h2><center><img src=\"image-20200101212239647.png\" srcset=\"/img/loading.gif\" alt=\"image-20200101212239647\" style=\"zoom:50%;\" /></center>\n\n\n<h3 id=\"NRZ\"><a href=\"#NRZ\" class=\"headerlink\" title=\"NRZ\"></a>NRZ</h3><p>翻转代表1，不翻转代表0</p>\n<p>一旦NRZ信号被发出去，它沿线缆传播。另一端的接收器以一定周期对信号采样，然后把采样信号转换成比特。</p>\n<p>Problem:</p>\n<blockquote>\n<p>a long run of 0s or 1s leaves the signal unchanged. </p>\n<p>After a while it is hard to tell the bits apart, as 15 zeros look much like 16 zeros unless you have a very accurate clock.</p>\n</blockquote>\n<p>Accurate clock: </p>\n<blockquote>\n<p> For all schemes that encode bits into symbols, the receiver must know <strong>when one symbol ends and the next symbol begins</strong> to correctly decode the bits.</p>\n</blockquote>\n<p>一般来说，accurate clock是很难做到的，那么我们该怎么办呢？</p>\n<h4 id=\"Clock-Recovery\"><a href=\"#Clock-Recovery\" class=\"headerlink\" title=\"Clock Recovery\"></a><u>Clock Recovery</u></h4><ul>\n<li><p>一种方法，额外拉一根时钟线，给接收器发送单独的时钟信号</p>\n<p>这个方法不好，因为这很浪费，用一根额外的线来发送时钟，还不如用它来发送数据呢</p>\n</li>\n</ul>\n<ul>\n<li>A clever trick is to mix the clock signal with the data signal by XORing them together so that no extra line is needed.→<strong><u>Manchester Encoding</u></strong></li>\n</ul>\n<p>  <strong><u>Manchester Encoding</u></strong>的方法是，时钟的频率是比特率的两倍，也就是在一个bit 时间内，时钟会产生一次跳变。时钟XOR bit，产生输出</p>\n<p>  如上图所示</p>\n<blockquote>\n<p> 第一个bit时间t内，传输的bit是1，时钟在[0,t/2]内是0，与bit 1异或，编码成1; </p>\n<p> 在[t/2, t]内时钟跳变到1，与bit 0异或，编码成0.</p>\n<p> 因此我们在第一个bit时间看到的编码先是1后翻转到0</p>\n</blockquote>\n<p>  问题：需要两倍于NRZ的带宽，一个bit时间他要传输两个信号</p>\n<ul>\n<li>As a step in the right direction, we can simplify the situation by encoding a 1 as a transition and a 0 as no transition, or vice versa.→<strong><u>NRZI</u></strong> [Non-Return-to- Zero Inverted,不归零倒相制, Used in USB]</li>\n</ul>\n<p>  <strong><u>NRZI</u></strong>方法是：编码有跳变表示1，编码无跳变表示0</p>\n<p>  这样，再长的一串1都不会产生时钟恢复问题；但是一长串的0仍然有问题</p>\n<ul>\n<li><p>Problem: long runs of 0s?→<strong><u>4B/5B</u></strong></p>\n<p><strong><u>4B/5B</u></strong>的方法是：每4个bits被映射成一个5bits的模式，映射按照一张固定的转换表进行，5bits的选择使得映射结果永远不会出现连续3个0</p>\n<center><img src=\"page63image36690640.png\" srcset=\"/img/loading.gif\" alt=\"page63image36690640.png\" style=\"zoom:33%;\" /></center>\n\n<p>问题：增加了25%的带宽</p>\n</li>\n</ul>\n<p><br/></p>\n<h2 id=\"4-2-通带传输\"><a href=\"#4-2-通带传输\" class=\"headerlink\" title=\"4.2 通带传输\"></a>4.2 通带传输</h2><p>一般情况下，我们在一个信道上发送信息使用的频率范围并不是从0开始的。对于无线信道来说，发送非常低频率的信号不切实际，因为天线的大小与信号的波长成比例，低频信号需要很大的天线。</p>\n<p>发射频率一般是由监管约束和避免干扰的需要决定的</p>\n<h3 id=\"4-2-1-数字调试\"><a href=\"#4-2-1-数字调试\" class=\"headerlink\" title=\"4.2.1 数字调试\"></a>4.2.1 数字调试</h3><center><img src=\"image-20191007153614734.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007153614734\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"A-幅移键控-ASK-Amplitude-Shift-Keying\"><a href=\"#A-幅移键控-ASK-Amplitude-Shift-Keying\" class=\"headerlink\" title=\"A 幅移键控[ASK, Amplitude Shift Keying]\"></a>A 幅移键控[ASK, Amplitude Shift Keying]</h4><p>通过采用不同的振幅表示0和1</p>\n<blockquote>\n<p>如上图(b)所示，这里采用非零幅值和一个零幅值</p>\n</blockquote>\n<h4 id=\"B-频移键控-FSK-Frequency-Shift-Keying\"><a href=\"#B-频移键控-FSK-Frequency-Shift-Keying\" class=\"headerlink\" title=\"B 频移键控[FSK, Frequency Shift Keying]\"></a>B 频移键控[FSK, Frequency Shift Keying]</h4><p>采用两个或更多的频率</p>\n<blockquote>\n<p>如上图[c]所示，使用两个频率表示0和1</p>\n</blockquote>\n<h4 id=\"C-相移键控-PSK-Phase-Shift-Keying\"><a href=\"#C-相移键控-PSK-Phase-Shift-Keying\" class=\"headerlink\" title=\"C 相移键控[PSK, Phase Shift Keying]\"></a>C 相移键控[PSK, Phase Shift Keying]</h4><p>在每个符号的周期中，系统把载波波形偏移0度或者180度。由于只有两个相位，这种调制方法称为二进制相移键控[BPSK]，这里的二进制表示的是两个符号</p>\n<blockquote>\n<p>如上图[d]所示，使用两种相位量表示0和1</p>\n</blockquote>\n<p>当然，我们可以用更多数量的偏移。比如用4个偏移，45，135，225，315，那么每个符号可以表示2bit。这种称为正交相移键控[QPSK, Quadrature]</p>\n<h4 id=\"D-集大成者\"><a href=\"#D-集大成者\" class=\"headerlink\" title=\"D 集大成者\"></a>D 集大成者</h4><p>我们可以综合以上调制方式，使得每个符号表示更多的bit.</p>\n<p>我们选择综合振幅和相位。为什么不考虑频率呢？因为频率和相位有关</p>\n<p><br/></p>\n<p>我们给出星座图</p>\n<blockquote>\n<p> 一个点的相位是以他为起点到原点的线与x轴正方向的夹角</p>\n<p> 一个点的振幅是他到原点的距离</p>\n</blockquote>\n<center><img src=\"image-20191007154637608.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007154637608\" style=\"zoom: 33%;\" /></center>\n\n<blockquote>\n<p>如图[b], QAM-16：</p>\n<p>一共有16个符号，16个符号可以表示出4bits的所有组合</p>\n<p>因此一个符号可以传输4个比特</p>\n<p>同样，如图[c], QAM-64</p>\n<p>一共有64个符号，一个符号可以传输6bits [..$2^6=64$]</p>\n</blockquote>\n<h2 id=\"4-3-Multiplexing\"><a href=\"#4-3-Multiplexing\" class=\"headerlink\" title=\"4.3 Multiplexing\"></a>4.3 Multiplexing</h2><h3 id=\"4-3-1-频分复用-FDM-Frequency-Division-Multiplexing\"><a href=\"#4-3-1-频分复用-FDM-Frequency-Division-Multiplexing\" class=\"headerlink\" title=\"4.3.1 频分复用[FDM,Frequency Division Multiplexing]\"></a>4.3.1 频分复用[FDM,Frequency Division Multiplexing]</h3><p>利用通带传输的优势使多个用户共享一个信道。</p>\n<p>FDM将频谱分成几个频段，每个用户完全拥有其中一个频段来发送自己的信号</p>\n<center><img src=\"image-20191005234836200.png\" srcset=\"/img/loading.gif\" alt=\"image-20191005234836200\" style=\"zoom: 40%;\" /></center>\n\n<h4 id=\"正交频分复用-OFDM-orthogonal\"><a href=\"#正交频分复用-OFDM-orthogonal\" class=\"headerlink\" title=\"正交频分复用[OFDM,orthogonal]\"></a>正交频分复用[OFDM,orthogonal]</h4><p>信道带宽被分成许多独立发送数据的子载波，每个子载波之间频率的间隔是$\\Delta f$</p>\n<p>每个子载波发出的信号虽然可以扩散到相邻子载波，但是每个子载波的频率响应被设计成在相邻子载波的中心为0。因此，可以在子载波中心频率采样而不会收到其邻居的干扰</p>\n<center><img src=\"image-20191007160446233.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007160446233\" style=\"zoom:40%;\" /></center>\n\n<h3 id=\"4-3-2-时分复用\"><a href=\"#4-3-2-时分复用\" class=\"headerlink\" title=\"4.3.2 时分复用\"></a>4.3.2 时分复用</h3><p>用户以循环的方式轮流工作。每个用户周期性获得整个带宽非常短的一个时间</p>\n<center><img src=\"image-20191005234914576.png\" srcset=\"/img/loading.gif\" alt=\"image-20191005234914576\" style=\"zoom:40%;\" /></center>\n\n<h3 id=\"4-3-3-码分复用\"><a href=\"#4-3-3-码分复用\" class=\"headerlink\" title=\"4.3.3 码分复用\"></a>4.3.3 码分复用</h3><p>传输一个bit的时间被划分成m个更短的时间间隔，称这个时间间隔为<u>码片</u>[chip]。每个站分配得到唯一的m位码，称为 <u>码片序列</u></p>\n<p>如果要发送bit 1,站就发送分配给他的码片序列；如果要发送bit 0,站就发送分配给他的码片序列的反码。</p>\n<blockquote>\n<p>m=8,即一个bit时间传输的码片序列是8位的。</p>\n<p>如果A站分配到的码片序列为[-1-1-1+1+1-1+1+1]</p>\n<p>那么如果A想发送bit 1，就发送码片序列[-1-1-1+1+1-1+1+1]</p>\n<p>如果A想发送 bit 0, 就发送码片序列[+1+1+1-1-1+1-1-1]</p>\n</blockquote>\n<p>码片序列的要求：</p>\n<blockquote>\n<p> 所有的码片序列都要两两正交</p>\n</blockquote>\n<center><img src=\"image-20191006000007082.png\" srcset=\"/img/loading.gif\" alt=\"image-20191006000007082\" style=\"zoom:35%;\" /></center>\n\n<p>A,B,C,D 是发送信号的4个station，他们的码片序列两两正交。</p>\n<p>S1,S2,…S6是6个例子,S6表示这个比特时间A,B,D发送了bit 1，C发送了bit 0。但是我们收到的是S6这个不同站的信号都混淆在一起的整体。怎么把C站发送的比特提取出来呢？</p>\n<p>方法是S6与C做归一化内积。即$S_6\\cdot C=[2-2+0-2+0-2-4+0]/8=-1$</p>\n<p>因此我们知道在S6所处的这个比特时间内，C站传输了bit 0。</p>\n<blockquote>\n<p>内积结果</p>\n<p>=1 说明该站发送了 bit 1</p>\n<p>=-1说明该站发送了bit 0</p>\n<p>=0 说明该站没有发送数据</p>\n</blockquote>\n<h1 id=\"5-公共电话交换网络\"><a href=\"#5-公共电话交换网络\" class=\"headerlink\" title=\"5 公共电话交换网络\"></a>5 公共电话交换网络</h1><p>How to connect computers?</p>\n<blockquote>\n<p>For small number of computers and a local area</p>\n<ul>\n<li>LAN </li>\n</ul>\n<p>For a large number of computers or a wide area or lacking right of way</p>\n<ul>\n<li>PSTN [Public Switched Telephone Network]</li>\n</ul>\n</blockquote>\n<h2 id=\"5-1-Structure-of-the-Telephone-System\"><a href=\"#5-1-Structure-of-the-Telephone-System\" class=\"headerlink\" title=\"5.1 Structure of the Telephone System\"></a>5.1 Structure of the Telephone System</h2><p>电话网络的变迁</p>\n<center><img src=\"image-20191007161859322.png\" srcset=\"/img/loading.gif\" alt=\"image-20191007161859322\" style=\"zoom:40%;\" /></center>\n\n<p>Bell system model</p>\n<p>Levels:</p>\n<ul>\n<li>End office 本地局</li>\n<li>toll office 长途局</li>\n<li>primary office 初级局</li>\n<li>Sectional office 地区局</li>\n<li>Regional office 区域局</li>\n</ul>\n<p>Major components </p>\n<ul>\n<li><p>Local loops [本地回路]: 进入家庭和公司的模拟双绞线</p>\n</li>\n<li><p>Trunks [干线]: 连接交换局的数字光纤</p>\n</li>\n<li><p>Switching offices [交换局]:电话呼叫在这里从一条中继线被接入另一条中继线</p>\n</li>\n</ul>\n<center><img src=\"image-2019100742053.png\" srcset=\"/img/loading.gif\" alt=\"屏幕快照 2019-10-07 下午4.20.53\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"5-1-本地回路：调制解调器、ADSL、光纤\"><a href=\"#5-1-本地回路：调制解调器、ADSL、光纤\" class=\"headerlink\" title=\"5.1 本地回路：调制解调器、ADSL、光纤\"></a>5.1 本地回路：调制解调器、ADSL、光纤</h2><h3 id=\"A-电话调制解调器\"><a href=\"#A-电话调制解调器\" class=\"headerlink\" title=\"A 电话调制解调器\"></a>A 电话调制解调器</h3><p>要在物理信道上发送比特，必须把比特转换为可以在信道上传输的模拟信号。这个方式我们在上一节已经学过。</p>\n<p>在信号的另一端，模拟信号要被还原成比特</p>\n<p><br/></p>\n<p><strong><u>调制解调器</u></strong></p>\n<p>是什么</p>\n<blockquote>\n<p>执行数字比特流和模拟信号流之间转换的设备就是调制解调器[modem]</p>\n<p>调制解调器是调制器[modulator]和解调器[demodulator]的缩写</p>\n</blockquote>\n<center><img src=\"page102image35767104.png\" srcset=\"/img/loading.gif\" alt=\"page102image35767104.png\" style=\"zoom:70%;\" /> </center>"},{"title":"CA - Storage","date":"2019-12-08T07:39:48.000Z","index_img":"/img/image-20191209103141041.png","_content":"\n# 1. Introduction\n\n<center><img src=\"image-20191208134608723.png\" alt=\"image-20191208134608723\" style=\"zoom:50%;\" /></center>\n\n## 1.1 缓存性能\n\nCPU execution time\n\n$$=(CPU\\, clock\\, cycles + Memory\\, stall\\, cycles)\\times Clock\\, cycle\\, time$$\n\n{:.warning}\n\n这里CPU clock cicles包括handle cache hit/miss的时间\n\n<center><img src=\"image-20191208135106480.png\" alt=\"image-20191208135106480\" style=\"zoom:60%;\" /></center>\n<center><img src=\"image-20191208135244903.png\" alt=\"image-20191208135244903\" style=\"zoom:60%;\" /></center>\n\n看一道例题\n\n> a computer with CPI=1 when cache hit.  \n>\n> 50% instructions are loads and stores;\n>\n> 2% miss rate, 25 cc miss penalty;\n>\n> **Q:** how much faster would the computer be if all instructions were cache hits?\n\nAnswer:\n\n1. always hit:\n\nCPU execution time = (CPU clocks cycles + Memory stall cycles) * clock cycle\n\n=$$(IC \\times CPI + 0) \\times clock\\,cycle$$\n\n=$$IC \\times clock\\, cycle$$\n\n<br/>\n\n2. with misses\n\nMemory stall cycles\n\n= $IC \\times \\frac{Memory\\, accesses}{Instruction}\\times Miss\\, rate\\times Miss\\, penalty$\n\n=$IC\\times(1+0.5)\\times 0.02\\times 25$\n\n=$IC\\times 0.75$\n\n\n\nmemory accesses=1.5是因为执行任何一条指令都要访问memory取指令，并且50%的指令是load, store 因此 1+0.5=1.5\n\n\n\nCPU execution time = (CPU clocks cycles + Memory stall cycles) $\\times$ clock cycle\n\n=$(IC\\times 1.0+IC\\times 0.75)\\times$clock cycle\n\n=$1.75\\times $clock cycle\n\n所以比值是1.75\n\n\n\n## 1.2 4个存储器层次结构问题\n\nQ1: Where can a block be placed in the upper level? (block placement)\n\nQ2: How is a block found if it is in the upper level? (block identification)\n\nQ3: Which block should be replaced on a miss? (block replacement)\n\nQ4: What happens on a write? (write strategy)\n\n<center><img src=\"image-2019120874232.png\" alt=\"截屏2019-12-08下午7.42.32\" style=\"zoom:67%;\" /></center>\n<center><img src=\"image-20191208194519623.png\" alt=\"image-20191208194519623\" style=\"zoom: 67%;\" /></center>\n\n### A. Write Strategy\n\n`Write hit`\n\n* write-through: info is written to both the block in the cache and to the block in the lower-level memory\n* write-back: info is written only to the block in the cache;  to the main memory only when the modified cache block is replaced[dirty bit]\n\n`Write miss`\n\n* Write allocate: data at the missed-**write** location is loaded to cache, followed by a **write**-hit operation  \n* No-write allocate[write around]: data at the missed-**write** location is not loaded to cache, and is written directly to the backing store.  ;  *until the program tries to read the block, the data is loaded to cache;*\n\n\n\n<center><img src=\"image-20191208201918610.png\" alt=\"image-20191208201918610\" style=\"zoom:50%;\" /></center>\n\n1. No-Write allocate:  4 misses + 1 hit\n\n<center><img src=\"image-20191208202025669.png\" alt=\"image-20191208202025669\" style=\"zoom:50%;\" /></center>\n\n2. Write allocate:  2 misses + 3 hits\n\n<center><img src=\"image-20191208202722945.png\" alt=\"image-20191208202722945\" style=\"zoom:50%;\" /></center>\n\n# 2. 缓存性能\n\n\n\n### Hit or Miss: How long will it take?\n\nAverage memory access time = Hit time + Miss rate x Miss penalty\n\n* **Example**\n\n> 16KB instr cache + 16KB data cache;\n>\n> or, 32KB unified cache;\n>\n> 36% data transfer instructions;\n>\n> (load/store takes 1 extra cc on unified cache)\n>\n> 1 CC hit; 200 CC miss penalty;\n\n<center><img src=\"image-20191208204528711.png\" alt=\"image-20191208204528711\" style=\"zoom:30%;\" /></center>\n\n> **Q1:** split cache or unified cache has lower miss rate? \n\nAnswer:\n\n<center><img src=\"image-20191208204804983.png\" alt=\"image-20191208204804983\" style=\"zoom:40%;\" /></center>\n\n1. split cache\n\n16KB instruction Miss rate\n\n​\t\t= $$\\frac{3.82}{1000}/1=0.004$$\n\n16KB data miss rate\n\n​\t\t=$$\\frac{40.9}{1000}/0.36=0.114$$\n\nassume 74% of memory accesses are instruction references\n\nOverall miss rate\n\n​\t\t=$$(74\\%\\times 0.004)+(26\\%\\times 0.114)=0.0326$$\n\n2. unified cache\n\nMiss rate\n\n=$$\\frac{43.3}{1000}/(1.0+0.36)=0.0318$$\n\n> **Q2:** average memory access time?\n\n<center><img src=\"image-20191208205644462.png\" alt=\"image-20191208205644462\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191208205754992.png\" alt=\"image-20191208205754992\" style=\"zoom:40%;\" /></center>\n\n## 2.1 存储器平均访问时间与处理器性能\n\n\n\n# 3. Six Basic Cache Optimizations  \n\n我们将所有缺失分成三类\n\n* 强制缺失[Compulsory]\n\n  cold-start/first-reference misses;\n\n* 容量缺失[Capacity]\n\n  cache size limit;\n\n   blocks discarded and later retrieved;\n\n* 冲突缺失\n\n  collision misses: associativity\n\n  a block discarded and later retrieved in a set;\n\n<center><img src=\"image-20191208213224033.png\" alt=\"image-20191208213224033\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213207928.png\" alt=\"image-20191208213207928\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213148539.png\" alt=\"image-20191208213148539\" style=\"zoom:30%;\" /></center>\n\n## 3.1 Larger Block size\n\n* **Reduce** compulsory misses\n\n  ​\tLeverage spatial locality\n\n* **Reduce** static power\n\n  ​\tblock size增大，地址里面index位就变多，tag位数就变少，比较时需要的工作量就变少\n\n* **Increase** conflict/capacity misses\n\n  ​\tFewer block in the cache\n\n<center><img src=\"image-20191208214954621.png\" alt=\"image-20191208214954621\" style=\"zoom: 30%;\" /></center>\n\n#### Example\n\n<center><img src=\"image-20191208215035983.png\" alt=\"image-20191208215035983\" style=\"zoom:40%;\" /></center>\n\n**Answer**\n\n avg mem access time\n\n​\t\t=hit time + miss rate x miss penalty\n\n{% note info %}\n\n assume 1-CC hit time\n\n for a 256-byte block in a 256 KB cache:\n\n avg mem access time\n\n​\t\t= 1 + 0.49% x (80 + 2x256/16) = 1.5 cc\n\n{% endnote %}\n\n 2x256/16是因为存储器2cc能给cache传回16bytes\n\n\n\n## 3.2 Larger cache\n\n* **Reduce** capacity misses\n\n* **Increase** hit time, cost, and power\n\n\n\n## 3.3 Higher Associativity\n\n* **Reduce** conflict misses\n\n* **Increase** hit time\n\n\n\n## 3.4 Multilevel cache\n\n* **Reduce** miss penalty\n\n<br/>\n\n#### A. Two-level cache\n\n Add another level of cache between the original cache and memory\n\n* **L1**: small enough to match the clock cycle time of the fast processor;\n\n* **L2**: large enough to capture many accesses that would go to main memory, lessening miss penalty\n\n<center><img src=\"image-20191208220714030.png\" alt=\"image-20191208220714030\" style=\"zoom:50%;\" /></center>\n\n#### B. Average memory access time\n\n=Hit timeL1 + Miss rateL1 x Miss penaltyL1\n\n=Hit timeL1 + Miss rateL1\n\n x(Hit timeL2+Miss rateL2xMiss penaltyL2)\n\n\n\n#### C. Average mem stalls per instruction\n\n=Misses per instructionL1 x Hit timeL2\n\n \\+ Misses per instrL2 x Miss penaltyL2\n\n\n\n#### D. Local miss rate\n\n the number of misses in a cache\n\n divided by the total number of mem accesses to <u>this cache</u>;\n\n {:.info}\n\n分成 Miss rateL1, Miss rateL2\n\n#### E. Global miss rate\n\n the number of misses in the cache \n\n divided by the number of mem accesses generated by the processor;\n\n {:.info}\n\nL1的全局缺失率Miss rate**L1**,<u>L2的全局缺失率 Miss rateL1 x Miss rateL2</u>\n\n\n\n#### Example\n\n> 1000 mem references -> 40 misses in L1 and 20 misses in L2;\n>\n> miss penalty from L2 is 200 cc;\n>\n> hit time of L2 is 10 cc;\n>\n> hit time of L1 is 1 cc;\n>\n> 1.5 mem references per instruction;\n\n>  **Q: 1.** various miss rates?\n\n **L1:** local = global\n\n 40/1000 = 4%\n\n **L2:**\n\n local: 20/40 = 50%\n\n global: 20/1000 = 2%\n\n> **Q: 2.** avg mem access time?\n\naverage memory access time\n\n=Hit timeL1 + Miss rateL1\n\n x(Hit timeL2+Miss rateL2xMiss penaltyL2)\n\n=1 + 4% x (10 + 50% x 200)\n\n=5.4\n\n>  **Q: 3.** avg stall cycles per instruction?\n\naverage stall cycles per instruction\n\n=Misses per instructionL1 x Hit timeL2\n\n \\+ Misses per instrL2 x Miss penaltyL2\n\n=(1.5x40/1000)x10+(1.5x20/1000)x200\n\n=6.6\n\n\n\n## 2.5  Prioritize read misses over writes\n\n* **Reduce** miss penalty\n\n{% note info %}\n\n这种方法使得在write buffer将数据写入memory之前，就可以为read操作提供服务\n\n{% endnote %}\n\n## 2.6 Avoid address translation during indexing cache\n\n虚拟缓存\n\n\n\n\n\n# 4. Ten advanced cache optimizations\n\n<center><img src=\"image-20191209100308445.png\" alt=\"image-20191209100308445\" style=\"zoom: 33%;\" /></center>\n\n## 4.1 Small and Simple First-Level Caches\n\n* Small size\n\n> support a fast clock cycle\n>\n> reduce power\n\n* Lower associativity\n\n> reduce both hit time and power\n>\n> (direct-mapped caches can overlap the tag check with the transmission of the data)\n\n\n\n## 4.2 Way prediction\n\n•Reduce conflict misses and hit time\n\n•**Way prediction**\n\n *block predictor bits* are added to each block to predict the way/block within the set of the *next* cache access\n\n \n\n the multiplexor is set **early to select the desired block**;\n\n only a single tag comparison is performed **in parallel with cache reading**;\n\n a miss results in checking the other blocks for matches in the next clock cycle;\n\n## 4.3 Pipelined Cache Access\n\n* Increase cache bandwidth\n\n* Higher latency\n\n* Greater penalty on mispredicted branches and more clock cycles between issuing the load and using the data \n\n## 4.4 Nonblocking caches\n\n> 对于允许乱序执行的流水化计算机，他的处理器不必因为一次数据缓存缺失而停顿。在等待数据缓存返回缺失数据时，处理器可以继续从指令缓存中提取指令。nonblocking cache允许数据缓存在一次缺失期间继续提供缓存命令\n\n* Increase cache bandwidth\n\n\n\n## 4.5 Multibanked caches\n\n> Divide cache into independent banks that support simultaneous accesses\n>\n> Sequential interleaving spread the addresses of blocks sequentially across the banks\n\n<center><img src=\"image-20191217202233856.png\" alt=\"image-20191217202233856\" style=\"zoom:50%;\" /></center>\n\n* Increase cache bandwidth\n\n## 4.6 Critical Word First & Early Restart\n\n通常CPU只会request一个word, 但是一个cache line对应了很多个word\n\n* critical word first\n\n> 首先请求critical word也就是CPU request的那个word, 然后发送给CPU, 然后再去请求一个cache line剩余的部分\n\n* early restart\n\n> 按正常顺序获取word, 不需要等待一个cache line全部放入缓存再发送给处理器，而是critical word到了就直接发送给处理器，不需要等待还没有完成传输的word\n\n\n\n\n\n* Reduce miss penalty\n\n## 4.7 Merging Write buffer\n\nWrite merging merges four entries (with sequential addresses)  into a single buffer entry\n\n<center><img src=\"image-20191217203849064.png\" alt=\"image-20191217203849064\" style=\"zoom:50%;\" /></center>\n\n* Reduce miss penalty\n\n## 4.8 Compiler optimizations\n\n### A. Loop interchange\n\n#### before\n\n```cpp\nfor(j = 0; j < 100; j++) {\n  for(i = 0; i < 5000; i++) {\n    x[i][j] = 2 * x[i][j];\n  }\n}\n```\n\nx[i]\\[j]访问之后访问x[i+1]\\[j],这中间差了100个数据\n\n#### after\n\n```cpp\nfor(i = 0; i < 5000; i++) {\n  for(j = 0; j < 100; j++) {\n    x[i][j] = 2 * x[i][j]\n  }\n}\n```\n\nx[i]\\[j]访问之后访问x[i]\\[j+1], 这中间只差了一个数据，就可以按照数据存储的顺序来访问，增强了space locality。\n\n这样一次miss之后，load多个word进cache的话，缺失就会变少\n\n\n\n### B. Blocking[分块]\n\n#### before\n\n```cpp\nfor(i = 0; i < N; i++) {\n  for(j = 0; j < N; j++) {\n    {\n      r = 0;\n      //y的行 * z的列\n      for(k = 0; k < N; k++) {\n        r = r + y[i][k] * z[k][j]\n      }\n    }\n  }\n}\n```\n\n<img src=\"image-20191217210134473.png\" alt=\"image-20191217210134473\" style=\"zoom:50%;\" />\n\n#### after\n\n*maximize accesses to loaded data before they are replaced*\n\n```cpp\nfor(jj = 0; jj < N; jj = jj + B) {\n  for(kk = 0; kk < N; kk = kk + B) {\n    for(i = 0; i < N; i++) {\n      for(j = jj; j < min(jj+B, N); j++) {\n        {\n          r = 0;\n          for(k = kk; k < min(kk); k++) {\n            r = r + y[i][k] * z[k][j];\n          }\n          x[i][j] = x[i][j] + r;\n        }\n      }\n    }\n  }\n}\n```\n\n<img src=\"image-20191217210322625.png\" alt=\"image-20191217210322625\" style=\"zoom:50%;\" />\n\n## 4.9 Hardware prefetching\n\n指令和数据都可以预取，既可以直接放在cache中，也可以放在一个访问速度快于main memory的外部缓冲区中。\n\n下面来看一下指令预取\n\n通常，处理器在一次缺失时提取两个块。被请求块和下一个相邻块\n\n* 被请求块放在他返回时的指令缓存中\n* 预取块放在指令流缓冲区中。\n\n请求时，如果发现被请求块位于指令流缓冲区，那么原缓存请求取消，从流缓冲区来读取这个块。并发出下一条预取请求\n\n* Reduce miss penalty/rate\n\n\n\n## 4.10 Compiler Prefetching\n\n作为hardware prefetching的替代方法。可以在处理器需要某一数据之前，由编译器插入请求该数据的预取指令\n\n有以下两种prefetch\n\n* **Register** **prefetch**\n\n  load the value into a register\n\n* **Cache** **prefetch**\n\n  load data into the cache\n\n\n\n\n\n**Example**\n\n16-byte blocks;\n\n8-byte elements for a and b;\n\nwrite-back strategy\n\na\\[0][0] miss, copy both a\\[0][0],a\\[0][1] as one block contains 16/8 = 2;\n\n***before***\n\n```cpp\nfor(i = 0; i < 3; i = i + 1)\n  for(j = 0; j < 100; j = j + 1)\n    a[i][j] = b[j][0] * b[j + 1][0]\n```\n\n缺失次数\n\n对于a, $3\\times(100/2)=150$次缺失\n\n对于b, b不会从空间局部性受益，但是可以从时间局部性受益\n\nb从b[0]\\[0]访问到b[100]\\[0]一共有101次缺失\n\n总共251次缺失\n\n***after prefetching***\n\n```cpp\nfor(j = 0; j < 100; j++) {\n  prefetch(b[j+7][0]);\n  prefetch(a[0][j+7]);\n  a[0][j] = b[j][0] * b[j+1][0];\n}\nfor(i = 1; i < 3; i++) {\n  for(j = 0; j < 100; j++) {\n\t\tprefetch(a[i][j+7]);\n    a[i][j] = b[j][0] * b[j+1][0];\n  }\n}\n```\n\n修改后，将会预取a[i]\\[7]---a[i]\\[99]和b[7]\\[0]--b[100]\\[0]\n\n所以非预取缺失只会出现在前几个循环\n\n* 第一个loop访问b[0]\\[0]---b[6]\\[0]的7次缺失\n* 第一个loop访问a[0]\\[0]--a[0]\\[7]的4次缺失\n* 第二个loop访问a[1]\\[0]--a[1]\\[6]的4次缺失\n* 第二个loop访问a[2]\\[0]--a[2]\\[6]的4次缺失\n\n总共有19次非预取缺失\n\n\n\n**Reduce** miss penalty/rate\n\n# 5. Memory\n\nPerformance Measures\n\n* **Latency**\n\n{% note warning%}\n\n the time to retrieve the first word of the block\n\n{% endnote %}\n\n important for caches;\n\n harder to reduce;\n\n> **access time**: the time between when a read is requested and when the desired word arrives;\n>\n> **cycle time**: the minimum time between unrelated requests to memory;\n>\n> *or* the minimum time between the start of an access and the start of the next access;\n\n* **Bandwidth** \n\nthe time to retrieve the rest of this block\n\n\n\n## 5.1 RAM\n\n<a href=\"https://www.zhihu.com/question/30492703\">Zhihu Birkee's answer</a>\n\nRAM，Random-Access Memory，即随机存取存储器，其实就是内存，断电会丢失数据。\n主要分为SRAM（static）和DRAM（dynamic)。主要的区别在于存储单元，DRAM使用电容电荷进行存储。需要一直刷新充电。SRAM是用锁存器锁住信息，不需要刷新。但也需要充电保持。\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104433202.png\" alt=\"image-20191209104433202\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM的基本存储单元</h4>     \n    </div>     \n    <p>利用一个晶体管进行控制电容的充放电</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104458720.png\" alt=\"image-20191209104458720\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM一般的寻址模式</h4>     \n    </div>     \n    <p>控制的晶体管集成在单个存储单元中</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n## 5.2 SRAM for cache[Static Random Access Memory]\n\n* Six transistors per bit to prevent the information from being disturbed when read\n\n* Don’t need to refresh, so access time is very close to cycle time\n\n\n\n## 5.3 DRAM for main memory[Dynamic Random Access Memory]\n\n<center><img src=\"image-20191209105411600.png\" alt=\"image-20191209105411600\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191209105418930.png\" alt=\"image-20191209105418930\" style=\"zoom:30%;\" /></center>\n<p>bing row into row buffer</p>\n<center><img src=\"image-20191209105429474.png\" alt=\"image-20191209105429474\" style=\"zoom:30%;\"/></center>\n<p>select Data via Multiplexor</p>\n<center><img src=\"image-20191209105442259.png\" alt=\"image-20191209105442259\" style=\"zoom:30%;\"/></center>\n<p>Data selected</p>\n<center><img src=\"image-20191209105451917.png\" alt=\"image-20191209105451917\" style=\"zoom:30%;\"/></center>\n<p>Row buffer hit</p>\n<center><img src=\"image-20191209105459461.png\" alt=\"image-20191209105459461\" style=\"zoom:30%;\"/></center>\n<p>Row buffer conflict</p>\n\n\n\n<br>\n\n\n\n\n## 5.6 提高存储器的可靠性\n\n### Error type\n\n* **Soft errors**\n\n{% note info %}\n\n changes to a cell’s contents, not a change in the circuitry\n\n{% endnote %}\n\n* **Hard errors**\n\n{% note info%}\n\n permanent changes in the operation of one or more memory cells\n\n{% endnote %}\n\n### Error detection and fix\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Parity only</h4>     \n    </div>     \n    <p>only one bit of overhead to detect a single error in a sequence of bits;</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>ECC only</h4>     \n    </div>     \n    <p>detect two errors and correct a single error with 8-bit overhead per 64 data bits</p>  \n  </div>\n </div></td>\n    <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Chipkill</h4>     \n    </div>     \n    <p>类似于在磁盘中使用RAID方法，它分散数据和ECC信息，在单个存储器芯片完全失效时，可以从其余存储器芯片中重构丢失数据</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n# 6. Disk\n\n\n\n\n\n<div class=\"item\">   \n  <div class=\"item__image\"> \n    <img class=\"image image--lg\" src=\"image-20191209113803942.png\" alt=\"image-20191209113803942\" style=\"zoom:50%;\" />\n    <img class=\"image image--lg\" src=\"image-20191209113823956.png\" alt=\"image-20191209113823956\" style=\"zoom:50%;\" />   \n  </div>   \n  <div class=\"item__content\">     \n  <div class=\"item__header\">       \n    <h4>Disk</h4>     \n  </div>     \n  <div class=\"item__description\">     \n    <p>Sector: minimum storage unit. A block may span multiple sectors</p>\n     <p>Cluster:(dis)contiguous groups of sectors to reduce the overhead of managing on-disk data structures; may span more than one track</p>    \n  </div>   \n  </div> \n</div>\n\n\nAreal density = $\\frac{Tracks}{Inch}$ on a disk surface $\\times$ $\\frac{Bits}{Inch}$ on a track\n\n\n\n## 6.1 RAID[Redundant Arrays of Inepensive Disk]\n\n* RAID 0: No Redundancy\n* RAID 1: Mirroring / Shadowing\n\n> Two copies for every piece of data\n>\n> one logical write = two physical writes\n>\n> 100% capacity/space  overhead\n\n<center><img src=\"IMG_2C62CE9D9D16-1.jpeg\" alt=\"IMG_2C62CE9D9D16-1\" style=\"zoom:50%;\" /></center>\n\n* RAID 2:\n\n> Each bit of data word is written to a data disk drive\n>\n> Each data word has its (Hamming Code) ECC word recorded on the ECC disks\n>\n> On read, the ECC code verifies correct data or corrects single disks errors\n\n<center><img src=\"image-20191216120558419.png\" alt=\"image-20191216120558419\" style=\"zoom:50%;\" /></center>\n\n* RAID 3:\n\n> RAID 3 P校验盘存的是前面所有盘数据的和。\n>\n> 他很慢，因为每读取一次磁盘数据，校验时要读取其他所有磁盘才能算校验和\n>\n> 磁盘坏了的话，也可以通过checksum恢复数据\n\n<center><img src=\"IMG_E9E135911744-1.png\" alt=\"IMG_E9E135911744-1\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216121018499.png\" alt=\"image-20191216121018499\" style=\"zoom:50%;\" /></center>\n\n* RAID 4\n\n<center><img src=\"IMG_17517EAA2585-1.png\" alt=\"IMG_17517EAA2585-1\" style=\"zoom: 33%;\" /></center>\n\n* RAID 5\n\n<center><img src=\"IMG_8BFCBD97FD85-1.png\" alt=\"IMG_8BFCBD97FD85-1\" style=\"zoom:30%;\" /></center>\n\n* RAID 6\n\n> row parity\n\n<center><img src=\"image-20191216130127847.png\" alt=\"image-20191216130127847\" style=\"zoom:30%;\" /></center>\n\n> Diagonal parity\n\n<center><img src=\"image-20191216130657742.png\" alt=\"image-20191216130657742\" style=\"zoom:30%;\" /></center>\n\n看一个例子\n\ndisk 1和disk 3 double failure\n\n<center><img src=\"image-20191216130845614.png\" alt=\"image-20191216130845614\" style=\"zoom:30%;\" /></center>\n\nFirst recover Disk 3 stripe 0. Because its diagonal parity is independent from the other failed disk 1.\n\n<center><img src=\"image-20191216130921114.png\" alt=\"image-20191216130921114\" style=\"zoom:30%;\" /></center>\n\nWhen Disk 3 stripe 0 is recoverd, then we can recover Disk 1 stripe 3. Because on its row, only its stripe is failed. So we can use the row parity to recover the stripe.\n\n<center><img src=\"image-20191216130953500.png\" alt=\"image-20191216130953500\" style=\"zoom:30%;\" /></center>\n\nNow, we have recovered Disk 1 stripe 3 and Disk 3 stripe 0\n\n<center><img src=\"image-20191216131127165.png\" alt=\"image-20191216131127165\" style=\"zoom:30%;\" /></center>\n\n以下同理\n\n<center><img src=\"image-20191216131242663.png\" alt=\"image-20191216131242663\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131302430.png\" alt=\"image-20191216131302430\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131334869.png\" alt=\"image-20191216131334869\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131357343.png\" alt=\"image-20191216131357343\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131420435.png\" alt=\"image-20191216131420435\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131449208.png\" alt=\"image-20191216131449208\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131514362.png\" alt=\"image-20191216131514362\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131536642.png\" alt=\"image-20191216131536642\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131556362.png\" alt=\"image-20191216131556362\" style=\"zoom:30%;\" /></center>\n\n# 7. I/O performance\n\n### unique measures\n\n* Diversity\n\n> which I/O devices can connect to the computer system?\n\n* Capacity\n\n> how many I/O devices can connect to a computer system?\n\n### Metrics\n\n* response time[latency]\n\n* throughout[bandwidth]\n\n<center><img src=\"image-20191216102829183.png\" alt=\"image-20191216102829183\" style=\"zoom:50%;\" /></center>\n\n## 7.1 Throughout VS Response Time\n\n***Transaction***\n\n> An interation between human and computer is called ***<u>transaction</u>***\n\nA ***<u>transaction time</u>*** is divided into three parts:\n\n> * <u>entry time</u>\n>\n> > The time for user to enter the command\n>\n> * <u>system response time</u>\n>\n> > The time between when the user enters the command and the complete response is displayed\n>\n> * <u>think time</u>\n>\n> > The time from the reception of the response until the user begins to ***<u>enter the next command</u>***\n\n<center><img src=\"image-20191216210721189.png\" alt=\"image-20191216210721189\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191216210659441.png\" alt=\"image-20191216210659441\" style=\"zoom:50%;\" /></center>\n\nMore transaction time reduction than just the response time reduction. People need less time to think when given a faster response\n\n\n\n## 7.2 Transaction-Processing Benchmarks\n\n### A. SPEC\n\n### B. TPC_C\n\n\n\n## 7.3 A little Queuing Theory[to calculate response time and throughput]\n\n<center><img src=\"image-20191216104938324.png\" alt=\"image-20191216104938324\" style=\"zoom:50%;\" /></center>\n\n***Flow-balanced State***\n\n* If the system is in **steady state**,  then the number of tasks entering the system must equal the number of tasks leaving the system\n\n* This **flow-balanced state** is necessary but not sufficient for steady state\n\n* The system has reached **steady state** if the system has been observed for a sufficiently long time and  mean waiting times stabilize\n\n\n\n### A. little's law[important]\n\n#### i. Assumptions\n\n{%note info%}\n\n input rate = output rate; \n\n a steady supply of tasks independent for how long they wait for service;\n\n{% endnote %}\n\n#### ii. little's law\n\n{%note error%}\n\nMean number of tasks in system =  Arrival rate $\\times$ Mean response time\n\n注意arrival rate 表示单位时间到了几个task\n\n{%endnote%}\n\n#### iii. single-server model\n\n<center><img src=\"image-20191216214128113.png\" alt=\"image-20191216214128113\" style=\"zoom: 40%;\" /></center>\n\n* $Time\\_{server}$  —Average time to service a task; average  $service\\_{rate}=1/Time\\_{server}$\n* $Time_{queue}$—Average time per task in the queue.\n* $Time\\_{system}$ —Average time per task in the system, or the response time, which is $Time\\_{queue}+Time\\_{server}$ .\n* Arrival rate—Average number of arriving tasks/second\n* $Length_{server}$—Average number of tasks in service.\n* $Length_{queue}$—Average length of queue.\n* $Length\\_{system}$—Average number of tasks in system, which is $Length\\_{server}+Length\\_{queue}$\n\n***Server Utilization***\n\n{% note info %}\n\nServer utilization = Arrival rate$\\times$ $Time_{server}$\n\n{% endnote %}\n\n<center><img src=\"image-20191216110406290.png\" alt=\"image-20191216110406290\" style=\"zoom:50%;\" /></center>\n\n<br/>\n\n***Time queue***\n\n$Time\\_{queue}=Length\\_{queue}\\times Time\\_{server}+$Mean time to complete the task being serviced when new task arrives if server is busy\n\n$Time\\_{queue}=Time\\_{server}\\times \\frac{Server\\;utilization}{1-Server\\; utilization}$\n\n$$\\begin{equation}\\begin{aligned}Length_{queue}=&Arrival\\; rate\\times Time_{server}\\times\\frac{Server\\;utilization}{1-Server\\; utilization}\\\\ =&\\frac{Server\\; utilization^2}{1-Server\\; utilization}\\end{aligned}\\end{equation}$$\n\n\n\n#### iv. M/M/1 queue\n\n> **M**: *Markov*\n>\n> exponentially random request arrival;\n>\n> **M**: *Markov*\n>\n> exponentially random service time\n>\n> **1**\n>\n> single server\n\n**assumptions**\n\n> The system is in equilibrium\n>\n> *Interarrival* *times* [times between two successive requests arriving] are exponentionally distributed\n>\n> *Infinite population model*: unlimited number of sources of requests\n>\n> Server starts on the next job immediately after finishing prior one\n>\n> FIFO queue with unlimited length\n>\n> One server only\n\n<center><img src=\"image-20191216222544839.png\" alt=\"image-20191216222544839\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222600418.png\" alt=\"image-20191216222600418\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222618484.png\" alt=\"image-20191216222618484\" style=\"zoom:50%;\" /></center>\n\n#### v. M/M/m queue\n\n<center><img src=\"image-20191216222740597.png\" alt=\"image-20191216222740597\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222905001.png\" alt=\"image-20191216222905001\" style=\"zoom:40%;\" /></center>","source":"_posts/ComputerArchitecture/Storage.md","raw":"---\ntitle: CA - Storage\ndate: 2019-12-08 15:39:48\ntags: Computer Architecture\ncategories: Computer Architecture\nindex_img: /img/image-20191209103141041.png\n---\n\n# 1. Introduction\n\n<center><img src=\"image-20191208134608723.png\" alt=\"image-20191208134608723\" style=\"zoom:50%;\" /></center>\n\n## 1.1 缓存性能\n\nCPU execution time\n\n$$=(CPU\\, clock\\, cycles + Memory\\, stall\\, cycles)\\times Clock\\, cycle\\, time$$\n\n{:.warning}\n\n这里CPU clock cicles包括handle cache hit/miss的时间\n\n<center><img src=\"image-20191208135106480.png\" alt=\"image-20191208135106480\" style=\"zoom:60%;\" /></center>\n<center><img src=\"image-20191208135244903.png\" alt=\"image-20191208135244903\" style=\"zoom:60%;\" /></center>\n\n看一道例题\n\n> a computer with CPI=1 when cache hit.  \n>\n> 50% instructions are loads and stores;\n>\n> 2% miss rate, 25 cc miss penalty;\n>\n> **Q:** how much faster would the computer be if all instructions were cache hits?\n\nAnswer:\n\n1. always hit:\n\nCPU execution time = (CPU clocks cycles + Memory stall cycles) * clock cycle\n\n=$$(IC \\times CPI + 0) \\times clock\\,cycle$$\n\n=$$IC \\times clock\\, cycle$$\n\n<br/>\n\n2. with misses\n\nMemory stall cycles\n\n= $IC \\times \\frac{Memory\\, accesses}{Instruction}\\times Miss\\, rate\\times Miss\\, penalty$\n\n=$IC\\times(1+0.5)\\times 0.02\\times 25$\n\n=$IC\\times 0.75$\n\n\n\nmemory accesses=1.5是因为执行任何一条指令都要访问memory取指令，并且50%的指令是load, store 因此 1+0.5=1.5\n\n\n\nCPU execution time = (CPU clocks cycles + Memory stall cycles) $\\times$ clock cycle\n\n=$(IC\\times 1.0+IC\\times 0.75)\\times$clock cycle\n\n=$1.75\\times $clock cycle\n\n所以比值是1.75\n\n\n\n## 1.2 4个存储器层次结构问题\n\nQ1: Where can a block be placed in the upper level? (block placement)\n\nQ2: How is a block found if it is in the upper level? (block identification)\n\nQ3: Which block should be replaced on a miss? (block replacement)\n\nQ4: What happens on a write? (write strategy)\n\n<center><img src=\"image-2019120874232.png\" alt=\"截屏2019-12-08下午7.42.32\" style=\"zoom:67%;\" /></center>\n<center><img src=\"image-20191208194519623.png\" alt=\"image-20191208194519623\" style=\"zoom: 67%;\" /></center>\n\n### A. Write Strategy\n\n`Write hit`\n\n* write-through: info is written to both the block in the cache and to the block in the lower-level memory\n* write-back: info is written only to the block in the cache;  to the main memory only when the modified cache block is replaced[dirty bit]\n\n`Write miss`\n\n* Write allocate: data at the missed-**write** location is loaded to cache, followed by a **write**-hit operation  \n* No-write allocate[write around]: data at the missed-**write** location is not loaded to cache, and is written directly to the backing store.  ;  *until the program tries to read the block, the data is loaded to cache;*\n\n\n\n<center><img src=\"image-20191208201918610.png\" alt=\"image-20191208201918610\" style=\"zoom:50%;\" /></center>\n\n1. No-Write allocate:  4 misses + 1 hit\n\n<center><img src=\"image-20191208202025669.png\" alt=\"image-20191208202025669\" style=\"zoom:50%;\" /></center>\n\n2. Write allocate:  2 misses + 3 hits\n\n<center><img src=\"image-20191208202722945.png\" alt=\"image-20191208202722945\" style=\"zoom:50%;\" /></center>\n\n# 2. 缓存性能\n\n\n\n### Hit or Miss: How long will it take?\n\nAverage memory access time = Hit time + Miss rate x Miss penalty\n\n* **Example**\n\n> 16KB instr cache + 16KB data cache;\n>\n> or, 32KB unified cache;\n>\n> 36% data transfer instructions;\n>\n> (load/store takes 1 extra cc on unified cache)\n>\n> 1 CC hit; 200 CC miss penalty;\n\n<center><img src=\"image-20191208204528711.png\" alt=\"image-20191208204528711\" style=\"zoom:30%;\" /></center>\n\n> **Q1:** split cache or unified cache has lower miss rate? \n\nAnswer:\n\n<center><img src=\"image-20191208204804983.png\" alt=\"image-20191208204804983\" style=\"zoom:40%;\" /></center>\n\n1. split cache\n\n16KB instruction Miss rate\n\n​\t\t= $$\\frac{3.82}{1000}/1=0.004$$\n\n16KB data miss rate\n\n​\t\t=$$\\frac{40.9}{1000}/0.36=0.114$$\n\nassume 74% of memory accesses are instruction references\n\nOverall miss rate\n\n​\t\t=$$(74\\%\\times 0.004)+(26\\%\\times 0.114)=0.0326$$\n\n2. unified cache\n\nMiss rate\n\n=$$\\frac{43.3}{1000}/(1.0+0.36)=0.0318$$\n\n> **Q2:** average memory access time?\n\n<center><img src=\"image-20191208205644462.png\" alt=\"image-20191208205644462\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191208205754992.png\" alt=\"image-20191208205754992\" style=\"zoom:40%;\" /></center>\n\n## 2.1 存储器平均访问时间与处理器性能\n\n\n\n# 3. Six Basic Cache Optimizations  \n\n我们将所有缺失分成三类\n\n* 强制缺失[Compulsory]\n\n  cold-start/first-reference misses;\n\n* 容量缺失[Capacity]\n\n  cache size limit;\n\n   blocks discarded and later retrieved;\n\n* 冲突缺失\n\n  collision misses: associativity\n\n  a block discarded and later retrieved in a set;\n\n<center><img src=\"image-20191208213224033.png\" alt=\"image-20191208213224033\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213207928.png\" alt=\"image-20191208213207928\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213148539.png\" alt=\"image-20191208213148539\" style=\"zoom:30%;\" /></center>\n\n## 3.1 Larger Block size\n\n* **Reduce** compulsory misses\n\n  ​\tLeverage spatial locality\n\n* **Reduce** static power\n\n  ​\tblock size增大，地址里面index位就变多，tag位数就变少，比较时需要的工作量就变少\n\n* **Increase** conflict/capacity misses\n\n  ​\tFewer block in the cache\n\n<center><img src=\"image-20191208214954621.png\" alt=\"image-20191208214954621\" style=\"zoom: 30%;\" /></center>\n\n#### Example\n\n<center><img src=\"image-20191208215035983.png\" alt=\"image-20191208215035983\" style=\"zoom:40%;\" /></center>\n\n**Answer**\n\n avg mem access time\n\n​\t\t=hit time + miss rate x miss penalty\n\n{% note info %}\n\n assume 1-CC hit time\n\n for a 256-byte block in a 256 KB cache:\n\n avg mem access time\n\n​\t\t= 1 + 0.49% x (80 + 2x256/16) = 1.5 cc\n\n{% endnote %}\n\n 2x256/16是因为存储器2cc能给cache传回16bytes\n\n\n\n## 3.2 Larger cache\n\n* **Reduce** capacity misses\n\n* **Increase** hit time, cost, and power\n\n\n\n## 3.3 Higher Associativity\n\n* **Reduce** conflict misses\n\n* **Increase** hit time\n\n\n\n## 3.4 Multilevel cache\n\n* **Reduce** miss penalty\n\n<br/>\n\n#### A. Two-level cache\n\n Add another level of cache between the original cache and memory\n\n* **L1**: small enough to match the clock cycle time of the fast processor;\n\n* **L2**: large enough to capture many accesses that would go to main memory, lessening miss penalty\n\n<center><img src=\"image-20191208220714030.png\" alt=\"image-20191208220714030\" style=\"zoom:50%;\" /></center>\n\n#### B. Average memory access time\n\n=Hit timeL1 + Miss rateL1 x Miss penaltyL1\n\n=Hit timeL1 + Miss rateL1\n\n x(Hit timeL2+Miss rateL2xMiss penaltyL2)\n\n\n\n#### C. Average mem stalls per instruction\n\n=Misses per instructionL1 x Hit timeL2\n\n \\+ Misses per instrL2 x Miss penaltyL2\n\n\n\n#### D. Local miss rate\n\n the number of misses in a cache\n\n divided by the total number of mem accesses to <u>this cache</u>;\n\n {:.info}\n\n分成 Miss rateL1, Miss rateL2\n\n#### E. Global miss rate\n\n the number of misses in the cache \n\n divided by the number of mem accesses generated by the processor;\n\n {:.info}\n\nL1的全局缺失率Miss rate**L1**,<u>L2的全局缺失率 Miss rateL1 x Miss rateL2</u>\n\n\n\n#### Example\n\n> 1000 mem references -> 40 misses in L1 and 20 misses in L2;\n>\n> miss penalty from L2 is 200 cc;\n>\n> hit time of L2 is 10 cc;\n>\n> hit time of L1 is 1 cc;\n>\n> 1.5 mem references per instruction;\n\n>  **Q: 1.** various miss rates?\n\n **L1:** local = global\n\n 40/1000 = 4%\n\n **L2:**\n\n local: 20/40 = 50%\n\n global: 20/1000 = 2%\n\n> **Q: 2.** avg mem access time?\n\naverage memory access time\n\n=Hit timeL1 + Miss rateL1\n\n x(Hit timeL2+Miss rateL2xMiss penaltyL2)\n\n=1 + 4% x (10 + 50% x 200)\n\n=5.4\n\n>  **Q: 3.** avg stall cycles per instruction?\n\naverage stall cycles per instruction\n\n=Misses per instructionL1 x Hit timeL2\n\n \\+ Misses per instrL2 x Miss penaltyL2\n\n=(1.5x40/1000)x10+(1.5x20/1000)x200\n\n=6.6\n\n\n\n## 2.5  Prioritize read misses over writes\n\n* **Reduce** miss penalty\n\n{% note info %}\n\n这种方法使得在write buffer将数据写入memory之前，就可以为read操作提供服务\n\n{% endnote %}\n\n## 2.6 Avoid address translation during indexing cache\n\n虚拟缓存\n\n\n\n\n\n# 4. Ten advanced cache optimizations\n\n<center><img src=\"image-20191209100308445.png\" alt=\"image-20191209100308445\" style=\"zoom: 33%;\" /></center>\n\n## 4.1 Small and Simple First-Level Caches\n\n* Small size\n\n> support a fast clock cycle\n>\n> reduce power\n\n* Lower associativity\n\n> reduce both hit time and power\n>\n> (direct-mapped caches can overlap the tag check with the transmission of the data)\n\n\n\n## 4.2 Way prediction\n\n•Reduce conflict misses and hit time\n\n•**Way prediction**\n\n *block predictor bits* are added to each block to predict the way/block within the set of the *next* cache access\n\n \n\n the multiplexor is set **early to select the desired block**;\n\n only a single tag comparison is performed **in parallel with cache reading**;\n\n a miss results in checking the other blocks for matches in the next clock cycle;\n\n## 4.3 Pipelined Cache Access\n\n* Increase cache bandwidth\n\n* Higher latency\n\n* Greater penalty on mispredicted branches and more clock cycles between issuing the load and using the data \n\n## 4.4 Nonblocking caches\n\n> 对于允许乱序执行的流水化计算机，他的处理器不必因为一次数据缓存缺失而停顿。在等待数据缓存返回缺失数据时，处理器可以继续从指令缓存中提取指令。nonblocking cache允许数据缓存在一次缺失期间继续提供缓存命令\n\n* Increase cache bandwidth\n\n\n\n## 4.5 Multibanked caches\n\n> Divide cache into independent banks that support simultaneous accesses\n>\n> Sequential interleaving spread the addresses of blocks sequentially across the banks\n\n<center><img src=\"image-20191217202233856.png\" alt=\"image-20191217202233856\" style=\"zoom:50%;\" /></center>\n\n* Increase cache bandwidth\n\n## 4.6 Critical Word First & Early Restart\n\n通常CPU只会request一个word, 但是一个cache line对应了很多个word\n\n* critical word first\n\n> 首先请求critical word也就是CPU request的那个word, 然后发送给CPU, 然后再去请求一个cache line剩余的部分\n\n* early restart\n\n> 按正常顺序获取word, 不需要等待一个cache line全部放入缓存再发送给处理器，而是critical word到了就直接发送给处理器，不需要等待还没有完成传输的word\n\n\n\n\n\n* Reduce miss penalty\n\n## 4.7 Merging Write buffer\n\nWrite merging merges four entries (with sequential addresses)  into a single buffer entry\n\n<center><img src=\"image-20191217203849064.png\" alt=\"image-20191217203849064\" style=\"zoom:50%;\" /></center>\n\n* Reduce miss penalty\n\n## 4.8 Compiler optimizations\n\n### A. Loop interchange\n\n#### before\n\n```cpp\nfor(j = 0; j < 100; j++) {\n  for(i = 0; i < 5000; i++) {\n    x[i][j] = 2 * x[i][j];\n  }\n}\n```\n\nx[i]\\[j]访问之后访问x[i+1]\\[j],这中间差了100个数据\n\n#### after\n\n```cpp\nfor(i = 0; i < 5000; i++) {\n  for(j = 0; j < 100; j++) {\n    x[i][j] = 2 * x[i][j]\n  }\n}\n```\n\nx[i]\\[j]访问之后访问x[i]\\[j+1], 这中间只差了一个数据，就可以按照数据存储的顺序来访问，增强了space locality。\n\n这样一次miss之后，load多个word进cache的话，缺失就会变少\n\n\n\n### B. Blocking[分块]\n\n#### before\n\n```cpp\nfor(i = 0; i < N; i++) {\n  for(j = 0; j < N; j++) {\n    {\n      r = 0;\n      //y的行 * z的列\n      for(k = 0; k < N; k++) {\n        r = r + y[i][k] * z[k][j]\n      }\n    }\n  }\n}\n```\n\n<img src=\"image-20191217210134473.png\" alt=\"image-20191217210134473\" style=\"zoom:50%;\" />\n\n#### after\n\n*maximize accesses to loaded data before they are replaced*\n\n```cpp\nfor(jj = 0; jj < N; jj = jj + B) {\n  for(kk = 0; kk < N; kk = kk + B) {\n    for(i = 0; i < N; i++) {\n      for(j = jj; j < min(jj+B, N); j++) {\n        {\n          r = 0;\n          for(k = kk; k < min(kk); k++) {\n            r = r + y[i][k] * z[k][j];\n          }\n          x[i][j] = x[i][j] + r;\n        }\n      }\n    }\n  }\n}\n```\n\n<img src=\"image-20191217210322625.png\" alt=\"image-20191217210322625\" style=\"zoom:50%;\" />\n\n## 4.9 Hardware prefetching\n\n指令和数据都可以预取，既可以直接放在cache中，也可以放在一个访问速度快于main memory的外部缓冲区中。\n\n下面来看一下指令预取\n\n通常，处理器在一次缺失时提取两个块。被请求块和下一个相邻块\n\n* 被请求块放在他返回时的指令缓存中\n* 预取块放在指令流缓冲区中。\n\n请求时，如果发现被请求块位于指令流缓冲区，那么原缓存请求取消，从流缓冲区来读取这个块。并发出下一条预取请求\n\n* Reduce miss penalty/rate\n\n\n\n## 4.10 Compiler Prefetching\n\n作为hardware prefetching的替代方法。可以在处理器需要某一数据之前，由编译器插入请求该数据的预取指令\n\n有以下两种prefetch\n\n* **Register** **prefetch**\n\n  load the value into a register\n\n* **Cache** **prefetch**\n\n  load data into the cache\n\n\n\n\n\n**Example**\n\n16-byte blocks;\n\n8-byte elements for a and b;\n\nwrite-back strategy\n\na\\[0][0] miss, copy both a\\[0][0],a\\[0][1] as one block contains 16/8 = 2;\n\n***before***\n\n```cpp\nfor(i = 0; i < 3; i = i + 1)\n  for(j = 0; j < 100; j = j + 1)\n    a[i][j] = b[j][0] * b[j + 1][0]\n```\n\n缺失次数\n\n对于a, $3\\times(100/2)=150$次缺失\n\n对于b, b不会从空间局部性受益，但是可以从时间局部性受益\n\nb从b[0]\\[0]访问到b[100]\\[0]一共有101次缺失\n\n总共251次缺失\n\n***after prefetching***\n\n```cpp\nfor(j = 0; j < 100; j++) {\n  prefetch(b[j+7][0]);\n  prefetch(a[0][j+7]);\n  a[0][j] = b[j][0] * b[j+1][0];\n}\nfor(i = 1; i < 3; i++) {\n  for(j = 0; j < 100; j++) {\n\t\tprefetch(a[i][j+7]);\n    a[i][j] = b[j][0] * b[j+1][0];\n  }\n}\n```\n\n修改后，将会预取a[i]\\[7]---a[i]\\[99]和b[7]\\[0]--b[100]\\[0]\n\n所以非预取缺失只会出现在前几个循环\n\n* 第一个loop访问b[0]\\[0]---b[6]\\[0]的7次缺失\n* 第一个loop访问a[0]\\[0]--a[0]\\[7]的4次缺失\n* 第二个loop访问a[1]\\[0]--a[1]\\[6]的4次缺失\n* 第二个loop访问a[2]\\[0]--a[2]\\[6]的4次缺失\n\n总共有19次非预取缺失\n\n\n\n**Reduce** miss penalty/rate\n\n# 5. Memory\n\nPerformance Measures\n\n* **Latency**\n\n{% note warning%}\n\n the time to retrieve the first word of the block\n\n{% endnote %}\n\n important for caches;\n\n harder to reduce;\n\n> **access time**: the time between when a read is requested and when the desired word arrives;\n>\n> **cycle time**: the minimum time between unrelated requests to memory;\n>\n> *or* the minimum time between the start of an access and the start of the next access;\n\n* **Bandwidth** \n\nthe time to retrieve the rest of this block\n\n\n\n## 5.1 RAM\n\n<a href=\"https://www.zhihu.com/question/30492703\">Zhihu Birkee's answer</a>\n\nRAM，Random-Access Memory，即随机存取存储器，其实就是内存，断电会丢失数据。\n主要分为SRAM（static）和DRAM（dynamic)。主要的区别在于存储单元，DRAM使用电容电荷进行存储。需要一直刷新充电。SRAM是用锁存器锁住信息，不需要刷新。但也需要充电保持。\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104433202.png\" alt=\"image-20191209104433202\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM的基本存储单元</h4>     \n    </div>     \n    <p>利用一个晶体管进行控制电容的充放电</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104458720.png\" alt=\"image-20191209104458720\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM一般的寻址模式</h4>     \n    </div>     \n    <p>控制的晶体管集成在单个存储单元中</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n## 5.2 SRAM for cache[Static Random Access Memory]\n\n* Six transistors per bit to prevent the information from being disturbed when read\n\n* Don’t need to refresh, so access time is very close to cycle time\n\n\n\n## 5.3 DRAM for main memory[Dynamic Random Access Memory]\n\n<center><img src=\"image-20191209105411600.png\" alt=\"image-20191209105411600\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191209105418930.png\" alt=\"image-20191209105418930\" style=\"zoom:30%;\" /></center>\n<p>bing row into row buffer</p>\n<center><img src=\"image-20191209105429474.png\" alt=\"image-20191209105429474\" style=\"zoom:30%;\"/></center>\n<p>select Data via Multiplexor</p>\n<center><img src=\"image-20191209105442259.png\" alt=\"image-20191209105442259\" style=\"zoom:30%;\"/></center>\n<p>Data selected</p>\n<center><img src=\"image-20191209105451917.png\" alt=\"image-20191209105451917\" style=\"zoom:30%;\"/></center>\n<p>Row buffer hit</p>\n<center><img src=\"image-20191209105459461.png\" alt=\"image-20191209105459461\" style=\"zoom:30%;\"/></center>\n<p>Row buffer conflict</p>\n\n\n\n<br>\n\n\n\n\n## 5.6 提高存储器的可靠性\n\n### Error type\n\n* **Soft errors**\n\n{% note info %}\n\n changes to a cell’s contents, not a change in the circuitry\n\n{% endnote %}\n\n* **Hard errors**\n\n{% note info%}\n\n permanent changes in the operation of one or more memory cells\n\n{% endnote %}\n\n### Error detection and fix\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Parity only</h4>     \n    </div>     \n    <p>only one bit of overhead to detect a single error in a sequence of bits;</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>ECC only</h4>     \n    </div>     \n    <p>detect two errors and correct a single error with 8-bit overhead per 64 data bits</p>  \n  </div>\n </div></td>\n    <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Chipkill</h4>     \n    </div>     \n    <p>类似于在磁盘中使用RAID方法，它分散数据和ECC信息，在单个存储器芯片完全失效时，可以从其余存储器芯片中重构丢失数据</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n# 6. Disk\n\n\n\n\n\n<div class=\"item\">   \n  <div class=\"item__image\"> \n    <img class=\"image image--lg\" src=\"image-20191209113803942.png\" alt=\"image-20191209113803942\" style=\"zoom:50%;\" />\n    <img class=\"image image--lg\" src=\"image-20191209113823956.png\" alt=\"image-20191209113823956\" style=\"zoom:50%;\" />   \n  </div>   \n  <div class=\"item__content\">     \n  <div class=\"item__header\">       \n    <h4>Disk</h4>     \n  </div>     \n  <div class=\"item__description\">     \n    <p>Sector: minimum storage unit. A block may span multiple sectors</p>\n     <p>Cluster:(dis)contiguous groups of sectors to reduce the overhead of managing on-disk data structures; may span more than one track</p>    \n  </div>   \n  </div> \n</div>\n\n\nAreal density = $\\frac{Tracks}{Inch}$ on a disk surface $\\times$ $\\frac{Bits}{Inch}$ on a track\n\n\n\n## 6.1 RAID[Redundant Arrays of Inepensive Disk]\n\n* RAID 0: No Redundancy\n* RAID 1: Mirroring / Shadowing\n\n> Two copies for every piece of data\n>\n> one logical write = two physical writes\n>\n> 100% capacity/space  overhead\n\n<center><img src=\"IMG_2C62CE9D9D16-1.jpeg\" alt=\"IMG_2C62CE9D9D16-1\" style=\"zoom:50%;\" /></center>\n\n* RAID 2:\n\n> Each bit of data word is written to a data disk drive\n>\n> Each data word has its (Hamming Code) ECC word recorded on the ECC disks\n>\n> On read, the ECC code verifies correct data or corrects single disks errors\n\n<center><img src=\"image-20191216120558419.png\" alt=\"image-20191216120558419\" style=\"zoom:50%;\" /></center>\n\n* RAID 3:\n\n> RAID 3 P校验盘存的是前面所有盘数据的和。\n>\n> 他很慢，因为每读取一次磁盘数据，校验时要读取其他所有磁盘才能算校验和\n>\n> 磁盘坏了的话，也可以通过checksum恢复数据\n\n<center><img src=\"IMG_E9E135911744-1.png\" alt=\"IMG_E9E135911744-1\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216121018499.png\" alt=\"image-20191216121018499\" style=\"zoom:50%;\" /></center>\n\n* RAID 4\n\n<center><img src=\"IMG_17517EAA2585-1.png\" alt=\"IMG_17517EAA2585-1\" style=\"zoom: 33%;\" /></center>\n\n* RAID 5\n\n<center><img src=\"IMG_8BFCBD97FD85-1.png\" alt=\"IMG_8BFCBD97FD85-1\" style=\"zoom:30%;\" /></center>\n\n* RAID 6\n\n> row parity\n\n<center><img src=\"image-20191216130127847.png\" alt=\"image-20191216130127847\" style=\"zoom:30%;\" /></center>\n\n> Diagonal parity\n\n<center><img src=\"image-20191216130657742.png\" alt=\"image-20191216130657742\" style=\"zoom:30%;\" /></center>\n\n看一个例子\n\ndisk 1和disk 3 double failure\n\n<center><img src=\"image-20191216130845614.png\" alt=\"image-20191216130845614\" style=\"zoom:30%;\" /></center>\n\nFirst recover Disk 3 stripe 0. Because its diagonal parity is independent from the other failed disk 1.\n\n<center><img src=\"image-20191216130921114.png\" alt=\"image-20191216130921114\" style=\"zoom:30%;\" /></center>\n\nWhen Disk 3 stripe 0 is recoverd, then we can recover Disk 1 stripe 3. Because on its row, only its stripe is failed. So we can use the row parity to recover the stripe.\n\n<center><img src=\"image-20191216130953500.png\" alt=\"image-20191216130953500\" style=\"zoom:30%;\" /></center>\n\nNow, we have recovered Disk 1 stripe 3 and Disk 3 stripe 0\n\n<center><img src=\"image-20191216131127165.png\" alt=\"image-20191216131127165\" style=\"zoom:30%;\" /></center>\n\n以下同理\n\n<center><img src=\"image-20191216131242663.png\" alt=\"image-20191216131242663\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131302430.png\" alt=\"image-20191216131302430\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131334869.png\" alt=\"image-20191216131334869\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131357343.png\" alt=\"image-20191216131357343\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131420435.png\" alt=\"image-20191216131420435\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131449208.png\" alt=\"image-20191216131449208\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131514362.png\" alt=\"image-20191216131514362\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131536642.png\" alt=\"image-20191216131536642\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131556362.png\" alt=\"image-20191216131556362\" style=\"zoom:30%;\" /></center>\n\n# 7. I/O performance\n\n### unique measures\n\n* Diversity\n\n> which I/O devices can connect to the computer system?\n\n* Capacity\n\n> how many I/O devices can connect to a computer system?\n\n### Metrics\n\n* response time[latency]\n\n* throughout[bandwidth]\n\n<center><img src=\"image-20191216102829183.png\" alt=\"image-20191216102829183\" style=\"zoom:50%;\" /></center>\n\n## 7.1 Throughout VS Response Time\n\n***Transaction***\n\n> An interation between human and computer is called ***<u>transaction</u>***\n\nA ***<u>transaction time</u>*** is divided into three parts:\n\n> * <u>entry time</u>\n>\n> > The time for user to enter the command\n>\n> * <u>system response time</u>\n>\n> > The time between when the user enters the command and the complete response is displayed\n>\n> * <u>think time</u>\n>\n> > The time from the reception of the response until the user begins to ***<u>enter the next command</u>***\n\n<center><img src=\"image-20191216210721189.png\" alt=\"image-20191216210721189\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191216210659441.png\" alt=\"image-20191216210659441\" style=\"zoom:50%;\" /></center>\n\nMore transaction time reduction than just the response time reduction. People need less time to think when given a faster response\n\n\n\n## 7.2 Transaction-Processing Benchmarks\n\n### A. SPEC\n\n### B. TPC_C\n\n\n\n## 7.3 A little Queuing Theory[to calculate response time and throughput]\n\n<center><img src=\"image-20191216104938324.png\" alt=\"image-20191216104938324\" style=\"zoom:50%;\" /></center>\n\n***Flow-balanced State***\n\n* If the system is in **steady state**,  then the number of tasks entering the system must equal the number of tasks leaving the system\n\n* This **flow-balanced state** is necessary but not sufficient for steady state\n\n* The system has reached **steady state** if the system has been observed for a sufficiently long time and  mean waiting times stabilize\n\n\n\n### A. little's law[important]\n\n#### i. Assumptions\n\n{%note info%}\n\n input rate = output rate; \n\n a steady supply of tasks independent for how long they wait for service;\n\n{% endnote %}\n\n#### ii. little's law\n\n{%note error%}\n\nMean number of tasks in system =  Arrival rate $\\times$ Mean response time\n\n注意arrival rate 表示单位时间到了几个task\n\n{%endnote%}\n\n#### iii. single-server model\n\n<center><img src=\"image-20191216214128113.png\" alt=\"image-20191216214128113\" style=\"zoom: 40%;\" /></center>\n\n* $Time\\_{server}$  —Average time to service a task; average  $service\\_{rate}=1/Time\\_{server}$\n* $Time_{queue}$—Average time per task in the queue.\n* $Time\\_{system}$ —Average time per task in the system, or the response time, which is $Time\\_{queue}+Time\\_{server}$ .\n* Arrival rate—Average number of arriving tasks/second\n* $Length_{server}$—Average number of tasks in service.\n* $Length_{queue}$—Average length of queue.\n* $Length\\_{system}$—Average number of tasks in system, which is $Length\\_{server}+Length\\_{queue}$\n\n***Server Utilization***\n\n{% note info %}\n\nServer utilization = Arrival rate$\\times$ $Time_{server}$\n\n{% endnote %}\n\n<center><img src=\"image-20191216110406290.png\" alt=\"image-20191216110406290\" style=\"zoom:50%;\" /></center>\n\n<br/>\n\n***Time queue***\n\n$Time\\_{queue}=Length\\_{queue}\\times Time\\_{server}+$Mean time to complete the task being serviced when new task arrives if server is busy\n\n$Time\\_{queue}=Time\\_{server}\\times \\frac{Server\\;utilization}{1-Server\\; utilization}$\n\n$$\\begin{equation}\\begin{aligned}Length_{queue}=&Arrival\\; rate\\times Time_{server}\\times\\frac{Server\\;utilization}{1-Server\\; utilization}\\\\ =&\\frac{Server\\; utilization^2}{1-Server\\; utilization}\\end{aligned}\\end{equation}$$\n\n\n\n#### iv. M/M/1 queue\n\n> **M**: *Markov*\n>\n> exponentially random request arrival;\n>\n> **M**: *Markov*\n>\n> exponentially random service time\n>\n> **1**\n>\n> single server\n\n**assumptions**\n\n> The system is in equilibrium\n>\n> *Interarrival* *times* [times between two successive requests arriving] are exponentionally distributed\n>\n> *Infinite population model*: unlimited number of sources of requests\n>\n> Server starts on the next job immediately after finishing prior one\n>\n> FIFO queue with unlimited length\n>\n> One server only\n\n<center><img src=\"image-20191216222544839.png\" alt=\"image-20191216222544839\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222600418.png\" alt=\"image-20191216222600418\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222618484.png\" alt=\"image-20191216222618484\" style=\"zoom:50%;\" /></center>\n\n#### v. M/M/m queue\n\n<center><img src=\"image-20191216222740597.png\" alt=\"image-20191216222740597\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222905001.png\" alt=\"image-20191216222905001\" style=\"zoom:40%;\" /></center>","slug":"ComputerArchitecture/Storage","published":1,"updated":"2020-08-11T08:28:42.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpp3i3f00050ruf9jsp4fv0","content":"<h1 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1. Introduction\"></a>1. Introduction</h1><center><img src=\"image-20191208134608723.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208134608723\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"1-1-缓存性能\"><a href=\"#1-1-缓存性能\" class=\"headerlink\" title=\"1.1 缓存性能\"></a>1.1 缓存性能</h2><p>CPU execution time</p>\n<script type=\"math/tex; mode=display\">=(CPU\\, clock\\, cycles + Memory\\, stall\\, cycles)\\times Clock\\, cycle\\, time</script><p>{:.warning}</p>\n<p>这里CPU clock cicles包括handle cache hit/miss的时间</p>\n<center><img src=\"image-20191208135106480.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208135106480\" style=\"zoom:60%;\" /></center>\n<center><img src=\"image-20191208135244903.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208135244903\" style=\"zoom:60%;\" /></center>\n\n<p>看一道例题</p>\n<blockquote>\n<p>a computer with CPI=1 when cache hit.  </p>\n<p>50% instructions are loads and stores;</p>\n<p>2% miss rate, 25 cc miss penalty;</p>\n<p><strong>Q:</strong> how much faster would the computer be if all instructions were cache hits?</p>\n</blockquote>\n<p>Answer:</p>\n<ol>\n<li>always hit:</li>\n</ol>\n<p>CPU execution time = (CPU clocks cycles + Memory stall cycles) * clock cycle</p>\n<p>=<script type=\"math/tex\">(IC \\times CPI + 0) \\times clock\\,cycle</script></p>\n<p>=<script type=\"math/tex\">IC \\times clock\\, cycle</script></p>\n<p><br/></p>\n<ol>\n<li>with misses</li>\n</ol>\n<p>Memory stall cycles</p>\n<p>= $IC \\times \\frac{Memory\\, accesses}{Instruction}\\times Miss\\, rate\\times Miss\\, penalty$</p>\n<p>=$IC\\times(1+0.5)\\times 0.02\\times 25$</p>\n<p>=$IC\\times 0.75$</p>\n<p>memory accesses=1.5是因为执行任何一条指令都要访问memory取指令，并且50%的指令是load, store 因此 1+0.5=1.5</p>\n<p>CPU execution time = (CPU clocks cycles + Memory stall cycles) $\\times$ clock cycle</p>\n<p>=$(IC\\times 1.0+IC\\times 0.75)\\times$clock cycle</p>\n<p>=$1.75\\times $clock cycle</p>\n<p>所以比值是1.75</p>\n<h2 id=\"1-2-4个存储器层次结构问题\"><a href=\"#1-2-4个存储器层次结构问题\" class=\"headerlink\" title=\"1.2 4个存储器层次结构问题\"></a>1.2 4个存储器层次结构问题</h2><p>Q1: Where can a block be placed in the upper level? (block placement)</p>\n<p>Q2: How is a block found if it is in the upper level? (block identification)</p>\n<p>Q3: Which block should be replaced on a miss? (block replacement)</p>\n<p>Q4: What happens on a write? (write strategy)</p>\n<center><img src=\"image-2019120874232.png\" srcset=\"/img/loading.gif\" alt=\"截屏2019-12-08下午7.42.32\" style=\"zoom:67%;\" /></center>\n<center><img src=\"image-20191208194519623.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208194519623\" style=\"zoom: 67%;\" /></center>\n\n<h3 id=\"A-Write-Strategy\"><a href=\"#A-Write-Strategy\" class=\"headerlink\" title=\"A. Write Strategy\"></a>A. Write Strategy</h3><p><code>Write hit</code></p>\n<ul>\n<li>write-through: info is written to both the block in the cache and to the block in the lower-level memory</li>\n<li>write-back: info is written only to the block in the cache;  to the main memory only when the modified cache block is replaced[dirty bit]</li>\n</ul>\n<p><code>Write miss</code></p>\n<ul>\n<li>Write allocate: data at the missed-<strong>write</strong> location is loaded to cache, followed by a <strong>write</strong>-hit operation  </li>\n<li>No-write allocate[write around]: data at the missed-<strong>write</strong> location is not loaded to cache, and is written directly to the backing store.  ;  <em>until the program tries to read the block, the data is loaded to cache;</em></li>\n</ul>\n<center><img src=\"image-20191208201918610.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208201918610\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>No-Write allocate:  4 misses + 1 hit</li>\n</ol>\n<center><img src=\"image-20191208202025669.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208202025669\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>Write allocate:  2 misses + 3 hits</li>\n</ol>\n<center><img src=\"image-20191208202722945.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208202722945\" style=\"zoom:50%;\" /></center>\n\n<h1 id=\"2-缓存性能\"><a href=\"#2-缓存性能\" class=\"headerlink\" title=\"2. 缓存性能\"></a>2. 缓存性能</h1><h3 id=\"Hit-or-Miss-How-long-will-it-take\"><a href=\"#Hit-or-Miss-How-long-will-it-take\" class=\"headerlink\" title=\"Hit or Miss: How long will it take?\"></a>Hit or Miss: How long will it take?</h3><p>Average memory access time = Hit time + Miss rate x Miss penalty</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<blockquote>\n<p>16KB instr cache + 16KB data cache;</p>\n<p>or, 32KB unified cache;</p>\n<p>36% data transfer instructions;</p>\n<p>(load/store takes 1 extra cc on unified cache)</p>\n<p>1 CC hit; 200 CC miss penalty;</p>\n</blockquote>\n<center><img src=\"image-20191208204528711.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208204528711\" style=\"zoom:30%;\" /></center>\n\n<blockquote>\n<p><strong>Q1:</strong> split cache or unified cache has lower miss rate? </p>\n</blockquote>\n<p>Answer:</p>\n<center><img src=\"image-20191208204804983.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208204804983\" style=\"zoom:40%;\" /></center>\n\n<ol>\n<li>split cache</li>\n</ol>\n<p>16KB instruction Miss rate</p>\n<p>​        = <script type=\"math/tex\">\\frac{3.82}{1000}/1=0.004</script></p>\n<p>16KB data miss rate</p>\n<p>​        =<script type=\"math/tex\">\\frac{40.9}{1000}/0.36=0.114</script></p>\n<p>assume 74% of memory accesses are instruction references</p>\n<p>Overall miss rate</p>\n<p>​        =<script type=\"math/tex\">(74\\%\\times 0.004)+(26\\%\\times 0.114)=0.0326</script></p>\n<ol>\n<li>unified cache</li>\n</ol>\n<p>Miss rate</p>\n<p>=<script type=\"math/tex\">\\frac{43.3}{1000}/(1.0+0.36)=0.0318</script></p>\n<blockquote>\n<p><strong>Q2:</strong> average memory access time?</p>\n</blockquote>\n<center><img src=\"image-20191208205644462.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208205644462\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191208205754992.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208205754992\" style=\"zoom:40%;\" /></center>\n\n<h2 id=\"2-1-存储器平均访问时间与处理器性能\"><a href=\"#2-1-存储器平均访问时间与处理器性能\" class=\"headerlink\" title=\"2.1 存储器平均访问时间与处理器性能\"></a>2.1 存储器平均访问时间与处理器性能</h2><h1 id=\"3-Six-Basic-Cache-Optimizations\"><a href=\"#3-Six-Basic-Cache-Optimizations\" class=\"headerlink\" title=\"3. Six Basic Cache Optimizations\"></a>3. Six Basic Cache Optimizations</h1><p>我们将所有缺失分成三类</p>\n<ul>\n<li><p>强制缺失[Compulsory]</p>\n<p>cold-start/first-reference misses;</p>\n</li>\n<li><p>容量缺失[Capacity]</p>\n<p>cache size limit;</p>\n<p> blocks discarded and later retrieved;</p>\n</li>\n<li><p>冲突缺失</p>\n<p>collision misses: associativity</p>\n<p>a block discarded and later retrieved in a set;</p>\n</li>\n</ul>\n<center><img src=\"image-20191208213224033.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213224033\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213207928.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213207928\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213148539.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213148539\" style=\"zoom:30%;\" /></center>\n\n<h2 id=\"3-1-Larger-Block-size\"><a href=\"#3-1-Larger-Block-size\" class=\"headerlink\" title=\"3.1 Larger Block size\"></a>3.1 Larger Block size</h2><ul>\n<li><p><strong>Reduce</strong> compulsory misses</p>\n<p>​    Leverage spatial locality</p>\n</li>\n<li><p><strong>Reduce</strong> static power</p>\n<p>​    block size增大，地址里面index位就变多，tag位数就变少，比较时需要的工作量就变少</p>\n</li>\n<li><p><strong>Increase</strong> conflict/capacity misses</p>\n<p>​    Fewer block in the cache</p>\n</li>\n</ul>\n<center><img src=\"image-20191208214954621.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208214954621\" style=\"zoom: 30%;\" /></center>\n\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><center><img src=\"image-20191208215035983.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208215035983\" style=\"zoom:40%;\" /></center>\n\n<p><strong>Answer</strong></p>\n<p> avg mem access time</p>\n<p>​        =hit time + miss rate x miss penalty</p>\n<div class=\"note note-info\">\n            <p> assume 1-CC hit time</p><p> for a 256-byte block in a 256 KB cache:</p><p> avg mem access time</p><p>​        = 1 + 0.49% x (80 + 2x256/16) = 1.5 cc</p>\n          </div>\n<p> 2x256/16是因为存储器2cc能给cache传回16bytes</p>\n<h2 id=\"3-2-Larger-cache\"><a href=\"#3-2-Larger-cache\" class=\"headerlink\" title=\"3.2 Larger cache\"></a>3.2 Larger cache</h2><ul>\n<li><p><strong>Reduce</strong> capacity misses</p>\n</li>\n<li><p><strong>Increase</strong> hit time, cost, and power</p>\n</li>\n</ul>\n<h2 id=\"3-3-Higher-Associativity\"><a href=\"#3-3-Higher-Associativity\" class=\"headerlink\" title=\"3.3 Higher Associativity\"></a>3.3 Higher Associativity</h2><ul>\n<li><p><strong>Reduce</strong> conflict misses</p>\n</li>\n<li><p><strong>Increase</strong> hit time</p>\n</li>\n</ul>\n<h2 id=\"3-4-Multilevel-cache\"><a href=\"#3-4-Multilevel-cache\" class=\"headerlink\" title=\"3.4 Multilevel cache\"></a>3.4 Multilevel cache</h2><ul>\n<li><strong>Reduce</strong> miss penalty</li>\n</ul>\n<p><br/></p>\n<h4 id=\"A-Two-level-cache\"><a href=\"#A-Two-level-cache\" class=\"headerlink\" title=\"A. Two-level cache\"></a>A. Two-level cache</h4><p> Add another level of cache between the original cache and memory</p>\n<ul>\n<li><p><strong>L1</strong>: small enough to match the clock cycle time of the fast processor;</p>\n</li>\n<li><p><strong>L2</strong>: large enough to capture many accesses that would go to main memory, lessening miss penalty</p>\n</li>\n</ul>\n<center><img src=\"image-20191208220714030.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208220714030\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"B-Average-memory-access-time\"><a href=\"#B-Average-memory-access-time\" class=\"headerlink\" title=\"B. Average memory access time\"></a>B. Average memory access time</h4><p>=Hit timeL1 + Miss rateL1 x Miss penaltyL1</p>\n<p>=Hit timeL1 + Miss rateL1</p>\n<p> x(Hit timeL2+Miss rateL2xMiss penaltyL2)</p>\n<h4 id=\"C-Average-mem-stalls-per-instruction\"><a href=\"#C-Average-mem-stalls-per-instruction\" class=\"headerlink\" title=\"C. Average mem stalls per instruction\"></a>C. Average mem stalls per instruction</h4><p>=Misses per instructionL1 x Hit timeL2</p>\n<p> + Misses per instrL2 x Miss penaltyL2</p>\n<h4 id=\"D-Local-miss-rate\"><a href=\"#D-Local-miss-rate\" class=\"headerlink\" title=\"D. Local miss rate\"></a>D. Local miss rate</h4><p> the number of misses in a cache</p>\n<p> divided by the total number of mem accesses to <u>this cache</u>;</p>\n<p> {:.info}</p>\n<p>分成 Miss rateL1, Miss rateL2</p>\n<h4 id=\"E-Global-miss-rate\"><a href=\"#E-Global-miss-rate\" class=\"headerlink\" title=\"E. Global miss rate\"></a>E. Global miss rate</h4><p> the number of misses in the cache </p>\n<p> divided by the number of mem accesses generated by the processor;</p>\n<p> {:.info}</p>\n<p>L1的全局缺失率Miss rate<strong>L1</strong>,<u>L2的全局缺失率 Miss rateL1 x Miss rateL2</u></p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h4><blockquote>\n<p>1000 mem references -&gt; 40 misses in L1 and 20 misses in L2;</p>\n<p>miss penalty from L2 is 200 cc;</p>\n<p>hit time of L2 is 10 cc;</p>\n<p>hit time of L1 is 1 cc;</p>\n<p>1.5 mem references per instruction;</p>\n<p> <strong>Q: 1.</strong> various miss rates?</p>\n</blockquote>\n<p> <strong>L1:</strong> local = global</p>\n<p> 40/1000 = 4%</p>\n<p> <strong>L2:</strong></p>\n<p> local: 20/40 = 50%</p>\n<p> global: 20/1000 = 2%</p>\n<blockquote>\n<p><strong>Q: 2.</strong> avg mem access time?</p>\n</blockquote>\n<p>average memory access time</p>\n<p>=Hit timeL1 + Miss rateL1</p>\n<p> x(Hit timeL2+Miss rateL2xMiss penaltyL2)</p>\n<p>=1 + 4% x (10 + 50% x 200)</p>\n<p>=5.4</p>\n<blockquote>\n<p> <strong>Q: 3.</strong> avg stall cycles per instruction?</p>\n</blockquote>\n<p>average stall cycles per instruction</p>\n<p>=Misses per instructionL1 x Hit timeL2</p>\n<p> + Misses per instrL2 x Miss penaltyL2</p>\n<p>=(1.5x40/1000)x10+(1.5x20/1000)x200</p>\n<p>=6.6</p>\n<h2 id=\"2-5-Prioritize-read-misses-over-writes\"><a href=\"#2-5-Prioritize-read-misses-over-writes\" class=\"headerlink\" title=\"2.5  Prioritize read misses over writes\"></a>2.5  Prioritize read misses over writes</h2><ul>\n<li><strong>Reduce</strong> miss penalty</li>\n</ul>\n<div class=\"note note-info\">\n            <p>这种方法使得在write buffer将数据写入memory之前，就可以为read操作提供服务</p>\n          </div>\n<h2 id=\"2-6-Avoid-address-translation-during-indexing-cache\"><a href=\"#2-6-Avoid-address-translation-during-indexing-cache\" class=\"headerlink\" title=\"2.6 Avoid address translation during indexing cache\"></a>2.6 Avoid address translation during indexing cache</h2><p>虚拟缓存</p>\n<h1 id=\"4-Ten-advanced-cache-optimizations\"><a href=\"#4-Ten-advanced-cache-optimizations\" class=\"headerlink\" title=\"4. Ten advanced cache optimizations\"></a>4. Ten advanced cache optimizations</h1><center><img src=\"image-20191209100308445.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209100308445\" style=\"zoom: 33%;\" /></center>\n\n<h2 id=\"4-1-Small-and-Simple-First-Level-Caches\"><a href=\"#4-1-Small-and-Simple-First-Level-Caches\" class=\"headerlink\" title=\"4.1 Small and Simple First-Level Caches\"></a>4.1 Small and Simple First-Level Caches</h2><ul>\n<li>Small size</li>\n</ul>\n<blockquote>\n<p>support a fast clock cycle</p>\n<p>reduce power</p>\n</blockquote>\n<ul>\n<li>Lower associativity</li>\n</ul>\n<blockquote>\n<p>reduce both hit time and power</p>\n<p>(direct-mapped caches can overlap the tag check with the transmission of the data)</p>\n</blockquote>\n<h2 id=\"4-2-Way-prediction\"><a href=\"#4-2-Way-prediction\" class=\"headerlink\" title=\"4.2 Way prediction\"></a>4.2 Way prediction</h2><p>•Reduce conflict misses and hit time</p>\n<p>•<strong>Way prediction</strong></p>\n<p> <em>block predictor bits</em> are added to each block to predict the way/block within the set of the <em>next</em> cache access</p>\n<p> the multiplexor is set <strong>early to select the desired block</strong>;</p>\n<p> only a single tag comparison is performed <strong>in parallel with cache reading</strong>;</p>\n<p> a miss results in checking the other blocks for matches in the next clock cycle;</p>\n<h2 id=\"4-3-Pipelined-Cache-Access\"><a href=\"#4-3-Pipelined-Cache-Access\" class=\"headerlink\" title=\"4.3 Pipelined Cache Access\"></a>4.3 Pipelined Cache Access</h2><ul>\n<li><p>Increase cache bandwidth</p>\n</li>\n<li><p>Higher latency</p>\n</li>\n<li><p>Greater penalty on mispredicted branches and more clock cycles between issuing the load and using the data </p>\n</li>\n</ul>\n<h2 id=\"4-4-Nonblocking-caches\"><a href=\"#4-4-Nonblocking-caches\" class=\"headerlink\" title=\"4.4 Nonblocking caches\"></a>4.4 Nonblocking caches</h2><blockquote>\n<p>对于允许乱序执行的流水化计算机，他的处理器不必因为一次数据缓存缺失而停顿。在等待数据缓存返回缺失数据时，处理器可以继续从指令缓存中提取指令。nonblocking cache允许数据缓存在一次缺失期间继续提供缓存命令</p>\n</blockquote>\n<ul>\n<li>Increase cache bandwidth</li>\n</ul>\n<h2 id=\"4-5-Multibanked-caches\"><a href=\"#4-5-Multibanked-caches\" class=\"headerlink\" title=\"4.5 Multibanked caches\"></a>4.5 Multibanked caches</h2><blockquote>\n<p>Divide cache into independent banks that support simultaneous accesses</p>\n<p>Sequential interleaving spread the addresses of blocks sequentially across the banks</p>\n</blockquote>\n<center><img src=\"image-20191217202233856.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217202233856\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>Increase cache bandwidth</li>\n</ul>\n<h2 id=\"4-6-Critical-Word-First-amp-Early-Restart\"><a href=\"#4-6-Critical-Word-First-amp-Early-Restart\" class=\"headerlink\" title=\"4.6 Critical Word First &amp; Early Restart\"></a>4.6 Critical Word First &amp; Early Restart</h2><p>通常CPU只会request一个word, 但是一个cache line对应了很多个word</p>\n<ul>\n<li>critical word first</li>\n</ul>\n<blockquote>\n<p>首先请求critical word也就是CPU request的那个word, 然后发送给CPU, 然后再去请求一个cache line剩余的部分</p>\n</blockquote>\n<ul>\n<li>early restart</li>\n</ul>\n<blockquote>\n<p>按正常顺序获取word, 不需要等待一个cache line全部放入缓存再发送给处理器，而是critical word到了就直接发送给处理器，不需要等待还没有完成传输的word</p>\n</blockquote>\n<ul>\n<li>Reduce miss penalty</li>\n</ul>\n<h2 id=\"4-7-Merging-Write-buffer\"><a href=\"#4-7-Merging-Write-buffer\" class=\"headerlink\" title=\"4.7 Merging Write buffer\"></a>4.7 Merging Write buffer</h2><p>Write merging merges four entries (with sequential addresses)  into a single buffer entry</p>\n<center><img src=\"image-20191217203849064.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217203849064\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>Reduce miss penalty</li>\n</ul>\n<h2 id=\"4-8-Compiler-optimizations\"><a href=\"#4-8-Compiler-optimizations\" class=\"headerlink\" title=\"4.8 Compiler optimizations\"></a>4.8 Compiler optimizations</h2><h3 id=\"A-Loop-interchange\"><a href=\"#A-Loop-interchange\" class=\"headerlink\" title=\"A. Loop interchange\"></a>A. Loop interchange</h3><h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n  <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5000</span>; i++) &#123;\n    x[i][j] = <span class=\"hljs-number\">2</span> * x[i][j];\n  &#125;\n&#125;</code></pre></div>\n<p>x[i][j]访问之后访问x[i+1][j],这中间差了100个数据</p>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5000</span>; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n    x[i][j] = <span class=\"hljs-number\">2</span> * x[i][j]\n  &#125;\n&#125;</code></pre></div>\n<p>x[i][j]访问之后访问x[i][j+1], 这中间只差了一个数据，就可以按照数据存储的顺序来访问，增强了space locality。</p>\n<p>这样一次miss之后，load多个word进cache的话，缺失就会变少</p>\n<h3 id=\"B-Blocking-分块\"><a href=\"#B-Blocking-分块\" class=\"headerlink\" title=\"B. Blocking[分块]\"></a>B. Blocking[分块]</h3><h4 id=\"before-1\"><a href=\"#before-1\" class=\"headerlink\" title=\"before\"></a>before</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; N; j++) &#123;\n    &#123;\n      r = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-comment\">//y的行 * z的列</span>\n      <span class=\"hljs-keyword\">for</span>(k = <span class=\"hljs-number\">0</span>; k &lt; N; k++) &#123;\n        r = r + y[i][k] * z[k][j]\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre></div>\n<p><img src=\"image-20191217210134473.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217210134473\" style=\"zoom:50%;\" /></p>\n<h4 id=\"after-1\"><a href=\"#after-1\" class=\"headerlink\" title=\"after\"></a>after</h4><p><em>maximize accesses to loaded data before they are replaced</em></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(jj = <span class=\"hljs-number\">0</span>; jj &lt; N; jj = jj + B) &#123;\n  <span class=\"hljs-keyword\">for</span>(kk = <span class=\"hljs-number\">0</span>; kk &lt; N; kk = kk + B) &#123;\n    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) &#123;\n      <span class=\"hljs-keyword\">for</span>(j = jj; j &lt; min(jj+B, N); j++) &#123;\n        &#123;\n          r = <span class=\"hljs-number\">0</span>;\n          <span class=\"hljs-keyword\">for</span>(k = kk; k &lt; min(kk); k++) &#123;\n            r = r + y[i][k] * z[k][j];\n          &#125;\n          x[i][j] = x[i][j] + r;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre></div>\n<p><img src=\"image-20191217210322625.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217210322625\" style=\"zoom:50%;\" /></p>\n<h2 id=\"4-9-Hardware-prefetching\"><a href=\"#4-9-Hardware-prefetching\" class=\"headerlink\" title=\"4.9 Hardware prefetching\"></a>4.9 Hardware prefetching</h2><p>指令和数据都可以预取，既可以直接放在cache中，也可以放在一个访问速度快于main memory的外部缓冲区中。</p>\n<p>下面来看一下指令预取</p>\n<p>通常，处理器在一次缺失时提取两个块。被请求块和下一个相邻块</p>\n<ul>\n<li>被请求块放在他返回时的指令缓存中</li>\n<li>预取块放在指令流缓冲区中。</li>\n</ul>\n<p>请求时，如果发现被请求块位于指令流缓冲区，那么原缓存请求取消，从流缓冲区来读取这个块。并发出下一条预取请求</p>\n<ul>\n<li>Reduce miss penalty/rate</li>\n</ul>\n<h2 id=\"4-10-Compiler-Prefetching\"><a href=\"#4-10-Compiler-Prefetching\" class=\"headerlink\" title=\"4.10 Compiler Prefetching\"></a>4.10 Compiler Prefetching</h2><p>作为hardware prefetching的替代方法。可以在处理器需要某一数据之前，由编译器插入请求该数据的预取指令</p>\n<p>有以下两种prefetch</p>\n<ul>\n<li><p><strong>Register</strong> <strong>prefetch</strong></p>\n<p>load the value into a register</p>\n</li>\n<li><p><strong>Cache</strong> <strong>prefetch</strong></p>\n<p>load data into the cache</p>\n</li>\n</ul>\n<p><strong>Example</strong></p>\n<p>16-byte blocks;</p>\n<p>8-byte elements for a and b;</p>\n<p>write-back strategy</p>\n<p>a[0][0] miss, copy both a[0][0],a[0][1] as one block contains 16/8 = 2;</p>\n<p><strong><em>before</em></strong></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i = i + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j = j + <span class=\"hljs-number\">1</span>)\n    a[i][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]</code></pre></div>\n<p>缺失次数</p>\n<p>对于a, $3\\times(100/2)=150$次缺失</p>\n<p>对于b, b不会从空间局部性受益，但是可以从时间局部性受益</p>\n<p>b从b[0][0]访问到b[100][0]一共有101次缺失</p>\n<p>总共251次缺失</p>\n<p><strong><em>after prefetching</em></strong></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n  prefetch(b[j+<span class=\"hljs-number\">7</span>][<span class=\"hljs-number\">0</span>]);\n  prefetch(a[<span class=\"hljs-number\">0</span>][j+<span class=\"hljs-number\">7</span>]);\n  a[<span class=\"hljs-number\">0</span>][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n&#125;\n<span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n\t\tprefetch(a[i][j+<span class=\"hljs-number\">7</span>]);\n    a[i][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n  &#125;\n&#125;</code></pre></div>\n<p>修改后，将会预取a[i][7]—-a[i][99]和b[7][0]—b[100][0]</p>\n<p>所以非预取缺失只会出现在前几个循环</p>\n<ul>\n<li>第一个loop访问b[0][0]—-b[6][0]的7次缺失</li>\n<li>第一个loop访问a[0][0]—a[0][7]的4次缺失</li>\n<li>第二个loop访问a[1][0]—a[1][6]的4次缺失</li>\n<li>第二个loop访问a[2][0]—a[2][6]的4次缺失</li>\n</ul>\n<p>总共有19次非预取缺失</p>\n<p><strong>Reduce</strong> miss penalty/rate</p>\n<h1 id=\"5-Memory\"><a href=\"#5-Memory\" class=\"headerlink\" title=\"5. Memory\"></a>5. Memory</h1><p>Performance Measures</p>\n<ul>\n<li><strong>Latency</strong></li>\n</ul>\n<div class=\"note note-warning\">\n            <p>the time to retrieve the first word of the block</p>\n          </div>\n<p> important for caches;</p>\n<p> harder to reduce;</p>\n<blockquote>\n<p><strong>access time</strong>: the time between when a read is requested and when the desired word arrives;</p>\n<p><strong>cycle time</strong>: the minimum time between unrelated requests to memory;</p>\n<p><em>or</em> the minimum time between the start of an access and the start of the next access;</p>\n</blockquote>\n<ul>\n<li><strong>Bandwidth</strong> </li>\n</ul>\n<p>the time to retrieve the rest of this block</p>\n<h2 id=\"5-1-RAM\"><a href=\"#5-1-RAM\" class=\"headerlink\" title=\"5.1 RAM\"></a>5.1 RAM</h2><p><a href=\"https://www.zhihu.com/question/30492703\" target=\"_blank\" rel=\"noopener\">Zhihu Birkee’s answer</a></p>\n<p>RAM，Random-Access Memory，即随机存取存储器，其实就是内存，断电会丢失数据。<br>主要分为SRAM（static）和DRAM（dynamic)。主要的区别在于存储单元，DRAM使用电容电荷进行存储。需要一直刷新充电。SRAM是用锁存器锁住信息，不需要刷新。但也需要充电保持。</p>\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104433202.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209104433202\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM的基本存储单元</h4>     \n    </div>     \n    <p>利用一个晶体管进行控制电容的充放电</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104458720.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209104458720\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM一般的寻址模式</h4>     \n    </div>     \n    <p>控制的晶体管集成在单个存储单元中</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n<h2 id=\"5-2-SRAM-for-cache-Static-Random-Access-Memory\"><a href=\"#5-2-SRAM-for-cache-Static-Random-Access-Memory\" class=\"headerlink\" title=\"5.2 SRAM for cache[Static Random Access Memory]\"></a>5.2 SRAM for cache[Static Random Access Memory]</h2><ul>\n<li><p>Six transistors per bit to prevent the information from being disturbed when read</p>\n</li>\n<li><p>Don’t need to refresh, so access time is very close to cycle time</p>\n</li>\n</ul>\n<h2 id=\"5-3-DRAM-for-main-memory-Dynamic-Random-Access-Memory\"><a href=\"#5-3-DRAM-for-main-memory-Dynamic-Random-Access-Memory\" class=\"headerlink\" title=\"5.3 DRAM for main memory[Dynamic Random Access Memory]\"></a>5.3 DRAM for main memory[Dynamic Random Access Memory]</h2><center><img src=\"image-20191209105411600.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105411600\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191209105418930.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105418930\" style=\"zoom:30%;\" /></center>\n<p>bing row into row buffer</p>\n<center><img src=\"image-20191209105429474.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105429474\" style=\"zoom:30%;\"/></center>\n<p>select Data via Multiplexor</p>\n<center><img src=\"image-20191209105442259.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105442259\" style=\"zoom:30%;\"/></center>\n<p>Data selected</p>\n<center><img src=\"image-20191209105451917.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105451917\" style=\"zoom:30%;\"/></center>\n<p>Row buffer hit</p>\n<center><img src=\"image-20191209105459461.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105459461\" style=\"zoom:30%;\"/></center>\n<p>Row buffer conflict</p>\n\n\n\n<br>\n\n\n\n\n## 5.6 提高存储器的可靠性\n\n### Error type\n\n* **Soft errors**\n\n<div class=\"note note-info\">\n            <p>changes to a cell’s contents, not a change in the circuitry</p>\n          </div>\n\n* **Hard errors**\n\n<div class=\"note note-info\">\n            <p>permanent changes in the operation of one or more memory cells</p>\n          </div>\n\n### Error detection and fix\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Parity only</h4>     \n    </div>     \n    <p>only one bit of overhead to detect a single error in a sequence of bits;</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>ECC only</h4>     \n    </div>     \n    <p>detect two errors and correct a single error with 8-bit overhead per 64 data bits</p>  \n  </div>\n </div></td>\n    <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Chipkill</h4>     \n    </div>     \n    <p>类似于在磁盘中使用RAID方法，它分散数据和ECC信息，在单个存储器芯片完全失效时，可以从其余存储器芯片中重构丢失数据</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n<h1 id=\"6-Disk\"><a href=\"#6-Disk\" class=\"headerlink\" title=\"6. Disk\"></a>6. Disk</h1><div class=\"item\">   \n  <div class=\"item__image\"> \n    <img class=\"image image--lg\" src=\"image-20191209113803942.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209113803942\" style=\"zoom:50%;\" />\n    <img class=\"image image--lg\" src=\"image-20191209113823956.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209113823956\" style=\"zoom:50%;\" />   \n  </div>   \n  <div class=\"item__content\">     \n  <div class=\"item__header\">       \n    <h4>Disk</h4>     \n  </div>     \n  <div class=\"item__description\">     \n    <p>Sector: minimum storage unit. A block may span multiple sectors</p>\n     <p>Cluster:(dis)contiguous groups of sectors to reduce the overhead of managing on-disk data structures; may span more than one track</p>    \n  </div>   \n  </div> \n</div>\n\n\n<p>Areal density = $\\frac{Tracks}{Inch}$ on a disk surface $\\times$ $\\frac{Bits}{Inch}$ on a track</p>\n<h2 id=\"6-1-RAID-Redundant-Arrays-of-Inepensive-Disk\"><a href=\"#6-1-RAID-Redundant-Arrays-of-Inepensive-Disk\" class=\"headerlink\" title=\"6.1 RAID[Redundant Arrays of Inepensive Disk]\"></a>6.1 RAID[Redundant Arrays of Inepensive Disk]</h2><ul>\n<li>RAID 0: No Redundancy</li>\n<li>RAID 1: Mirroring / Shadowing</li>\n</ul>\n<blockquote>\n<p>Two copies for every piece of data</p>\n<p>one logical write = two physical writes</p>\n<p>100% capacity/space  overhead</p>\n</blockquote>\n<center><img src=\"IMG_2C62CE9D9D16-1.jpeg\" srcset=\"/img/loading.gif\" alt=\"IMG_2C62CE9D9D16-1\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 2:</li>\n</ul>\n<blockquote>\n<p>Each bit of data word is written to a data disk drive</p>\n<p>Each data word has its (Hamming Code) ECC word recorded on the ECC disks</p>\n<p>On read, the ECC code verifies correct data or corrects single disks errors</p>\n</blockquote>\n<center><img src=\"image-20191216120558419.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216120558419\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 3:</li>\n</ul>\n<blockquote>\n<p>RAID 3 P校验盘存的是前面所有盘数据的和。</p>\n<p>他很慢，因为每读取一次磁盘数据，校验时要读取其他所有磁盘才能算校验和</p>\n<p>磁盘坏了的话，也可以通过checksum恢复数据</p>\n</blockquote>\n<center><img src=\"IMG_E9E135911744-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_E9E135911744-1\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216121018499.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216121018499\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 4</li>\n</ul>\n<center><img src=\"IMG_17517EAA2585-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_17517EAA2585-1\" style=\"zoom: 33%;\" /></center>\n\n<ul>\n<li>RAID 5</li>\n</ul>\n<center><img src=\"IMG_8BFCBD97FD85-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_8BFCBD97FD85-1\" style=\"zoom:30%;\" /></center>\n\n<ul>\n<li>RAID 6</li>\n</ul>\n<blockquote>\n<p>row parity</p>\n</blockquote>\n<center><img src=\"image-20191216130127847.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130127847\" style=\"zoom:30%;\" /></center>\n\n<blockquote>\n<p>Diagonal parity</p>\n</blockquote>\n<center><img src=\"image-20191216130657742.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130657742\" style=\"zoom:30%;\" /></center>\n\n<p>看一个例子</p>\n<p>disk 1和disk 3 double failure</p>\n<center><img src=\"image-20191216130845614.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130845614\" style=\"zoom:30%;\" /></center>\n\n<p>First recover Disk 3 stripe 0. Because its diagonal parity is independent from the other failed disk 1.</p>\n<center><img src=\"image-20191216130921114.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130921114\" style=\"zoom:30%;\" /></center>\n\n<p>When Disk 3 stripe 0 is recoverd, then we can recover Disk 1 stripe 3. Because on its row, only its stripe is failed. So we can use the row parity to recover the stripe.</p>\n<center><img src=\"image-20191216130953500.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130953500\" style=\"zoom:30%;\" /></center>\n\n<p>Now, we have recovered Disk 1 stripe 3 and Disk 3 stripe 0</p>\n<center><img src=\"image-20191216131127165.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131127165\" style=\"zoom:30%;\" /></center>\n\n<p>以下同理</p>\n<center><img src=\"image-20191216131242663.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131242663\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131302430.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131302430\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131334869.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131334869\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131357343.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131357343\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131420435.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131420435\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131449208.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131449208\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131514362.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131514362\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131536642.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131536642\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131556362.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131556362\" style=\"zoom:30%;\" /></center>\n\n<h1 id=\"7-I-O-performance\"><a href=\"#7-I-O-performance\" class=\"headerlink\" title=\"7. I/O performance\"></a>7. I/O performance</h1><h3 id=\"unique-measures\"><a href=\"#unique-measures\" class=\"headerlink\" title=\"unique measures\"></a>unique measures</h3><ul>\n<li>Diversity</li>\n</ul>\n<blockquote>\n<p>which I/O devices can connect to the computer system?</p>\n</blockquote>\n<ul>\n<li>Capacity</li>\n</ul>\n<blockquote>\n<p>how many I/O devices can connect to a computer system?</p>\n</blockquote>\n<h3 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h3><ul>\n<li><p>response time[latency]</p>\n</li>\n<li><p>throughout[bandwidth]</p>\n</li>\n</ul>\n<center><img src=\"image-20191216102829183.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216102829183\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"7-1-Throughout-VS-Response-Time\"><a href=\"#7-1-Throughout-VS-Response-Time\" class=\"headerlink\" title=\"7.1 Throughout VS Response Time\"></a>7.1 Throughout VS Response Time</h2><p><strong><em>Transaction</em></strong></p>\n<blockquote>\n<p>An interation between human and computer is called <strong><em><u>transaction</u></em></strong></p>\n</blockquote>\n<p>A <strong><em><u>transaction time</u></em></strong> is divided into three parts:</p>\n<blockquote>\n<ul>\n<li><u>entry time</u></li>\n</ul>\n<blockquote>\n<p>The time for user to enter the command</p>\n</blockquote>\n<ul>\n<li><u>system response time</u></li>\n</ul>\n<blockquote>\n<p>The time between when the user enters the command and the complete response is displayed</p>\n</blockquote>\n<ul>\n<li><u>think time</u></li>\n</ul>\n<blockquote>\n<p>The time from the reception of the response until the user begins to <strong><em><u>enter the next command</u></em></strong></p>\n</blockquote>\n</blockquote>\n<center><img src=\"image-20191216210721189.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216210721189\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191216210659441.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216210659441\" style=\"zoom:50%;\" /></center>\n\n<p>More transaction time reduction than just the response time reduction. People need less time to think when given a faster response</p>\n<h2 id=\"7-2-Transaction-Processing-Benchmarks\"><a href=\"#7-2-Transaction-Processing-Benchmarks\" class=\"headerlink\" title=\"7.2 Transaction-Processing Benchmarks\"></a>7.2 Transaction-Processing Benchmarks</h2><h3 id=\"A-SPEC\"><a href=\"#A-SPEC\" class=\"headerlink\" title=\"A. SPEC\"></a>A. SPEC</h3><h3 id=\"B-TPC-C\"><a href=\"#B-TPC-C\" class=\"headerlink\" title=\"B. TPC_C\"></a>B. TPC_C</h3><h2 id=\"7-3-A-little-Queuing-Theory-to-calculate-response-time-and-throughput\"><a href=\"#7-3-A-little-Queuing-Theory-to-calculate-response-time-and-throughput\" class=\"headerlink\" title=\"7.3 A little Queuing Theory[to calculate response time and throughput]\"></a>7.3 A little Queuing Theory[to calculate response time and throughput]</h2><center><img src=\"image-20191216104938324.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216104938324\" style=\"zoom:50%;\" /></center>\n\n<p><strong><em>Flow-balanced State</em></strong></p>\n<ul>\n<li><p>If the system is in <strong>steady state</strong>,  then the number of tasks entering the system must equal the number of tasks leaving the system</p>\n</li>\n<li><p>This <strong>flow-balanced state</strong> is necessary but not sufficient for steady state</p>\n</li>\n<li><p>The system has reached <strong>steady state</strong> if the system has been observed for a sufficiently long time and  mean waiting times stabilize</p>\n</li>\n</ul>\n<h3 id=\"A-little’s-law-important\"><a href=\"#A-little’s-law-important\" class=\"headerlink\" title=\"A. little’s law[important]\"></a>A. little’s law[important]</h3><h4 id=\"i-Assumptions\"><a href=\"#i-Assumptions\" class=\"headerlink\" title=\"i. Assumptions\"></a>i. Assumptions</h4><div class=\"note note-info\">\n            <p>input rate = output rate; </p><p>a steady supply of tasks independent for how long they wait for service;</p>\n          </div>\n<h4 id=\"ii-little’s-law\"><a href=\"#ii-little’s-law\" class=\"headerlink\" title=\"ii. little’s law\"></a>ii. little’s law</h4><div class=\"note note-error\">\n            <p>Mean number of tasks in system =  Arrival rate $\\times$ Mean response time</p><p>注意arrival rate 表示单位时间到了几个task</p>\n          </div>\n<h4 id=\"iii-single-server-model\"><a href=\"#iii-single-server-model\" class=\"headerlink\" title=\"iii. single-server model\"></a>iii. single-server model</h4><center><img src=\"image-20191216214128113.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216214128113\" style=\"zoom: 40%;\" /></center>\n\n<ul>\n<li>$Time_{server}$  —Average time to service a task; average  $service_{rate}=1/Time_{server}$</li>\n<li>$Time_{queue}$—Average time per task in the queue.</li>\n<li>$Time_{system}$ —Average time per task in the system, or the response time, which is $Time_{queue}+Time_{server}$ .</li>\n<li>Arrival rate—Average number of arriving tasks/second</li>\n<li>$Length_{server}$—Average number of tasks in service.</li>\n<li>$Length_{queue}$—Average length of queue.</li>\n<li>$Length_{system}$—Average number of tasks in system, which is $Length_{server}+Length_{queue}$</li>\n</ul>\n<p><strong><em>Server Utilization</em></strong></p>\n<div class=\"note note-info\">\n            <p>Server utilization = Arrival rate$\\times$ $Time_{server}$</p>\n          </div>\n<center><img src=\"image-20191216110406290.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216110406290\" style=\"zoom:50%;\" /></center>\n\n<p><br/></p>\n<p><strong><em>Time queue</em></strong></p>\n<p>$Time_{queue}=Length_{queue}\\times Time_{server}+$Mean time to complete the task being serviced when new task arrives if server is busy</p>\n<p>$Time_{queue}=Time_{server}\\times \\frac{Server\\;utilization}{1-Server\\; utilization}$</p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\begin{aligned}Length_{queue}=&Arrival\\; rate\\times Time_{server}\\times\\frac{Server\\;utilization}{1-Server\\; utilization}\\\\ =&\\frac{Server\\; utilization^2}{1-Server\\; utilization}\\end{aligned}\\end{equation}</script><h4 id=\"iv-M-M-1-queue\"><a href=\"#iv-M-M-1-queue\" class=\"headerlink\" title=\"iv. M/M/1 queue\"></a>iv. M/M/1 queue</h4><blockquote>\n<p><strong>M</strong>: <em>Markov</em></p>\n<p>exponentially random request arrival;</p>\n<p><strong>M</strong>: <em>Markov</em></p>\n<p>exponentially random service time</p>\n<p><strong>1</strong></p>\n<p>single server</p>\n</blockquote>\n<p><strong>assumptions</strong></p>\n<blockquote>\n<p>The system is in equilibrium</p>\n<p><em>Interarrival</em> <em>times</em> [times between two successive requests arriving] are exponentionally distributed</p>\n<p><em>Infinite population model</em>: unlimited number of sources of requests</p>\n<p>Server starts on the next job immediately after finishing prior one</p>\n<p>FIFO queue with unlimited length</p>\n<p>One server only</p>\n</blockquote>\n<center><img src=\"image-20191216222544839.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222544839\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222600418.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222600418\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222618484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222618484\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"v-M-M-m-queue\"><a href=\"#v-M-M-m-queue\" class=\"headerlink\" title=\"v. M/M/m queue\"></a>v. M/M/m queue</h4><center><img src=\"image-20191216222740597.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222740597\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222905001.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222905001\" style=\"zoom:40%;\" /></center>","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"1-Introduction\"><a href=\"#1-Introduction\" class=\"headerlink\" title=\"1. Introduction\"></a>1. Introduction</h1><center><img src=\"image-20191208134608723.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208134608723\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"1-1-缓存性能\"><a href=\"#1-1-缓存性能\" class=\"headerlink\" title=\"1.1 缓存性能\"></a>1.1 缓存性能</h2><p>CPU execution time</p>\n<script type=\"math/tex; mode=display\">=(CPU\\, clock\\, cycles + Memory\\, stall\\, cycles)\\times Clock\\, cycle\\, time</script><p>{:.warning}</p>\n<p>这里CPU clock cicles包括handle cache hit/miss的时间</p>\n<center><img src=\"image-20191208135106480.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208135106480\" style=\"zoom:60%;\" /></center>\n<center><img src=\"image-20191208135244903.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208135244903\" style=\"zoom:60%;\" /></center>\n\n<p>看一道例题</p>\n<blockquote>\n<p>a computer with CPI=1 when cache hit.  </p>\n<p>50% instructions are loads and stores;</p>\n<p>2% miss rate, 25 cc miss penalty;</p>\n<p><strong>Q:</strong> how much faster would the computer be if all instructions were cache hits?</p>\n</blockquote>\n<p>Answer:</p>\n<ol>\n<li>always hit:</li>\n</ol>\n<p>CPU execution time = (CPU clocks cycles + Memory stall cycles) * clock cycle</p>\n<p>=<script type=\"math/tex\">(IC \\times CPI + 0) \\times clock\\,cycle</script></p>\n<p>=<script type=\"math/tex\">IC \\times clock\\, cycle</script></p>\n<p><br/></p>\n<ol>\n<li>with misses</li>\n</ol>\n<p>Memory stall cycles</p>\n<p>= $IC \\times \\frac{Memory\\, accesses}{Instruction}\\times Miss\\, rate\\times Miss\\, penalty$</p>\n<p>=$IC\\times(1+0.5)\\times 0.02\\times 25$</p>\n<p>=$IC\\times 0.75$</p>\n<p>memory accesses=1.5是因为执行任何一条指令都要访问memory取指令，并且50%的指令是load, store 因此 1+0.5=1.5</p>\n<p>CPU execution time = (CPU clocks cycles + Memory stall cycles) $\\times$ clock cycle</p>\n<p>=$(IC\\times 1.0+IC\\times 0.75)\\times$clock cycle</p>\n<p>=$1.75\\times $clock cycle</p>\n<p>所以比值是1.75</p>\n<h2 id=\"1-2-4个存储器层次结构问题\"><a href=\"#1-2-4个存储器层次结构问题\" class=\"headerlink\" title=\"1.2 4个存储器层次结构问题\"></a>1.2 4个存储器层次结构问题</h2><p>Q1: Where can a block be placed in the upper level? (block placement)</p>\n<p>Q2: How is a block found if it is in the upper level? (block identification)</p>\n<p>Q3: Which block should be replaced on a miss? (block replacement)</p>\n<p>Q4: What happens on a write? (write strategy)</p>\n<center><img src=\"image-2019120874232.png\" srcset=\"/img/loading.gif\" alt=\"截屏2019-12-08下午7.42.32\" style=\"zoom:67%;\" /></center>\n<center><img src=\"image-20191208194519623.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208194519623\" style=\"zoom: 67%;\" /></center>\n\n<h3 id=\"A-Write-Strategy\"><a href=\"#A-Write-Strategy\" class=\"headerlink\" title=\"A. Write Strategy\"></a>A. Write Strategy</h3><p><code>Write hit</code></p>\n<ul>\n<li>write-through: info is written to both the block in the cache and to the block in the lower-level memory</li>\n<li>write-back: info is written only to the block in the cache;  to the main memory only when the modified cache block is replaced[dirty bit]</li>\n</ul>\n<p><code>Write miss</code></p>\n<ul>\n<li>Write allocate: data at the missed-<strong>write</strong> location is loaded to cache, followed by a <strong>write</strong>-hit operation  </li>\n<li>No-write allocate[write around]: data at the missed-<strong>write</strong> location is not loaded to cache, and is written directly to the backing store.  ;  <em>until the program tries to read the block, the data is loaded to cache;</em></li>\n</ul>\n<center><img src=\"image-20191208201918610.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208201918610\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>No-Write allocate:  4 misses + 1 hit</li>\n</ol>\n<center><img src=\"image-20191208202025669.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208202025669\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>Write allocate:  2 misses + 3 hits</li>\n</ol>\n<center><img src=\"image-20191208202722945.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208202722945\" style=\"zoom:50%;\" /></center>\n\n<h1 id=\"2-缓存性能\"><a href=\"#2-缓存性能\" class=\"headerlink\" title=\"2. 缓存性能\"></a>2. 缓存性能</h1><h3 id=\"Hit-or-Miss-How-long-will-it-take\"><a href=\"#Hit-or-Miss-How-long-will-it-take\" class=\"headerlink\" title=\"Hit or Miss: How long will it take?\"></a>Hit or Miss: How long will it take?</h3><p>Average memory access time = Hit time + Miss rate x Miss penalty</p>\n<ul>\n<li><strong>Example</strong></li>\n</ul>\n<blockquote>\n<p>16KB instr cache + 16KB data cache;</p>\n<p>or, 32KB unified cache;</p>\n<p>36% data transfer instructions;</p>\n<p>(load/store takes 1 extra cc on unified cache)</p>\n<p>1 CC hit; 200 CC miss penalty;</p>\n</blockquote>\n<center><img src=\"image-20191208204528711.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208204528711\" style=\"zoom:30%;\" /></center>\n\n<blockquote>\n<p><strong>Q1:</strong> split cache or unified cache has lower miss rate? </p>\n</blockquote>\n<p>Answer:</p>\n<center><img src=\"image-20191208204804983.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208204804983\" style=\"zoom:40%;\" /></center>\n\n<ol>\n<li>split cache</li>\n</ol>\n<p>16KB instruction Miss rate</p>\n<p>​        = <script type=\"math/tex\">\\frac{3.82}{1000}/1=0.004</script></p>\n<p>16KB data miss rate</p>\n<p>​        =<script type=\"math/tex\">\\frac{40.9}{1000}/0.36=0.114</script></p>\n<p>assume 74% of memory accesses are instruction references</p>\n<p>Overall miss rate</p>\n<p>​        =<script type=\"math/tex\">(74\\%\\times 0.004)+(26\\%\\times 0.114)=0.0326</script></p>\n<ol>\n<li>unified cache</li>\n</ol>\n<p>Miss rate</p>\n<p>=<script type=\"math/tex\">\\frac{43.3}{1000}/(1.0+0.36)=0.0318</script></p>\n<blockquote>\n<p><strong>Q2:</strong> average memory access time?</p>\n</blockquote>\n<center><img src=\"image-20191208205644462.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208205644462\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191208205754992.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208205754992\" style=\"zoom:40%;\" /></center>\n\n<h2 id=\"2-1-存储器平均访问时间与处理器性能\"><a href=\"#2-1-存储器平均访问时间与处理器性能\" class=\"headerlink\" title=\"2.1 存储器平均访问时间与处理器性能\"></a>2.1 存储器平均访问时间与处理器性能</h2><h1 id=\"3-Six-Basic-Cache-Optimizations\"><a href=\"#3-Six-Basic-Cache-Optimizations\" class=\"headerlink\" title=\"3. Six Basic Cache Optimizations\"></a>3. Six Basic Cache Optimizations</h1><p>我们将所有缺失分成三类</p>\n<ul>\n<li><p>强制缺失[Compulsory]</p>\n<p>cold-start/first-reference misses;</p>\n</li>\n<li><p>容量缺失[Capacity]</p>\n<p>cache size limit;</p>\n<p> blocks discarded and later retrieved;</p>\n</li>\n<li><p>冲突缺失</p>\n<p>collision misses: associativity</p>\n<p>a block discarded and later retrieved in a set;</p>\n</li>\n</ul>\n<center><img src=\"image-20191208213224033.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213224033\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213207928.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213207928\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191208213148539.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208213148539\" style=\"zoom:30%;\" /></center>\n\n<h2 id=\"3-1-Larger-Block-size\"><a href=\"#3-1-Larger-Block-size\" class=\"headerlink\" title=\"3.1 Larger Block size\"></a>3.1 Larger Block size</h2><ul>\n<li><p><strong>Reduce</strong> compulsory misses</p>\n<p>​    Leverage spatial locality</p>\n</li>\n<li><p><strong>Reduce</strong> static power</p>\n<p>​    block size增大，地址里面index位就变多，tag位数就变少，比较时需要的工作量就变少</p>\n</li>\n<li><p><strong>Increase</strong> conflict/capacity misses</p>\n<p>​    Fewer block in the cache</p>\n</li>\n</ul>\n<center><img src=\"image-20191208214954621.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208214954621\" style=\"zoom: 30%;\" /></center>\n\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><center><img src=\"image-20191208215035983.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208215035983\" style=\"zoom:40%;\" /></center>\n\n<p><strong>Answer</strong></p>\n<p> avg mem access time</p>\n<p>​        =hit time + miss rate x miss penalty</p>\n<div class=\"note note-info\">\n            <p> assume 1-CC hit time</p><p> for a 256-byte block in a 256 KB cache:</p><p> avg mem access time</p><p>​        = 1 + 0.49% x (80 + 2x256/16) = 1.5 cc</p>\n          </div>\n<p> 2x256/16是因为存储器2cc能给cache传回16bytes</p>\n<h2 id=\"3-2-Larger-cache\"><a href=\"#3-2-Larger-cache\" class=\"headerlink\" title=\"3.2 Larger cache\"></a>3.2 Larger cache</h2><ul>\n<li><p><strong>Reduce</strong> capacity misses</p>\n</li>\n<li><p><strong>Increase</strong> hit time, cost, and power</p>\n</li>\n</ul>\n<h2 id=\"3-3-Higher-Associativity\"><a href=\"#3-3-Higher-Associativity\" class=\"headerlink\" title=\"3.3 Higher Associativity\"></a>3.3 Higher Associativity</h2><ul>\n<li><p><strong>Reduce</strong> conflict misses</p>\n</li>\n<li><p><strong>Increase</strong> hit time</p>\n</li>\n</ul>\n<h2 id=\"3-4-Multilevel-cache\"><a href=\"#3-4-Multilevel-cache\" class=\"headerlink\" title=\"3.4 Multilevel cache\"></a>3.4 Multilevel cache</h2><ul>\n<li><strong>Reduce</strong> miss penalty</li>\n</ul>\n<p><br/></p>\n<h4 id=\"A-Two-level-cache\"><a href=\"#A-Two-level-cache\" class=\"headerlink\" title=\"A. Two-level cache\"></a>A. Two-level cache</h4><p> Add another level of cache between the original cache and memory</p>\n<ul>\n<li><p><strong>L1</strong>: small enough to match the clock cycle time of the fast processor;</p>\n</li>\n<li><p><strong>L2</strong>: large enough to capture many accesses that would go to main memory, lessening miss penalty</p>\n</li>\n</ul>\n<center><img src=\"image-20191208220714030.png\" srcset=\"/img/loading.gif\" alt=\"image-20191208220714030\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"B-Average-memory-access-time\"><a href=\"#B-Average-memory-access-time\" class=\"headerlink\" title=\"B. Average memory access time\"></a>B. Average memory access time</h4><p>=Hit timeL1 + Miss rateL1 x Miss penaltyL1</p>\n<p>=Hit timeL1 + Miss rateL1</p>\n<p> x(Hit timeL2+Miss rateL2xMiss penaltyL2)</p>\n<h4 id=\"C-Average-mem-stalls-per-instruction\"><a href=\"#C-Average-mem-stalls-per-instruction\" class=\"headerlink\" title=\"C. Average mem stalls per instruction\"></a>C. Average mem stalls per instruction</h4><p>=Misses per instructionL1 x Hit timeL2</p>\n<p> + Misses per instrL2 x Miss penaltyL2</p>\n<h4 id=\"D-Local-miss-rate\"><a href=\"#D-Local-miss-rate\" class=\"headerlink\" title=\"D. Local miss rate\"></a>D. Local miss rate</h4><p> the number of misses in a cache</p>\n<p> divided by the total number of mem accesses to <u>this cache</u>;</p>\n<p> {:.info}</p>\n<p>分成 Miss rateL1, Miss rateL2</p>\n<h4 id=\"E-Global-miss-rate\"><a href=\"#E-Global-miss-rate\" class=\"headerlink\" title=\"E. Global miss rate\"></a>E. Global miss rate</h4><p> the number of misses in the cache </p>\n<p> divided by the number of mem accesses generated by the processor;</p>\n<p> {:.info}</p>\n<p>L1的全局缺失率Miss rate<strong>L1</strong>,<u>L2的全局缺失率 Miss rateL1 x Miss rateL2</u></p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h4><blockquote>\n<p>1000 mem references -&gt; 40 misses in L1 and 20 misses in L2;</p>\n<p>miss penalty from L2 is 200 cc;</p>\n<p>hit time of L2 is 10 cc;</p>\n<p>hit time of L1 is 1 cc;</p>\n<p>1.5 mem references per instruction;</p>\n<p> <strong>Q: 1.</strong> various miss rates?</p>\n</blockquote>\n<p> <strong>L1:</strong> local = global</p>\n<p> 40/1000 = 4%</p>\n<p> <strong>L2:</strong></p>\n<p> local: 20/40 = 50%</p>\n<p> global: 20/1000 = 2%</p>\n<blockquote>\n<p><strong>Q: 2.</strong> avg mem access time?</p>\n</blockquote>\n<p>average memory access time</p>\n<p>=Hit timeL1 + Miss rateL1</p>\n<p> x(Hit timeL2+Miss rateL2xMiss penaltyL2)</p>\n<p>=1 + 4% x (10 + 50% x 200)</p>\n<p>=5.4</p>\n<blockquote>\n<p> <strong>Q: 3.</strong> avg stall cycles per instruction?</p>\n</blockquote>\n<p>average stall cycles per instruction</p>\n<p>=Misses per instructionL1 x Hit timeL2</p>\n<p> + Misses per instrL2 x Miss penaltyL2</p>\n<p>=(1.5x40/1000)x10+(1.5x20/1000)x200</p>\n<p>=6.6</p>\n<h2 id=\"2-5-Prioritize-read-misses-over-writes\"><a href=\"#2-5-Prioritize-read-misses-over-writes\" class=\"headerlink\" title=\"2.5  Prioritize read misses over writes\"></a>2.5  Prioritize read misses over writes</h2><ul>\n<li><strong>Reduce</strong> miss penalty</li>\n</ul>\n<div class=\"note note-info\">\n            <p>这种方法使得在write buffer将数据写入memory之前，就可以为read操作提供服务</p>\n          </div>\n<h2 id=\"2-6-Avoid-address-translation-during-indexing-cache\"><a href=\"#2-6-Avoid-address-translation-during-indexing-cache\" class=\"headerlink\" title=\"2.6 Avoid address translation during indexing cache\"></a>2.6 Avoid address translation during indexing cache</h2><p>虚拟缓存</p>\n<h1 id=\"4-Ten-advanced-cache-optimizations\"><a href=\"#4-Ten-advanced-cache-optimizations\" class=\"headerlink\" title=\"4. Ten advanced cache optimizations\"></a>4. Ten advanced cache optimizations</h1><center><img src=\"image-20191209100308445.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209100308445\" style=\"zoom: 33%;\" /></center>\n\n<h2 id=\"4-1-Small-and-Simple-First-Level-Caches\"><a href=\"#4-1-Small-and-Simple-First-Level-Caches\" class=\"headerlink\" title=\"4.1 Small and Simple First-Level Caches\"></a>4.1 Small and Simple First-Level Caches</h2><ul>\n<li>Small size</li>\n</ul>\n<blockquote>\n<p>support a fast clock cycle</p>\n<p>reduce power</p>\n</blockquote>\n<ul>\n<li>Lower associativity</li>\n</ul>\n<blockquote>\n<p>reduce both hit time and power</p>\n<p>(direct-mapped caches can overlap the tag check with the transmission of the data)</p>\n</blockquote>\n<h2 id=\"4-2-Way-prediction\"><a href=\"#4-2-Way-prediction\" class=\"headerlink\" title=\"4.2 Way prediction\"></a>4.2 Way prediction</h2><p>•Reduce conflict misses and hit time</p>\n<p>•<strong>Way prediction</strong></p>\n<p> <em>block predictor bits</em> are added to each block to predict the way/block within the set of the <em>next</em> cache access</p>\n<p> the multiplexor is set <strong>early to select the desired block</strong>;</p>\n<p> only a single tag comparison is performed <strong>in parallel with cache reading</strong>;</p>\n<p> a miss results in checking the other blocks for matches in the next clock cycle;</p>\n<h2 id=\"4-3-Pipelined-Cache-Access\"><a href=\"#4-3-Pipelined-Cache-Access\" class=\"headerlink\" title=\"4.3 Pipelined Cache Access\"></a>4.3 Pipelined Cache Access</h2><ul>\n<li><p>Increase cache bandwidth</p>\n</li>\n<li><p>Higher latency</p>\n</li>\n<li><p>Greater penalty on mispredicted branches and more clock cycles between issuing the load and using the data </p>\n</li>\n</ul>\n<h2 id=\"4-4-Nonblocking-caches\"><a href=\"#4-4-Nonblocking-caches\" class=\"headerlink\" title=\"4.4 Nonblocking caches\"></a>4.4 Nonblocking caches</h2><blockquote>\n<p>对于允许乱序执行的流水化计算机，他的处理器不必因为一次数据缓存缺失而停顿。在等待数据缓存返回缺失数据时，处理器可以继续从指令缓存中提取指令。nonblocking cache允许数据缓存在一次缺失期间继续提供缓存命令</p>\n</blockquote>\n<ul>\n<li>Increase cache bandwidth</li>\n</ul>\n<h2 id=\"4-5-Multibanked-caches\"><a href=\"#4-5-Multibanked-caches\" class=\"headerlink\" title=\"4.5 Multibanked caches\"></a>4.5 Multibanked caches</h2><blockquote>\n<p>Divide cache into independent banks that support simultaneous accesses</p>\n<p>Sequential interleaving spread the addresses of blocks sequentially across the banks</p>\n</blockquote>\n<center><img src=\"image-20191217202233856.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217202233856\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>Increase cache bandwidth</li>\n</ul>\n<h2 id=\"4-6-Critical-Word-First-amp-Early-Restart\"><a href=\"#4-6-Critical-Word-First-amp-Early-Restart\" class=\"headerlink\" title=\"4.6 Critical Word First &amp; Early Restart\"></a>4.6 Critical Word First &amp; Early Restart</h2><p>通常CPU只会request一个word, 但是一个cache line对应了很多个word</p>\n<ul>\n<li>critical word first</li>\n</ul>\n<blockquote>\n<p>首先请求critical word也就是CPU request的那个word, 然后发送给CPU, 然后再去请求一个cache line剩余的部分</p>\n</blockquote>\n<ul>\n<li>early restart</li>\n</ul>\n<blockquote>\n<p>按正常顺序获取word, 不需要等待一个cache line全部放入缓存再发送给处理器，而是critical word到了就直接发送给处理器，不需要等待还没有完成传输的word</p>\n</blockquote>\n<ul>\n<li>Reduce miss penalty</li>\n</ul>\n<h2 id=\"4-7-Merging-Write-buffer\"><a href=\"#4-7-Merging-Write-buffer\" class=\"headerlink\" title=\"4.7 Merging Write buffer\"></a>4.7 Merging Write buffer</h2><p>Write merging merges four entries (with sequential addresses)  into a single buffer entry</p>\n<center><img src=\"image-20191217203849064.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217203849064\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>Reduce miss penalty</li>\n</ul>\n<h2 id=\"4-8-Compiler-optimizations\"><a href=\"#4-8-Compiler-optimizations\" class=\"headerlink\" title=\"4.8 Compiler optimizations\"></a>4.8 Compiler optimizations</h2><h3 id=\"A-Loop-interchange\"><a href=\"#A-Loop-interchange\" class=\"headerlink\" title=\"A. Loop interchange\"></a>A. Loop interchange</h3><h4 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before\"></a>before</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n  <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5000</span>; i++) &#123;\n    x[i][j] = <span class=\"hljs-number\">2</span> * x[i][j];\n  &#125;\n&#125;</code></pre></div>\n<p>x[i][j]访问之后访问x[i+1][j],这中间差了100个数据</p>\n<h4 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after\"></a>after</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5000</span>; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n    x[i][j] = <span class=\"hljs-number\">2</span> * x[i][j]\n  &#125;\n&#125;</code></pre></div>\n<p>x[i][j]访问之后访问x[i][j+1], 这中间只差了一个数据，就可以按照数据存储的顺序来访问，增强了space locality。</p>\n<p>这样一次miss之后，load多个word进cache的话，缺失就会变少</p>\n<h3 id=\"B-Blocking-分块\"><a href=\"#B-Blocking-分块\" class=\"headerlink\" title=\"B. Blocking[分块]\"></a>B. Blocking[分块]</h3><h4 id=\"before-1\"><a href=\"#before-1\" class=\"headerlink\" title=\"before\"></a>before</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; N; j++) &#123;\n    &#123;\n      r = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-comment\">//y的行 * z的列</span>\n      <span class=\"hljs-keyword\">for</span>(k = <span class=\"hljs-number\">0</span>; k &lt; N; k++) &#123;\n        r = r + y[i][k] * z[k][j]\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre></div>\n<p><img src=\"image-20191217210134473.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217210134473\" style=\"zoom:50%;\" /></p>\n<h4 id=\"after-1\"><a href=\"#after-1\" class=\"headerlink\" title=\"after\"></a>after</h4><p><em>maximize accesses to loaded data before they are replaced</em></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(jj = <span class=\"hljs-number\">0</span>; jj &lt; N; jj = jj + B) &#123;\n  <span class=\"hljs-keyword\">for</span>(kk = <span class=\"hljs-number\">0</span>; kk &lt; N; kk = kk + B) &#123;\n    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) &#123;\n      <span class=\"hljs-keyword\">for</span>(j = jj; j &lt; min(jj+B, N); j++) &#123;\n        &#123;\n          r = <span class=\"hljs-number\">0</span>;\n          <span class=\"hljs-keyword\">for</span>(k = kk; k &lt; min(kk); k++) &#123;\n            r = r + y[i][k] * z[k][j];\n          &#125;\n          x[i][j] = x[i][j] + r;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre></div>\n<p><img src=\"image-20191217210322625.png\" srcset=\"/img/loading.gif\" alt=\"image-20191217210322625\" style=\"zoom:50%;\" /></p>\n<h2 id=\"4-9-Hardware-prefetching\"><a href=\"#4-9-Hardware-prefetching\" class=\"headerlink\" title=\"4.9 Hardware prefetching\"></a>4.9 Hardware prefetching</h2><p>指令和数据都可以预取，既可以直接放在cache中，也可以放在一个访问速度快于main memory的外部缓冲区中。</p>\n<p>下面来看一下指令预取</p>\n<p>通常，处理器在一次缺失时提取两个块。被请求块和下一个相邻块</p>\n<ul>\n<li>被请求块放在他返回时的指令缓存中</li>\n<li>预取块放在指令流缓冲区中。</li>\n</ul>\n<p>请求时，如果发现被请求块位于指令流缓冲区，那么原缓存请求取消，从流缓冲区来读取这个块。并发出下一条预取请求</p>\n<ul>\n<li>Reduce miss penalty/rate</li>\n</ul>\n<h2 id=\"4-10-Compiler-Prefetching\"><a href=\"#4-10-Compiler-Prefetching\" class=\"headerlink\" title=\"4.10 Compiler Prefetching\"></a>4.10 Compiler Prefetching</h2><p>作为hardware prefetching的替代方法。可以在处理器需要某一数据之前，由编译器插入请求该数据的预取指令</p>\n<p>有以下两种prefetch</p>\n<ul>\n<li><p><strong>Register</strong> <strong>prefetch</strong></p>\n<p>load the value into a register</p>\n</li>\n<li><p><strong>Cache</strong> <strong>prefetch</strong></p>\n<p>load data into the cache</p>\n</li>\n</ul>\n<p><strong>Example</strong></p>\n<p>16-byte blocks;</p>\n<p>8-byte elements for a and b;</p>\n<p>write-back strategy</p>\n<p>a[0][0] miss, copy both a[0][0],a[0][1] as one block contains 16/8 = 2;</p>\n<p><strong><em>before</em></strong></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i = i + <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j = j + <span class=\"hljs-number\">1</span>)\n    a[i][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]</code></pre></div>\n<p>缺失次数</p>\n<p>对于a, $3\\times(100/2)=150$次缺失</p>\n<p>对于b, b不会从空间局部性受益，但是可以从时间局部性受益</p>\n<p>b从b[0][0]访问到b[100][0]一共有101次缺失</p>\n<p>总共251次缺失</p>\n<p><strong><em>after prefetching</em></strong></p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n  prefetch(b[j+<span class=\"hljs-number\">7</span>][<span class=\"hljs-number\">0</span>]);\n  prefetch(a[<span class=\"hljs-number\">0</span>][j+<span class=\"hljs-number\">7</span>]);\n  a[<span class=\"hljs-number\">0</span>][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n&#125;\n<span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) &#123;\n  <span class=\"hljs-keyword\">for</span>(j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) &#123;\n\t\tprefetch(a[i][j+<span class=\"hljs-number\">7</span>]);\n    a[i][j] = b[j][<span class=\"hljs-number\">0</span>] * b[j+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n  &#125;\n&#125;</code></pre></div>\n<p>修改后，将会预取a[i][7]—-a[i][99]和b[7][0]—b[100][0]</p>\n<p>所以非预取缺失只会出现在前几个循环</p>\n<ul>\n<li>第一个loop访问b[0][0]—-b[6][0]的7次缺失</li>\n<li>第一个loop访问a[0][0]—a[0][7]的4次缺失</li>\n<li>第二个loop访问a[1][0]—a[1][6]的4次缺失</li>\n<li>第二个loop访问a[2][0]—a[2][6]的4次缺失</li>\n</ul>\n<p>总共有19次非预取缺失</p>\n<p><strong>Reduce</strong> miss penalty/rate</p>\n<h1 id=\"5-Memory\"><a href=\"#5-Memory\" class=\"headerlink\" title=\"5. Memory\"></a>5. Memory</h1><p>Performance Measures</p>\n<ul>\n<li><strong>Latency</strong></li>\n</ul>\n<div class=\"note note-warning\">\n            <p>the time to retrieve the first word of the block</p>\n          </div>\n<p> important for caches;</p>\n<p> harder to reduce;</p>\n<blockquote>\n<p><strong>access time</strong>: the time between when a read is requested and when the desired word arrives;</p>\n<p><strong>cycle time</strong>: the minimum time between unrelated requests to memory;</p>\n<p><em>or</em> the minimum time between the start of an access and the start of the next access;</p>\n</blockquote>\n<ul>\n<li><strong>Bandwidth</strong> </li>\n</ul>\n<p>the time to retrieve the rest of this block</p>\n<h2 id=\"5-1-RAM\"><a href=\"#5-1-RAM\" class=\"headerlink\" title=\"5.1 RAM\"></a>5.1 RAM</h2><p><a href=\"https://www.zhihu.com/question/30492703\" target=\"_blank\" rel=\"noopener\">Zhihu Birkee’s answer</a></p>\n<p>RAM，Random-Access Memory，即随机存取存储器，其实就是内存，断电会丢失数据。<br>主要分为SRAM（static）和DRAM（dynamic)。主要的区别在于存储单元，DRAM使用电容电荷进行存储。需要一直刷新充电。SRAM是用锁存器锁住信息，不需要刷新。但也需要充电保持。</p>\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104433202.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209104433202\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM的基本存储单元</h4>     \n    </div>     \n    <p>利用一个晶体管进行控制电容的充放电</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">   \n  <div class=\"card__image\">     \n  <img class=\"image\" src=\"image-20191209104458720.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209104458720\" style=\"zoom:50%;\" /> \n  </div>   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>DRAM一般的寻址模式</h4>     \n    </div>     \n    <p>控制的晶体管集成在单个存储单元中</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n<h2 id=\"5-2-SRAM-for-cache-Static-Random-Access-Memory\"><a href=\"#5-2-SRAM-for-cache-Static-Random-Access-Memory\" class=\"headerlink\" title=\"5.2 SRAM for cache[Static Random Access Memory]\"></a>5.2 SRAM for cache[Static Random Access Memory]</h2><ul>\n<li><p>Six transistors per bit to prevent the information from being disturbed when read</p>\n</li>\n<li><p>Don’t need to refresh, so access time is very close to cycle time</p>\n</li>\n</ul>\n<h2 id=\"5-3-DRAM-for-main-memory-Dynamic-Random-Access-Memory\"><a href=\"#5-3-DRAM-for-main-memory-Dynamic-Random-Access-Memory\" class=\"headerlink\" title=\"5.3 DRAM for main memory[Dynamic Random Access Memory]\"></a>5.3 DRAM for main memory[Dynamic Random Access Memory]</h2><center><img src=\"image-20191209105411600.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105411600\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191209105418930.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105418930\" style=\"zoom:30%;\" /></center>\n<p>bing row into row buffer</p>\n<center><img src=\"image-20191209105429474.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105429474\" style=\"zoom:30%;\"/></center>\n<p>select Data via Multiplexor</p>\n<center><img src=\"image-20191209105442259.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105442259\" style=\"zoom:30%;\"/></center>\n<p>Data selected</p>\n<center><img src=\"image-20191209105451917.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105451917\" style=\"zoom:30%;\"/></center>\n<p>Row buffer hit</p>\n<center><img src=\"image-20191209105459461.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209105459461\" style=\"zoom:30%;\"/></center>\n<p>Row buffer conflict</p>\n\n\n\n<br>\n\n\n\n\n## 5.6 提高存储器的可靠性\n\n### Error type\n\n* **Soft errors**\n\n<div class=\"note note-info\">\n            <p>changes to a cell’s contents, not a change in the circuitry</p>\n          </div>\n\n* **Hard errors**\n\n<div class=\"note note-info\">\n            <p>permanent changes in the operation of one or more memory cells</p>\n          </div>\n\n### Error detection and fix\n\n<center><table>\n  <tr>\n    <td><div class=\"card\">   \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Parity only</h4>     \n    </div>     \n    <p>only one bit of overhead to detect a single error in a sequence of bits;</p>  \n  </div>\n</div></td>\n  <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>ECC only</h4>     \n    </div>     \n    <p>detect two errors and correct a single error with 8-bit overhead per 64 data bits</p>  \n  </div>\n </div></td>\n    <td><div class=\"card\">    \n  <div class=\"card__content\">     \n    <div class=\"card__header\">       \n      <h4>Chipkill</h4>     \n    </div>     \n    <p>类似于在磁盘中使用RAID方法，它分散数据和ECC信息，在单个存储器芯片完全失效时，可以从其余存储器芯片中重构丢失数据</p>  \n  </div>\n </div></td>\n  </tr>\n</table></center>\n\n\n\n\n<h1 id=\"6-Disk\"><a href=\"#6-Disk\" class=\"headerlink\" title=\"6. Disk\"></a>6. Disk</h1><div class=\"item\">   \n  <div class=\"item__image\"> \n    <img class=\"image image--lg\" src=\"image-20191209113803942.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209113803942\" style=\"zoom:50%;\" />\n    <img class=\"image image--lg\" src=\"image-20191209113823956.png\" srcset=\"/img/loading.gif\" alt=\"image-20191209113823956\" style=\"zoom:50%;\" />   \n  </div>   \n  <div class=\"item__content\">     \n  <div class=\"item__header\">       \n    <h4>Disk</h4>     \n  </div>     \n  <div class=\"item__description\">     \n    <p>Sector: minimum storage unit. A block may span multiple sectors</p>\n     <p>Cluster:(dis)contiguous groups of sectors to reduce the overhead of managing on-disk data structures; may span more than one track</p>    \n  </div>   \n  </div> \n</div>\n\n\n<p>Areal density = $\\frac{Tracks}{Inch}$ on a disk surface $\\times$ $\\frac{Bits}{Inch}$ on a track</p>\n<h2 id=\"6-1-RAID-Redundant-Arrays-of-Inepensive-Disk\"><a href=\"#6-1-RAID-Redundant-Arrays-of-Inepensive-Disk\" class=\"headerlink\" title=\"6.1 RAID[Redundant Arrays of Inepensive Disk]\"></a>6.1 RAID[Redundant Arrays of Inepensive Disk]</h2><ul>\n<li>RAID 0: No Redundancy</li>\n<li>RAID 1: Mirroring / Shadowing</li>\n</ul>\n<blockquote>\n<p>Two copies for every piece of data</p>\n<p>one logical write = two physical writes</p>\n<p>100% capacity/space  overhead</p>\n</blockquote>\n<center><img src=\"IMG_2C62CE9D9D16-1.jpeg\" srcset=\"/img/loading.gif\" alt=\"IMG_2C62CE9D9D16-1\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 2:</li>\n</ul>\n<blockquote>\n<p>Each bit of data word is written to a data disk drive</p>\n<p>Each data word has its (Hamming Code) ECC word recorded on the ECC disks</p>\n<p>On read, the ECC code verifies correct data or corrects single disks errors</p>\n</blockquote>\n<center><img src=\"image-20191216120558419.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216120558419\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 3:</li>\n</ul>\n<blockquote>\n<p>RAID 3 P校验盘存的是前面所有盘数据的和。</p>\n<p>他很慢，因为每读取一次磁盘数据，校验时要读取其他所有磁盘才能算校验和</p>\n<p>磁盘坏了的话，也可以通过checksum恢复数据</p>\n</blockquote>\n<center><img src=\"IMG_E9E135911744-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_E9E135911744-1\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216121018499.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216121018499\" style=\"zoom:50%;\" /></center>\n\n<ul>\n<li>RAID 4</li>\n</ul>\n<center><img src=\"IMG_17517EAA2585-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_17517EAA2585-1\" style=\"zoom: 33%;\" /></center>\n\n<ul>\n<li>RAID 5</li>\n</ul>\n<center><img src=\"IMG_8BFCBD97FD85-1.png\" srcset=\"/img/loading.gif\" alt=\"IMG_8BFCBD97FD85-1\" style=\"zoom:30%;\" /></center>\n\n<ul>\n<li>RAID 6</li>\n</ul>\n<blockquote>\n<p>row parity</p>\n</blockquote>\n<center><img src=\"image-20191216130127847.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130127847\" style=\"zoom:30%;\" /></center>\n\n<blockquote>\n<p>Diagonal parity</p>\n</blockquote>\n<center><img src=\"image-20191216130657742.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130657742\" style=\"zoom:30%;\" /></center>\n\n<p>看一个例子</p>\n<p>disk 1和disk 3 double failure</p>\n<center><img src=\"image-20191216130845614.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130845614\" style=\"zoom:30%;\" /></center>\n\n<p>First recover Disk 3 stripe 0. Because its diagonal parity is independent from the other failed disk 1.</p>\n<center><img src=\"image-20191216130921114.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130921114\" style=\"zoom:30%;\" /></center>\n\n<p>When Disk 3 stripe 0 is recoverd, then we can recover Disk 1 stripe 3. Because on its row, only its stripe is failed. So we can use the row parity to recover the stripe.</p>\n<center><img src=\"image-20191216130953500.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216130953500\" style=\"zoom:30%;\" /></center>\n\n<p>Now, we have recovered Disk 1 stripe 3 and Disk 3 stripe 0</p>\n<center><img src=\"image-20191216131127165.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131127165\" style=\"zoom:30%;\" /></center>\n\n<p>以下同理</p>\n<center><img src=\"image-20191216131242663.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131242663\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131302430.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131302430\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131334869.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131334869\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131357343.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131357343\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131420435.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131420435\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131449208.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131449208\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131514362.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131514362\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131536642.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131536642\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191216131556362.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216131556362\" style=\"zoom:30%;\" /></center>\n\n<h1 id=\"7-I-O-performance\"><a href=\"#7-I-O-performance\" class=\"headerlink\" title=\"7. I/O performance\"></a>7. I/O performance</h1><h3 id=\"unique-measures\"><a href=\"#unique-measures\" class=\"headerlink\" title=\"unique measures\"></a>unique measures</h3><ul>\n<li>Diversity</li>\n</ul>\n<blockquote>\n<p>which I/O devices can connect to the computer system?</p>\n</blockquote>\n<ul>\n<li>Capacity</li>\n</ul>\n<blockquote>\n<p>how many I/O devices can connect to a computer system?</p>\n</blockquote>\n<h3 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics\"></a>Metrics</h3><ul>\n<li><p>response time[latency]</p>\n</li>\n<li><p>throughout[bandwidth]</p>\n</li>\n</ul>\n<center><img src=\"image-20191216102829183.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216102829183\" style=\"zoom:50%;\" /></center>\n\n<h2 id=\"7-1-Throughout-VS-Response-Time\"><a href=\"#7-1-Throughout-VS-Response-Time\" class=\"headerlink\" title=\"7.1 Throughout VS Response Time\"></a>7.1 Throughout VS Response Time</h2><p><strong><em>Transaction</em></strong></p>\n<blockquote>\n<p>An interation between human and computer is called <strong><em><u>transaction</u></em></strong></p>\n</blockquote>\n<p>A <strong><em><u>transaction time</u></em></strong> is divided into three parts:</p>\n<blockquote>\n<ul>\n<li><u>entry time</u></li>\n</ul>\n<blockquote>\n<p>The time for user to enter the command</p>\n</blockquote>\n<ul>\n<li><u>system response time</u></li>\n</ul>\n<blockquote>\n<p>The time between when the user enters the command and the complete response is displayed</p>\n</blockquote>\n<ul>\n<li><u>think time</u></li>\n</ul>\n<blockquote>\n<p>The time from the reception of the response until the user begins to <strong><em><u>enter the next command</u></em></strong></p>\n</blockquote>\n</blockquote>\n<center><img src=\"image-20191216210721189.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216210721189\" style=\"zoom:40%;\" /></center>\n<center><img src=\"image-20191216210659441.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216210659441\" style=\"zoom:50%;\" /></center>\n\n<p>More transaction time reduction than just the response time reduction. People need less time to think when given a faster response</p>\n<h2 id=\"7-2-Transaction-Processing-Benchmarks\"><a href=\"#7-2-Transaction-Processing-Benchmarks\" class=\"headerlink\" title=\"7.2 Transaction-Processing Benchmarks\"></a>7.2 Transaction-Processing Benchmarks</h2><h3 id=\"A-SPEC\"><a href=\"#A-SPEC\" class=\"headerlink\" title=\"A. SPEC\"></a>A. SPEC</h3><h3 id=\"B-TPC-C\"><a href=\"#B-TPC-C\" class=\"headerlink\" title=\"B. TPC_C\"></a>B. TPC_C</h3><h2 id=\"7-3-A-little-Queuing-Theory-to-calculate-response-time-and-throughput\"><a href=\"#7-3-A-little-Queuing-Theory-to-calculate-response-time-and-throughput\" class=\"headerlink\" title=\"7.3 A little Queuing Theory[to calculate response time and throughput]\"></a>7.3 A little Queuing Theory[to calculate response time and throughput]</h2><center><img src=\"image-20191216104938324.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216104938324\" style=\"zoom:50%;\" /></center>\n\n<p><strong><em>Flow-balanced State</em></strong></p>\n<ul>\n<li><p>If the system is in <strong>steady state</strong>,  then the number of tasks entering the system must equal the number of tasks leaving the system</p>\n</li>\n<li><p>This <strong>flow-balanced state</strong> is necessary but not sufficient for steady state</p>\n</li>\n<li><p>The system has reached <strong>steady state</strong> if the system has been observed for a sufficiently long time and  mean waiting times stabilize</p>\n</li>\n</ul>\n<h3 id=\"A-little’s-law-important\"><a href=\"#A-little’s-law-important\" class=\"headerlink\" title=\"A. little’s law[important]\"></a>A. little’s law[important]</h3><h4 id=\"i-Assumptions\"><a href=\"#i-Assumptions\" class=\"headerlink\" title=\"i. Assumptions\"></a>i. Assumptions</h4><div class=\"note note-info\">\n            <p>input rate = output rate; </p><p>a steady supply of tasks independent for how long they wait for service;</p>\n          </div>\n<h4 id=\"ii-little’s-law\"><a href=\"#ii-little’s-law\" class=\"headerlink\" title=\"ii. little’s law\"></a>ii. little’s law</h4><div class=\"note note-error\">\n            <p>Mean number of tasks in system =  Arrival rate $\\times$ Mean response time</p><p>注意arrival rate 表示单位时间到了几个task</p>\n          </div>\n<h4 id=\"iii-single-server-model\"><a href=\"#iii-single-server-model\" class=\"headerlink\" title=\"iii. single-server model\"></a>iii. single-server model</h4><center><img src=\"image-20191216214128113.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216214128113\" style=\"zoom: 40%;\" /></center>\n\n<ul>\n<li>$Time_{server}$  —Average time to service a task; average  $service_{rate}=1/Time_{server}$</li>\n<li>$Time_{queue}$—Average time per task in the queue.</li>\n<li>$Time_{system}$ —Average time per task in the system, or the response time, which is $Time_{queue}+Time_{server}$ .</li>\n<li>Arrival rate—Average number of arriving tasks/second</li>\n<li>$Length_{server}$—Average number of tasks in service.</li>\n<li>$Length_{queue}$—Average length of queue.</li>\n<li>$Length_{system}$—Average number of tasks in system, which is $Length_{server}+Length_{queue}$</li>\n</ul>\n<p><strong><em>Server Utilization</em></strong></p>\n<div class=\"note note-info\">\n            <p>Server utilization = Arrival rate$\\times$ $Time_{server}$</p>\n          </div>\n<center><img src=\"image-20191216110406290.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216110406290\" style=\"zoom:50%;\" /></center>\n\n<p><br/></p>\n<p><strong><em>Time queue</em></strong></p>\n<p>$Time_{queue}=Length_{queue}\\times Time_{server}+$Mean time to complete the task being serviced when new task arrives if server is busy</p>\n<p>$Time_{queue}=Time_{server}\\times \\frac{Server\\;utilization}{1-Server\\; utilization}$</p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\\begin{aligned}Length_{queue}=&Arrival\\; rate\\times Time_{server}\\times\\frac{Server\\;utilization}{1-Server\\; utilization}\\\\ =&\\frac{Server\\; utilization^2}{1-Server\\; utilization}\\end{aligned}\\end{equation}</script><h4 id=\"iv-M-M-1-queue\"><a href=\"#iv-M-M-1-queue\" class=\"headerlink\" title=\"iv. M/M/1 queue\"></a>iv. M/M/1 queue</h4><blockquote>\n<p><strong>M</strong>: <em>Markov</em></p>\n<p>exponentially random request arrival;</p>\n<p><strong>M</strong>: <em>Markov</em></p>\n<p>exponentially random service time</p>\n<p><strong>1</strong></p>\n<p>single server</p>\n</blockquote>\n<p><strong>assumptions</strong></p>\n<blockquote>\n<p>The system is in equilibrium</p>\n<p><em>Interarrival</em> <em>times</em> [times between two successive requests arriving] are exponentionally distributed</p>\n<p><em>Infinite population model</em>: unlimited number of sources of requests</p>\n<p>Server starts on the next job immediately after finishing prior one</p>\n<p>FIFO queue with unlimited length</p>\n<p>One server only</p>\n</blockquote>\n<center><img src=\"image-20191216222544839.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222544839\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222600418.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222600418\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222618484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222618484\" style=\"zoom:50%;\" /></center>\n\n<h4 id=\"v-M-M-m-queue\"><a href=\"#v-M-M-m-queue\" class=\"headerlink\" title=\"v. M/M/m queue\"></a>v. M/M/m queue</h4><center><img src=\"image-20191216222740597.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222740597\" style=\"zoom:50%;\" /></center>\n<center><img src=\"image-20191216222905001.png\" srcset=\"/img/loading.gif\" alt=\"image-20191216222905001\" style=\"zoom:40%;\" /></center>"},{"title":"CA - Instruction Set","date":"2019-09-08T14:04:07.000Z","index_img":"/img/image-20190930101228492.png","_content":"\n# <a name=\"ISA\">附录A 指令集基本原理 </a>\n\n# 1 What is ISA?\n\nISA: Instruction Set Architecture\n\n<img src=\"image-20190930101228492.png\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n# 2 What types of ISA?\n\n### 2.1 Basis\n\n* type of internal storage\n\n> stack\n>\n> accumulator\n>\n> Register-memory\n>\n> Register-register/load-store\n\n<br/>\n\n先来解释一下implicit operand和explicit operand\n\n* explicit operand\n\n明确到哪个地方去取的操作数，比如到某一个由指令确定的***寄存器***，或者内存中一个由指令确定的***存储器地址***\n\n* implicit operand\n\n不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。\n\n<br/>\n\n<img src=\"image-20191218224444341.png\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\nC=A+B的代码示例\n\n<img src=\"image-20191218224500000.png\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\nexample problem\n\n<img src=\"image-20191218224924929.png\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n#### 2.1.1 Stack Architecture\n\n***<u>operand</u>***:\n\n>  2 ***<u>implicit</u>*** operands on the top of the stack(***TOS***)\n\n用图来看一下以下操作的过程\n\n```\nC = A + B (memory locations)\nPush A\nPush B\nAdd \nPop C\n```\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n#### 2.1.2 Accumulator Architecture\n\n***<u>operand</u>***\n\n> one implicit operand: accumulator\n>\n> one explicit operand: mem location\n\n看一下以下操作的过程\n\n```\nC = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan implicit input operand \nand a result\n```\n\n  \n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n  \t<td>\n  <img src=\"image-20190930115734010.png\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n# 3. 存储器寻址\n\n## 3.1 解释存储器地址\n\ni. 关于如何对一个较大对象中的字节排序：\n\n* Little Endian : store least significant byte in the smallest address\n\n<img src=\"image-20191014101250484.png\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n* Big Endian : store most significant byte in the smallest address\n\n<img src=\"image-20191014101429477.png\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\nii. 字节对齐\n\n大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的\n\n<img src=\"image-20191014101703881.png\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n为什么要对齐\n\n> When well aligned, requires only one memory access to read one object;\n>\n> If address is not well aligned, each misaligned object requires two memory accesses to fetch.\n\n## 3.2  Addressing modes\n\n<img src=\"image-20191014102744097-6809392.png\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\nReferences:  \n\n[1]计算机体系结构 量化研究方法\n\n","source":"_posts/ComputerArchitecture/instructionSet.md","raw":"---\ntitle: CA - Instruction Set\ndate: 2019-09-08 22:04:07\ntags: Computer Architecture\ncategories: Computer Architecture\nindex_img: /img/image-20190930101228492.png\n---\n\n# <a name=\"ISA\">附录A 指令集基本原理 </a>\n\n# 1 What is ISA?\n\nISA: Instruction Set Architecture\n\n<img src=\"image-20190930101228492.png\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" />\n\n# 2 What types of ISA?\n\n### 2.1 Basis\n\n* type of internal storage\n\n> stack\n>\n> accumulator\n>\n> Register-memory\n>\n> Register-register/load-store\n\n<br/>\n\n先来解释一下implicit operand和explicit operand\n\n* explicit operand\n\n明确到哪个地方去取的操作数，比如到某一个由指令确定的***寄存器***，或者内存中一个由指令确定的***存储器地址***\n\n* implicit operand\n\n不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。\n\n<br/>\n\n<img src=\"image-20191218224444341.png\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" />\n\nC=A+B的代码示例\n\n<img src=\"image-20191218224500000.png\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" />\n\nexample problem\n\n<img src=\"image-20191218224924929.png\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" />\n\n#### 2.1.1 Stack Architecture\n\n***<u>operand</u>***:\n\n>  2 ***<u>implicit</u>*** operands on the top of the stack(***TOS***)\n\n用图来看一下以下操作的过程\n\n```\nC = A + B (memory locations)\nPush A\nPush B\nAdd \nPop C\n```\n\n\n\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n#### 2.1.2 Accumulator Architecture\n\n***<u>operand</u>***\n\n> one implicit operand: accumulator\n>\n> one explicit operand: mem location\n\n看一下以下操作的过程\n\n```\nC = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan implicit input operand \nand a result\n```\n\n  \n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n  \t<td>\n  <img src=\"image-20190930115734010.png\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n# 3. 存储器寻址\n\n## 3.1 解释存储器地址\n\ni. 关于如何对一个较大对象中的字节排序：\n\n* Little Endian : store least significant byte in the smallest address\n\n<img src=\"image-20191014101250484.png\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" />\n\n\n* Big Endian : store most significant byte in the smallest address\n\n<img src=\"image-20191014101429477.png\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" />\n\nii. 字节对齐\n\n大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的\n\n<img src=\"image-20191014101703881.png\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" />\n\n为什么要对齐\n\n> When well aligned, requires only one memory access to read one object;\n>\n> If address is not well aligned, each misaligned object requires two memory accesses to fetch.\n\n## 3.2  Addressing modes\n\n<img src=\"image-20191014102744097-6809392.png\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" />\n\n\n\n\n\nReferences:  \n\n[1]计算机体系结构 量化研究方法\n\n","slug":"ComputerArchitecture/instructionSet","published":1,"updated":"2020-08-07T14:14:21.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpp3i3g00060rufa1252m9a","content":"<h1 id=\"附录A-指令集基本原理\"><a href=\"#附录A-指令集基本原理\" class=\"headerlink\" title=\"附录A 指令集基本原理 \"></a><a name=\"ISA\">附录A 指令集基本原理 </a></h1><h1 id=\"1-What-is-ISA\"><a href=\"#1-What-is-ISA\" class=\"headerlink\" title=\"1 What is ISA?\"></a>1 What is ISA?</h1><p>ISA: Instruction Set Architecture</p>\n<p><img src=\"image-20190930101228492.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" /></p>\n<h1 id=\"2-What-types-of-ISA\"><a href=\"#2-What-types-of-ISA\" class=\"headerlink\" title=\"2 What types of ISA?\"></a>2 What types of ISA?</h1><h3 id=\"2-1-Basis\"><a href=\"#2-1-Basis\" class=\"headerlink\" title=\"2.1 Basis\"></a>2.1 Basis</h3><ul>\n<li>type of internal storage</li>\n</ul>\n<blockquote>\n<p>stack</p>\n<p>accumulator</p>\n<p>Register-memory</p>\n<p>Register-register/load-store</p>\n</blockquote>\n<p><br/></p>\n<p>先来解释一下implicit operand和explicit operand</p>\n<ul>\n<li>explicit operand</li>\n</ul>\n<p>明确到哪个地方去取的操作数，比如到某一个由指令确定的<strong><em>寄存器</em></strong>，或者内存中一个由指令确定的<strong><em>存储器地址</em></strong></p>\n<ul>\n<li>implicit operand</li>\n</ul>\n<p>不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。</p>\n<p><br/></p>\n<p><img src=\"image-20191218224444341.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" /></p>\n<p>C=A+B的代码示例</p>\n<p><img src=\"image-20191218224500000.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" /></p>\n<p>example problem</p>\n<p><img src=\"image-20191218224924929.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" /></p>\n<h4 id=\"2-1-1-Stack-Architecture\"><a href=\"#2-1-1-Stack-Architecture\" class=\"headerlink\" title=\"2.1.1 Stack Architecture\"></a>2.1.1 Stack Architecture</h4><p><strong><em><u>operand</u></em></strong>:</p>\n<blockquote>\n<p> 2 <strong><em><u>implicit</u></em></strong> operands on the top of the stack(<strong><em>TOS</em></strong>)</p>\n</blockquote>\n<p>用图来看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\">C = A + <span class=\"hljs-keyword\">B </span>(memory locations)\n<span class=\"hljs-keyword\">Push </span>A\n<span class=\"hljs-keyword\">Push </span><span class=\"hljs-keyword\">B</span>\n<span class=\"hljs-keyword\">Add </span>\n<span class=\"hljs-keyword\">Pop </span>C</code></pre></div>\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n<h4 id=\"2-1-2-Accumulator-Architecture\"><a href=\"#2-1-2-Accumulator-Architecture\" class=\"headerlink\" title=\"2.1.2 Accumulator Architecture\"></a>2.1.2 Accumulator Architecture</h4><p><strong><em><u>operand</u></em></strong></p>\n<blockquote>\n<p>one implicit operand: accumulator</p>\n<p>one explicit operand: mem location</p>\n</blockquote>\n<p>看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs fortran\">C = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan <span class=\"hljs-keyword\">implicit</span> input operand \nand a result</code></pre></div>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n      <td>\n  <img src=\"image-20190930115734010.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n<h1 id=\"3-存储器寻址\"><a href=\"#3-存储器寻址\" class=\"headerlink\" title=\"3. 存储器寻址\"></a>3. 存储器寻址</h1><h2 id=\"3-1-解释存储器地址\"><a href=\"#3-1-解释存储器地址\" class=\"headerlink\" title=\"3.1 解释存储器地址\"></a>3.1 解释存储器地址</h2><p>i. 关于如何对一个较大对象中的字节排序：</p>\n<ul>\n<li>Little Endian : store least significant byte in the smallest address</li>\n</ul>\n<p><img src=\"image-20191014101250484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" /></p>\n<ul>\n<li>Big Endian : store most significant byte in the smallest address</li>\n</ul>\n<p><img src=\"image-20191014101429477.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" /></p>\n<p>ii. 字节对齐</p>\n<p>大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的</p>\n<p><img src=\"image-20191014101703881.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" /></p>\n<p>为什么要对齐</p>\n<blockquote>\n<p>When well aligned, requires only one memory access to read one object;</p>\n<p>If address is not well aligned, each misaligned object requires two memory accesses to fetch.</p>\n</blockquote>\n<h2 id=\"3-2-Addressing-modes\"><a href=\"#3-2-Addressing-modes\" class=\"headerlink\" title=\"3.2  Addressing modes\"></a>3.2  Addressing modes</h2><p><img src=\"image-20191014102744097-6809392.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" /></p>\n<p>References:  </p>\n<p>[1]计算机体系结构 量化研究方法</p>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1 id=\"附录A-指令集基本原理\"><a href=\"#附录A-指令集基本原理\" class=\"headerlink\" title=\"附录A 指令集基本原理 \"></a><a name=\"ISA\">附录A 指令集基本原理 </a></h1><h1 id=\"1-What-is-ISA\"><a href=\"#1-What-is-ISA\" class=\"headerlink\" title=\"1 What is ISA?\"></a>1 What is ISA?</h1><p>ISA: Instruction Set Architecture</p>\n<p><img src=\"image-20190930101228492.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930101228492\" style=\"zoom:50%;\" /></p>\n<h1 id=\"2-What-types-of-ISA\"><a href=\"#2-What-types-of-ISA\" class=\"headerlink\" title=\"2 What types of ISA?\"></a>2 What types of ISA?</h1><h3 id=\"2-1-Basis\"><a href=\"#2-1-Basis\" class=\"headerlink\" title=\"2.1 Basis\"></a>2.1 Basis</h3><ul>\n<li>type of internal storage</li>\n</ul>\n<blockquote>\n<p>stack</p>\n<p>accumulator</p>\n<p>Register-memory</p>\n<p>Register-register/load-store</p>\n</blockquote>\n<p><br/></p>\n<p>先来解释一下implicit operand和explicit operand</p>\n<ul>\n<li>explicit operand</li>\n</ul>\n<p>明确到哪个地方去取的操作数，比如到某一个由指令确定的<strong><em>寄存器</em></strong>，或者内存中一个由指令确定的<strong><em>存储器地址</em></strong></p>\n<ul>\n<li>implicit operand</li>\n</ul>\n<p>不明确的取值位置，但是系统默认了。比如stack architecture就是默认到stack头部去取，accumulator architecture就是默认到accumulator中去取。</p>\n<p><br/></p>\n<p><img src=\"image-20191218224444341.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224444341\" style=\"zoom:50%;\" /></p>\n<p>C=A+B的代码示例</p>\n<p><img src=\"image-20191218224500000.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224500000\" style=\"zoom:50%;\" /></p>\n<p>example problem</p>\n<p><img src=\"image-20191218224924929.png\" srcset=\"/img/loading.gif\" alt=\"image-20191218224924929\" style=\"zoom:50%;\" /></p>\n<h4 id=\"2-1-1-Stack-Architecture\"><a href=\"#2-1-1-Stack-Architecture\" class=\"headerlink\" title=\"2.1.1 Stack Architecture\"></a>2.1.1 Stack Architecture</h4><p><strong><em><u>operand</u></em></strong>:</p>\n<blockquote>\n<p> 2 <strong><em><u>implicit</u></em></strong> operands on the top of the stack(<strong><em>TOS</em></strong>)</p>\n</blockquote>\n<p>用图来看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\">C = A + <span class=\"hljs-keyword\">B </span>(memory locations)\n<span class=\"hljs-keyword\">Push </span>A\n<span class=\"hljs-keyword\">Push </span><span class=\"hljs-keyword\">B</span>\n<span class=\"hljs-keyword\">Add </span>\n<span class=\"hljs-keyword\">Pop </span>C</code></pre></div>\n <table>\n   <tr>\n     <td>\n       <img src=\"image-20190930102555608.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102555608\" title=\"original\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930102855084.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930102855084\" title=\"push A\"/>\n     </td>\n     <td>\n  <img src=\"image-20190930103000391.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103000391\" title=\"push B\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103037853.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103037853\" title=\"Add\"  />\n     </td>\n     <td>\n  <img src=\"image-20190930103101742.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930103101742\" title=\"pop C\" />\n     </td>\n   </tr>\n </table>\n\n\n\n\n<h4 id=\"2-1-2-Accumulator-Architecture\"><a href=\"#2-1-2-Accumulator-Architecture\" class=\"headerlink\" title=\"2.1.2 Accumulator Architecture\"></a>2.1.2 Accumulator Architecture</h4><p><strong><em><u>operand</u></em></strong></p>\n<blockquote>\n<p>one implicit operand: accumulator</p>\n<p>one explicit operand: mem location</p>\n</blockquote>\n<p>看一下以下操作的过程</p>\n<div class=\"hljs\"><pre><code class=\"hljs fortran\">C = A + B\nLoad A\nAdd B\nStore C\n\naccumulator is both \nan <span class=\"hljs-keyword\">implicit</span> input operand \nand a result</code></pre></div>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20190930115553486.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115553486\" title=\"original\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115635931.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115635931\" title=\"load A\"/>\n    </td>\n      <td>\n  <img src=\"image-20190930115734010.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115734010\" title=\"add B\"/>\n    </td>\n    <td>\n  <img src=\"image-20190930115804883.png\" srcset=\"/img/loading.gif\" alt=\"image-20190930115804883\" title=\"store C\"/>\n    </td>\n  </tr>\n</table>\n\n\n\n\n<h1 id=\"3-存储器寻址\"><a href=\"#3-存储器寻址\" class=\"headerlink\" title=\"3. 存储器寻址\"></a>3. 存储器寻址</h1><h2 id=\"3-1-解释存储器地址\"><a href=\"#3-1-解释存储器地址\" class=\"headerlink\" title=\"3.1 解释存储器地址\"></a>3.1 解释存储器地址</h2><p>i. 关于如何对一个较大对象中的字节排序：</p>\n<ul>\n<li>Little Endian : store least significant byte in the smallest address</li>\n</ul>\n<p><img src=\"image-20191014101250484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101250484\" style=\"zoom:40%;\" /></p>\n<ul>\n<li>Big Endian : store most significant byte in the smallest address</li>\n</ul>\n<p><img src=\"image-20191014101429477.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101429477\" style=\"zoom:40%;\" /></p>\n<p>ii. 字节对齐</p>\n<p>大小为s bytes的对象，字节地址为A, 如果$A\\; mod\\;s = 0$ , 那么是字节对齐的</p>\n<p><img src=\"image-20191014101703881.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014101703881\" style=\"zoom:40%;\" /></p>\n<p>为什么要对齐</p>\n<blockquote>\n<p>When well aligned, requires only one memory access to read one object;</p>\n<p>If address is not well aligned, each misaligned object requires two memory accesses to fetch.</p>\n</blockquote>\n<h2 id=\"3-2-Addressing-modes\"><a href=\"#3-2-Addressing-modes\" class=\"headerlink\" title=\"3.2  Addressing modes\"></a>3.2  Addressing modes</h2><p><img src=\"image-20191014102744097-6809392.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014102744097-6809392\" style=\"zoom:50%;\" /></p>\n<p>References:  </p>\n<p>[1]计算机体系结构 量化研究方法</p>\n"},{"title":"CA - Pipeline","date":"2019-10-13T14:04:07.000Z","index_img":"/img/image-20191021110018403.png","_content":"\n<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n## 1 什么是流水线\n\n流水线是一种将多条指令 ***重叠执行*** 的实现技术  \n\n一条执行包含多种操作，流水线充分利用了这些 ***操作之间的并行性***\n<br/>\n\n为了能更形象地理解这个问题，不妨用汽车装配线来做类比    \n\n> 汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  \n>\n> 在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 ***流水级或者流水段***。流水级前后相连形成流水线  \n>\n> 汽车装配线的 ***吞吐量*** 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定\n>\n> 流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 ***处理器周期*** 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。\n\n可以想见，要使流水线性能高，平衡各流水线级很重要  \n\n> 因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]\n\n如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  \n\n$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  \n\n在这些条件下，流水线加速比=流水级的数目\n\n<br/>\n\n# 2 RISC指令集\n\n我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。\n\nRISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期\n\n- ***指令提取周期(IF(Instruction Fetch))***  \n- ***指令译码/寄存器提取周期(ID)***  \n- ***执行/有效地址周期(EX)***  \n- ***存储器访问(MEM)***\n- ***写回周期(WB)***\n\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\nhttp://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\n\n<br/>\n\n# 3 RISC处理器经典五级流水线\n\n<center><img src=\"ca20190908-1.png\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" width=\"600\"></center>\n\n<br/>\n\n在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点\n\n#### A. \n\n使用分离的指令存储器和数据存储器。\n\n这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。\n\n注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供**5倍带宽**\n\n#### B.\n\n两个阶段使用了寄存器堆：**ID**阶段decode, **WB**阶段writeback写入\n\n因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入\n\n为了出气对相同寄存器堆多次读取和一次写入，***我们在时钟周期的前半部分写寄存器，后半部分读寄存器***\n\n#### C.\n\n程序计数器在IF阶段要递增\n\nID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？\n\n<br/>\n\n除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。\n\n<center><img src=\"image-20191013133054888.png\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n# 4 流水化的主要阻碍-流水线冒险\n\n冒险降低来了流水化所能带来的理想加速比  \n冒险共有一下三类  \n\n1. 结构冒险  \n\n   在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]\n\n2. 数据冒险  \n\n   指令之间存在先后顺序，一条指令取决于先前指令的结果\n\n3. 控制冒险 \n\n   分支指令以及其他改变程序计数器的指令会导致控制冒险\n        \n\n为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。\n\n{% note warning%}\n\n这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的***所有指令也会被停顿***，之前发射的指令不会被停顿\n\n{% endnote %}\n\n<br/>\n\n## 4.1 带有停顿的流水线性能  \n\n$\n流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$\n$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$\n$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$\n\n<br/>\n\n流水化处理器的理想CPI几乎总是等于1，算上停顿\n$\n流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$\n$=1+每条指令的流水线停顿时间周期$\n\n所以\n\n$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$\n\n如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度\n\n$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$\n\n\n\n{% note warning%}\n\n<u>所以，如果没有流水线停顿，加速比=流水线深度</u>\n\n{% endnote %}\n\n## 4.2 结构冒险\n\ni. 什么是结构冒险\n\n> 指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合\n>\n> 如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险\n\nii. 解决方式\n\n在发生结构冒险时，使流水线停顿一个时钟周期\n\n停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大\n\n<br/>\n\n## 4.3 数据冒险\n\ni. 数据冒险是什么\n\n> 有些指令依赖于之前指令的结果\n\n```\nDADD R1, R2, R3\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\nXOR  R10,R1, R11\n```\n\nDADD后的所有指令都用到了DADD指令的结果R1\n\n所以在DADD的结果writeback之前，下面的指令都是不能execute的\n\n<center><img src=\"image-20191013143518878.png\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\nii. 解决方法\n\nA. 转发(forwarding)\n\n转发是一个什么思想呢？ \n\n> DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback\n\n转发的工作方式\n\n1. 来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端\n2. 如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值\n\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" style=\"zoom: 30%;\" /></center>\n\nB, 需要停顿的数据冒险\n\n并非所有的潜在数据冒险都可以通过转发处理\n\n```\nLD   R1, 0(R2)\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\n```\n\n<center><img src=\"image-20191013151122898.png\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n### More about data dependences and hazards\n\n#### A. data dependences\n\n1. 数据相关[真数据相关]\n\n指令i生成的结果可能会被指令j用到\n\n指令j数据相关于指令k, 指令k数据相关于指令i\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n2. 名称相关\n\n当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。\n\n* Anti-dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 reads from a location that is overwritten later by S2\n\n{% note warning%}\n\nWAR\n\n* Output dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 and S2 write to the same location \n\n{% endnote %}\n\nWAW\n\n由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。\n\n\n\n#### B. data hazards\n\n* RAW\n* WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险\n* WAR: 对应于antidependence。\n\n## 4.4 分支冒险\n\n### i. 分支冒险是什么\n\n执行分支指令时，修改后的PC可能等于也可能不等于PC+4。\n\n如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC\n\n那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。\n\n\n\n### ii. 解决方法\n\n一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要\n\n<img src=\"image-20191021095111.png\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n所以，如何降低流水线分支代价？\n\n4种简单的编译时机制\n\n#### A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\n\n#### B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\n\n这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。\n\n这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变\n\n<center><img src=\"image-20191014112116582.png\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n#### C. 将所有分支都看作选中分支\n\n只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。\n\n但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。\n\n#### D. 延迟分支\n\n> 分支指令\n>\n> 依序后续指令[位于delay slots]\n>\n> 选中时的分支指令\n\n获得编译器支持，编译器让后续指令有效并且可用\n\n<center><img src=\"image-20191021095901298.png\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n延迟调度有局限性，这个局限性是因为\n\n>1. 可以排在延迟时隙[delay slots]中的指令有限制\n>2. 编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了*canceling* or *nullifying* branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。\n\n看一下这些不同的解决方法效率有什么差别\n\n<center><img src=\"image-20191021101747938.png\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n考虑flush pipeline\n\nunconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2\n\n其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3\n\n这样，考虑predicted untaken\n\nunconditional 指令被预测不执行，但是一定会执行，代价是2\n\nconditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3\n\n考虑predicted taken\n\n如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转\n\n<br>\n\n当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]\n\n#### i. 静态分支预测\n\n事先收集数据，根据数据来预测分支\n\n#### ii. 动态分支预测\n\n使用分支预测缓冲区[Branch-Prediction Buffer].\n\n这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。\n\n这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转\n\n但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。\n\n所以这里提出了2位预测机制。\n\n两位预测机制，预测必须连续错过两次才会进行修改。\n\n<center><img src=\"image-20191021103246990.png\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n# 5. 如何实现流水线\n\nMIPS CPU多周期实现\n\n<center><img src=\"image-20191021105802697.png\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n## Basic Pipeline\n\n<center><img src=\"image-20191021110018403.png\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n### i. IF\n\n```cpp\nIF/ID.IR = Mem[PC];\t//取指令\nif((EX/MEM.opcode == branch) && EX/MEM.cond) {\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n} else {\n  IF/IR.NPC = PC + 4;\n  PC = PC + 4;\n}\n```\n\n### ii. ID\n\n```cpp\nID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);\n```\n\n### iii. EX\n\n#### A. ALU EX\n\n```cpp\nEX/MEM.IR = ID/EX.IR;\n执行以下之一\n1. EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n2. EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm\n```\n\n#### B. Load Store EX\n\n```cpp\nEX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;\n```\n\n#### C. Branch EX\n\n```cpp\nEX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm << 2);\nEX/MEM.cond = (ID/EX.A == 0);\n```\n\n\n\n### iv. MEM\n\n#### A. ALU MEM\n\n```cpp\nMEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;\n```\n\n#### B. Load Store MEM\n\n```cpp\nMEM/WB.OR = EX/MEM.IR;\n1. MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n2. Mem[EX/MEM.ALUOutput] = EX/MEM.B;\n```\n\n### v. WB\n\n#### A. ALU WB\n\n```cpp\n1. Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n2. Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;\n```\n\n\n\n#### B. Load Store WB\n\n```cpp\nFor load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;\n```\n\n\n\n## Control the Pipeline\n\ninstruction issue:\n\n> 一条指令从ID移入EX的过程\n\n对于整数流水线，所有数据冒险都可以在ID进行检查。\n\n如果存在数据冒险，这个指令将会在issue之前停顿。\n\n同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。\n\n<center><img src=\"image-20191021115323894.png\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\npipeline overhead\n\ndue to stage imbalance, pipeline register setup\n\n\n\n### Deal with forwarding\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n# 6. 扩展MIPS流水线，以处理多周期操作\n\n扩展mips流水线，以处理浮点运算\n\n\n\n浮点运算的问题\n\n> 要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能\n>\n> 如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。\n>\n> 所以\n>\n> * 为了完成操作，EX周期可能要根据需要重复多次\n> * 可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。\n\n\n\n4个独立的功能单元\n\n* 主整数单元，处理load, store, 整数ALU operation, branch\n* 浮点与整数乘法器\n* 浮点加法器，处理浮点加、减和转换\n* 浮点和整型除法器\n\n假定这些功能单元的执行级没有实现流水化\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n两个指标\n\n* latency\n\n  the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。\n\n  > Essentially, pipeline **latency** is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the **EX stage** to the stage that produces the result \n\n* initiation/repeat interval\n\n  同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行\n\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\ninstruction issue: 从ID到EX的阶段\n\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","source":"_posts/ComputerArchitecture/pipeline.md","raw":"---\ntitle: CA - Pipeline\ndate: 2019-10-13 22:04:07\ntags: Computer Architecture\ncategories: Computer Architecture\nindex_img: /img/image-20191021110018403.png\n---\n\n<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n## 1 什么是流水线\n\n流水线是一种将多条指令 ***重叠执行*** 的实现技术  \n\n一条执行包含多种操作，流水线充分利用了这些 ***操作之间的并行性***\n<br/>\n\n为了能更形象地理解这个问题，不妨用汽车装配线来做类比    \n\n> 汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  \n>\n> 在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 ***流水级或者流水段***。流水级前后相连形成流水线  \n>\n> 汽车装配线的 ***吞吐量*** 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定\n>\n> 流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 ***处理器周期*** 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。\n\n可以想见，要使流水线性能高，平衡各流水线级很重要  \n\n> 因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]\n\n如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  \n\n$$\\frac{非流水线机器上每条指令的时间}{流水级的数目}$$  \n\n在这些条件下，流水线加速比=流水级的数目\n\n<br/>\n\n# 2 RISC指令集\n\n我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。\n\nRISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期\n\n- ***指令提取周期(IF(Instruction Fetch))***  \n- ***指令译码/寄存器提取周期(ID)***  \n- ***执行/有效地址周期(EX)***  \n- ***存储器访问(MEM)***\n- ***写回周期(WB)***\n\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\nhttp://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\n\n<br/>\n\n# 3 RISC处理器经典五级流水线\n\n<center><img src=\"ca20190908-1.png\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" width=\"600\"></center>\n\n<br/>\n\n在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点\n\n#### A. \n\n使用分离的指令存储器和数据存储器。\n\n这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。\n\n注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供**5倍带宽**\n\n#### B.\n\n两个阶段使用了寄存器堆：**ID**阶段decode, **WB**阶段writeback写入\n\n因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入\n\n为了出气对相同寄存器堆多次读取和一次写入，***我们在时钟周期的前半部分写寄存器，后半部分读寄存器***\n\n#### C.\n\n程序计数器在IF阶段要递增\n\nID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？\n\n<br/>\n\n除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。\n\n<center><img src=\"image-20191013133054888.png\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n# 4 流水化的主要阻碍-流水线冒险\n\n冒险降低来了流水化所能带来的理想加速比  \n冒险共有一下三类  \n\n1. 结构冒险  \n\n   在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]\n\n2. 数据冒险  \n\n   指令之间存在先后顺序，一条指令取决于先前指令的结果\n\n3. 控制冒险 \n\n   分支指令以及其他改变程序计数器的指令会导致控制冒险\n        \n\n为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。\n\n{% note warning%}\n\n这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的***所有指令也会被停顿***，之前发射的指令不会被停顿\n\n{% endnote %}\n\n<br/>\n\n## 4.1 带有停顿的流水线性能  \n\n$\n流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$\n$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$\n$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$\n\n<br/>\n\n流水化处理器的理想CPI几乎总是等于1，算上停顿\n$\n流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$\n$=1+每条指令的流水线停顿时间周期$\n\n所以\n\n$$加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}$$\n\n如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度\n\n$$加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}$$\n\n\n\n{% note warning%}\n\n<u>所以，如果没有流水线停顿，加速比=流水线深度</u>\n\n{% endnote %}\n\n## 4.2 结构冒险\n\ni. 什么是结构冒险\n\n> 指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合\n>\n> 如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险\n\nii. 解决方式\n\n在发生结构冒险时，使流水线停顿一个时钟周期\n\n停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大\n\n<br/>\n\n## 4.3 数据冒险\n\ni. 数据冒险是什么\n\n> 有些指令依赖于之前指令的结果\n\n```\nDADD R1, R2, R3\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\nXOR  R10,R1, R11\n```\n\nDADD后的所有指令都用到了DADD指令的结果R1\n\n所以在DADD的结果writeback之前，下面的指令都是不能execute的\n\n<center><img src=\"image-20191013143518878.png\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\nii. 解决方法\n\nA. 转发(forwarding)\n\n转发是一个什么思想呢？ \n\n> DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback\n\n转发的工作方式\n\n1. 来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端\n2. 如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值\n\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" style=\"zoom: 30%;\" /></center>\n\nB, 需要停顿的数据冒险\n\n并非所有的潜在数据冒险都可以通过转发处理\n\n```\nLD   R1, 0(R2)\nDSUB R4, R1, R5\nAND  R6, R1, R7\nOR   R8, R1, R9\n```\n\n<center><img src=\"image-20191013151122898.png\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n### More about data dependences and hazards\n\n#### A. data dependences\n\n1. 数据相关[真数据相关]\n\n指令i生成的结果可能会被指令j用到\n\n指令j数据相关于指令k, 指令k数据相关于指令i\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n2. 名称相关\n\n当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。\n\n* Anti-dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 reads from a location that is overwritten later by S2\n\n{% note warning%}\n\nWAR\n\n* Output dependence: S1 -> S2 \n\n (i)  S1 executes before S2\n (ii) S1 and S2 write to the same location \n\n{% endnote %}\n\nWAW\n\n由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。\n\n\n\n#### B. data hazards\n\n* RAW\n* WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险\n* WAR: 对应于antidependence。\n\n## 4.4 分支冒险\n\n### i. 分支冒险是什么\n\n执行分支指令时，修改后的PC可能等于也可能不等于PC+4。\n\n如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC\n\n那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。\n\n\n\n### ii. 解决方法\n\n一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要\n\n<img src=\"image-20191021095111.png\" alt=\"image-20191021095111\" style=\"zoom:50%;\" />\n\n\n\n所以，如何降低流水线分支代价？\n\n4种简单的编译时机制\n\n#### A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\n\n#### B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\n\n这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。\n\n这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变\n\n<center><img src=\"image-20191014112116582.png\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n#### C. 将所有分支都看作选中分支\n\n只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。\n\n但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。\n\n#### D. 延迟分支\n\n> 分支指令\n>\n> 依序后续指令[位于delay slots]\n>\n> 选中时的分支指令\n\n获得编译器支持，编译器让后续指令有效并且可用\n\n<center><img src=\"image-20191021095901298.png\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n延迟调度有局限性，这个局限性是因为\n\n>1. 可以排在延迟时隙[delay slots]中的指令有限制\n>2. 编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了*canceling* or *nullifying* branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。\n\n看一下这些不同的解决方法效率有什么差别\n\n<center><img src=\"image-20191021101747938.png\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n考虑flush pipeline\n\nunconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2\n\n其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3\n\n这样，考虑predicted untaken\n\nunconditional 指令被预测不执行，但是一定会执行，代价是2\n\nconditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3\n\n考虑predicted taken\n\n如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转\n\n<br>\n\n当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]\n\n#### i. 静态分支预测\n\n事先收集数据，根据数据来预测分支\n\n#### ii. 动态分支预测\n\n使用分支预测缓冲区[Branch-Prediction Buffer].\n\n这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。\n\n这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转\n\n但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。\n\n所以这里提出了2位预测机制。\n\n两位预测机制，预测必须连续错过两次才会进行修改。\n\n<center><img src=\"image-20191021103246990.png\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n# 5. 如何实现流水线\n\nMIPS CPU多周期实现\n\n<center><img src=\"image-20191021105802697.png\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n## Basic Pipeline\n\n<center><img src=\"image-20191021110018403.png\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n### i. IF\n\n```cpp\nIF/ID.IR = Mem[PC];\t//取指令\nif((EX/MEM.opcode == branch) && EX/MEM.cond) {\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n} else {\n  IF/IR.NPC = PC + 4;\n  PC = PC + 4;\n}\n```\n\n### ii. ID\n\n```cpp\nID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);\n```\n\n### iii. EX\n\n#### A. ALU EX\n\n```cpp\nEX/MEM.IR = ID/EX.IR;\n执行以下之一\n1. EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n2. EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm\n```\n\n#### B. Load Store EX\n\n```cpp\nEX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;\n```\n\n#### C. Branch EX\n\n```cpp\nEX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm << 2);\nEX/MEM.cond = (ID/EX.A == 0);\n```\n\n\n\n### iv. MEM\n\n#### A. ALU MEM\n\n```cpp\nMEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;\n```\n\n#### B. Load Store MEM\n\n```cpp\nMEM/WB.OR = EX/MEM.IR;\n1. MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n2. Mem[EX/MEM.ALUOutput] = EX/MEM.B;\n```\n\n### v. WB\n\n#### A. ALU WB\n\n```cpp\n1. Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n2. Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;\n```\n\n\n\n#### B. Load Store WB\n\n```cpp\nFor load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;\n```\n\n\n\n## Control the Pipeline\n\ninstruction issue:\n\n> 一条指令从ID移入EX的过程\n\n对于整数流水线，所有数据冒险都可以在ID进行检查。\n\n如果存在数据冒险，这个指令将会在issue之前停顿。\n\n同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。\n\n<center><img src=\"image-20191021115323894.png\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\npipeline overhead\n\ndue to stage imbalance, pipeline register setup\n\n\n\n### Deal with forwarding\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n# 6. 扩展MIPS流水线，以处理多周期操作\n\n扩展mips流水线，以处理浮点运算\n\n\n\n浮点运算的问题\n\n> 要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能\n>\n> 如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。\n>\n> 所以\n>\n> * 为了完成操作，EX周期可能要根据需要重复多次\n> * 可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。\n\n\n\n4个独立的功能单元\n\n* 主整数单元，处理load, store, 整数ALU operation, branch\n* 浮点与整数乘法器\n* 浮点加法器，处理浮点加、减和转换\n* 浮点和整型除法器\n\n假定这些功能单元的执行级没有实现流水化\n\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n两个指标\n\n* latency\n\n  the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。\n\n  > Essentially, pipeline **latency** is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the **EX stage** to the stage that produces the result \n\n* initiation/repeat interval\n\n  同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行\n\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<img src=\"IMG_C3E4F59B24C4.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" />\n\n\n\n\n\ninstruction issue: 从ID到EX的阶段\n\n<center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center>\n<center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","slug":"ComputerArchitecture/pipeline","published":1,"updated":"2020-08-07T14:33:05.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpp3i3h00080ruf90ew72qh","content":"<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n<h2 id=\"1-什么是流水线\"><a href=\"#1-什么是流水线\" class=\"headerlink\" title=\"1 什么是流水线\"></a>1 什么是流水线</h2><p>流水线是一种将多条指令 <strong><em>重叠执行</em></strong> 的实现技术  </p>\n<p>一条执行包含多种操作，流水线充分利用了这些 <strong><em>操作之间的并行性</em></strong><br><br/></p>\n<p>为了能更形象地理解这个问题，不妨用汽车装配线来做类比    </p>\n<blockquote>\n<p>汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  </p>\n<p>在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 <strong><em>流水级或者流水段</em></strong>。流水级前后相连形成流水线  </p>\n<p>汽车装配线的 <strong><em>吞吐量</em></strong> 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定</p>\n<p>流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 <strong><em>处理器周期</em></strong> 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。</p>\n</blockquote>\n<p>可以想见，要使流水线性能高，平衡各流水线级很重要  </p>\n<blockquote>\n<p>因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]</p>\n</blockquote>\n<p>如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  </p>\n<script type=\"math/tex; mode=display\">\\frac{非流水线机器上每条指令的时间}{流水级的数目}</script><p>在这些条件下，流水线加速比=流水级的数目</p>\n<p><br/></p>\n<h1 id=\"2-RISC指令集\"><a href=\"#2-RISC指令集\" class=\"headerlink\" title=\"2 RISC指令集\"></a>2 RISC指令集</h1><p>我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。</p>\n<p>RISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期</p>\n<ul>\n<li><strong><em>指令提取周期(IF(Instruction Fetch))</em></strong>  </li>\n<li><strong><em>指令译码/寄存器提取周期(ID)</em></strong>  </li>\n<li><strong><em>执行/有效地址周期(EX)</em></strong>  </li>\n<li><strong><em>存储器访问(MEM)</em></strong></li>\n<li><strong><em>写回周期(WB)</em></strong></li>\n</ul>\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\n<p><a href=\"http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\" target=\"_blank\" rel=\"noopener\">http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html</a></p>\n<p><br/></p>\n<h1 id=\"3-RISC处理器经典五级流水线\"><a href=\"#3-RISC处理器经典五级流水线\" class=\"headerlink\" title=\"3 RISC处理器经典五级流水线\"></a>3 RISC处理器经典五级流水线</h1><center><img src=\"ca20190908-1.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n\n<p><br/></p>\n<p>在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点</p>\n<h4 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A.\"></a>A.</h4><p>使用分离的指令存储器和数据存储器。</p>\n<p>这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。</p>\n<p>注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供<strong>5倍带宽</strong></p>\n<h4 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B.\"></a>B.</h4><p>两个阶段使用了寄存器堆：<strong>ID</strong>阶段decode, <strong>WB</strong>阶段writeback写入</p>\n<p>因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入</p>\n<p>为了出气对相同寄存器堆多次读取和一次写入，<strong><em>我们在时钟周期的前半部分写寄存器，后半部分读寄存器</em></strong></p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C.\"></a>C.</h4><p>程序计数器在IF阶段要递增</p>\n<p>ID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？</p>\n<p><br/></p>\n<p>除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。</p>\n<center><img src=\"image-20191013133054888.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n<h1 id=\"4-流水化的主要阻碍-流水线冒险\"><a href=\"#4-流水化的主要阻碍-流水线冒险\" class=\"headerlink\" title=\"4 流水化的主要阻碍-流水线冒险\"></a>4 流水化的主要阻碍-流水线冒险</h1><p>冒险降低来了流水化所能带来的理想加速比<br>冒险共有一下三类  </p>\n<ol>\n<li><p>结构冒险  </p>\n<p>在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]</p>\n</li>\n<li><p>数据冒险  </p>\n<p>指令之间存在先后顺序，一条指令取决于先前指令的结果</p>\n</li>\n<li><p>控制冒险 </p>\n<p>分支指令以及其他改变程序计数器的指令会导致控制冒险</p>\n</li>\n</ol>\n<p>为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。</p>\n<div class=\"note note-warning\">\n            <p>这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的<strong><em>所有指令也会被停顿</em></strong>，之前发射的指令不会被停顿</p>\n          </div>\n<p><br/></p>\n<h2 id=\"4-1-带有停顿的流水线性能\"><a href=\"#4-1-带有停顿的流水线性能\" class=\"headerlink\" title=\"4.1 带有停顿的流水线性能\"></a>4.1 带有停顿的流水线性能</h2><p>$<br>流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$<br>$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$<br>$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$</p>\n<p><br/></p>\n<p>流水化处理器的理想CPI几乎总是等于1，算上停顿<br>$<br>流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$<br>$=1+每条指令的流水线停顿时间周期$</p>\n<p>所以</p>\n<script type=\"math/tex; mode=display\">加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}</script><p>如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度</p>\n<script type=\"math/tex; mode=display\">加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}</script><div class=\"note note-warning\">\n            <p><u>所以，如果没有流水线停顿，加速比=流水线深度</u></p>\n          </div>\n<h2 id=\"4-2-结构冒险\"><a href=\"#4-2-结构冒险\" class=\"headerlink\" title=\"4.2 结构冒险\"></a>4.2 结构冒险</h2><p>i. 什么是结构冒险</p>\n<blockquote>\n<p>指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合</p>\n<p>如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险</p>\n</blockquote>\n<p>ii. 解决方式</p>\n<p>在发生结构冒险时，使流水线停顿一个时钟周期</p>\n<p>停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大</p>\n<p><br/></p>\n<h2 id=\"4-3-数据冒险\"><a href=\"#4-3-数据冒险\" class=\"headerlink\" title=\"4.3 数据冒险\"></a>4.3 数据冒险</h2><p>i. 数据冒险是什么</p>\n<blockquote>\n<p>有些指令依赖于之前指令的结果</p>\n</blockquote>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">DADD</span> <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R2</span>, <span class=\"hljs-built_in\">R3</span>\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span>\n<span class=\"hljs-symbol\">XOR</span>  <span class=\"hljs-built_in\">R10</span>,<span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R11</span></code></pre></div>\n<p>DADD后的所有指令都用到了DADD指令的结果R1</p>\n<p>所以在DADD的结果writeback之前，下面的指令都是不能execute的</p>\n<center><img src=\"image-20191013143518878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\n<p>ii. 解决方法</p>\n<p>A. 转发(forwarding)</p>\n<p>转发是一个什么思想呢？ </p>\n<blockquote>\n<p>DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback</p>\n</blockquote>\n<p>转发的工作方式</p>\n<ol>\n<li>来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端</li>\n<li>如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值</li>\n</ol>\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" srcset=\"/img/loading.gif\" style=\"zoom: 30%;\" /></center>\n\n<p>B, 需要停顿的数据冒险</p>\n<p>并非所有的潜在数据冒险都可以通过转发处理</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">LD</span>   <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-number\">0</span>(<span class=\"hljs-built_in\">R2</span>)\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span></code></pre></div>\n<center><img src=\"image-20191013151122898.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n<h3 id=\"More-about-data-dependences-and-hazards\"><a href=\"#More-about-data-dependences-and-hazards\" class=\"headerlink\" title=\"More about data dependences and hazards\"></a>More about data dependences and hazards</h3><h4 id=\"A-data-dependences\"><a href=\"#A-data-dependences\" class=\"headerlink\" title=\"A. data dependences\"></a>A. data dependences</h4><ol>\n<li>数据相关[真数据相关]</li>\n</ol>\n<p>指令i生成的结果可能会被指令j用到</p>\n<p>指令j数据相关于指令k, 指令k数据相关于指令i</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>名称相关</li>\n</ol>\n<p>当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。</p>\n<ul>\n<li><p>Anti-dependence: S1 -&gt; S2 </p>\n<p>(i)  S1 executes before S2<br>(ii) S1 reads from a location that is overwritten later by S2</p>\n</li>\n</ul>\n<div class=\"note note-warning\">\n            <p>WAR</p><ul><li><p>Output dependence: S1 -&gt; S2 </p><p>(i)  S1 executes before S2<br>(ii) S1 and S2 write to the same location </p></li></ul>\n          </div>\n<p>WAW</p>\n<p>由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。</p>\n<h4 id=\"B-data-hazards\"><a href=\"#B-data-hazards\" class=\"headerlink\" title=\"B. data hazards\"></a>B. data hazards</h4><ul>\n<li>RAW</li>\n<li>WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险</li>\n<li>WAR: 对应于antidependence。</li>\n</ul>\n<h2 id=\"4-4-分支冒险\"><a href=\"#4-4-分支冒险\" class=\"headerlink\" title=\"4.4 分支冒险\"></a>4.4 分支冒险</h2><h3 id=\"i-分支冒险是什么\"><a href=\"#i-分支冒险是什么\" class=\"headerlink\" title=\"i. 分支冒险是什么\"></a>i. 分支冒险是什么</h3><p>执行分支指令时，修改后的PC可能等于也可能不等于PC+4。</p>\n<p>如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC</p>\n<p>那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。</p>\n<h3 id=\"ii-解决方法\"><a href=\"#ii-解决方法\" class=\"headerlink\" title=\"ii. 解决方法\"></a>ii. 解决方法</h3><p>一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要</p>\n<p><img src=\"image-20191021095111.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095111\" style=\"zoom:50%;\" /></p>\n<p>所以，如何降低流水线分支代价？</p>\n<p>4种简单的编译时机制</p>\n<h4 id=\"A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"><a href=\"#A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\" class=\"headerlink\" title=\"A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"></a>A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标</h4><h4 id=\"B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"><a href=\"#B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\" class=\"headerlink\" title=\"B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"></a>B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。</h4><p>这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。</p>\n<p>这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变</p>\n<center><img src=\"image-20191014112116582.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n<h4 id=\"C-将所有分支都看作选中分支\"><a href=\"#C-将所有分支都看作选中分支\" class=\"headerlink\" title=\"C. 将所有分支都看作选中分支\"></a>C. 将所有分支都看作选中分支</h4><p>只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。</p>\n<p>但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。</p>\n<h4 id=\"D-延迟分支\"><a href=\"#D-延迟分支\" class=\"headerlink\" title=\"D. 延迟分支\"></a>D. 延迟分支</h4><blockquote>\n<p>分支指令</p>\n<p>依序后续指令[位于delay slots]</p>\n<p>选中时的分支指令</p>\n</blockquote>\n<p>获得编译器支持，编译器让后续指令有效并且可用</p>\n<center><img src=\"image-20191021095901298.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n<p>延迟调度有局限性，这个局限性是因为</p>\n<blockquote>\n<ol>\n<li>可以排在延迟时隙[delay slots]中的指令有限制</li>\n<li>编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了<em>canceling</em> or <em>nullifying</em> branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。</li>\n</ol>\n</blockquote>\n<p>看一下这些不同的解决方法效率有什么差别</p>\n<center><img src=\"image-20191021101747938.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n<p>考虑flush pipeline</p>\n<p>unconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2</p>\n<p>其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3</p>\n<p>这样，考虑predicted untaken</p>\n<p>unconditional 指令被预测不执行，但是一定会执行，代价是2</p>\n<p>conditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3</p>\n<p>考虑predicted taken</p>\n<p>如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转</p>\n<p><br></p>\n<p>当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]</p>\n<h4 id=\"i-静态分支预测\"><a href=\"#i-静态分支预测\" class=\"headerlink\" title=\"i. 静态分支预测\"></a>i. 静态分支预测</h4><p>事先收集数据，根据数据来预测分支</p>\n<h4 id=\"ii-动态分支预测\"><a href=\"#ii-动态分支预测\" class=\"headerlink\" title=\"ii. 动态分支预测\"></a>ii. 动态分支预测</h4><p>使用分支预测缓冲区[Branch-Prediction Buffer].</p>\n<p>这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。</p>\n<p>这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转</p>\n<p>但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。</p>\n<p>所以这里提出了2位预测机制。</p>\n<p>两位预测机制，预测必须连续错过两次才会进行修改。</p>\n<center><img src=\"image-20191021103246990.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n<h1 id=\"5-如何实现流水线\"><a href=\"#5-如何实现流水线\" class=\"headerlink\" title=\"5. 如何实现流水线\"></a>5. 如何实现流水线</h1><p>MIPS CPU多周期实现</p>\n<center><img src=\"image-20191021105802697.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n<h2 id=\"Basic-Pipeline\"><a href=\"#Basic-Pipeline\" class=\"headerlink\" title=\"Basic Pipeline\"></a>Basic Pipeline</h2><center><img src=\"image-20191021110018403.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n<h3 id=\"i-IF\"><a href=\"#i-IF\" class=\"headerlink\" title=\"i. IF\"></a>i. IF</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">IF/ID.IR = Mem[PC];\t<span class=\"hljs-comment\">//取指令</span>\n<span class=\"hljs-keyword\">if</span>((EX/MEM.opcode == branch) &amp;&amp; EX/MEM.cond) &#123;\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  IF/IR.NPC = PC + <span class=\"hljs-number\">4</span>;\n  PC = PC + <span class=\"hljs-number\">4</span>;\n&#125;</code></pre></div>\n<h3 id=\"ii-ID\"><a href=\"#ii-ID\" class=\"headerlink\" title=\"ii. ID\"></a>ii. ID</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">ID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);</code></pre></div>\n<h3 id=\"iii-EX\"><a href=\"#iii-EX\" class=\"headerlink\" title=\"iii. EX\"></a>iii. EX</h3><h4 id=\"A-ALU-EX\"><a href=\"#A-ALU-EX\" class=\"headerlink\" title=\"A. ALU EX\"></a>A. ALU EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR = ID/EX.IR;\n执行以下之一\n<span class=\"hljs-number\">1.</span> EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n<span class=\"hljs-number\">2.</span> EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm</code></pre></div>\n<h4 id=\"B-Load-Store-EX\"><a href=\"#B-Load-Store-EX\" class=\"headerlink\" title=\"B. Load Store EX\"></a>B. Load Store EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;</code></pre></div>\n<h4 id=\"C-Branch-EX\"><a href=\"#C-Branch-EX\" class=\"headerlink\" title=\"C. Branch EX\"></a>C. Branch EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm &lt;&lt; <span class=\"hljs-number\">2</span>);\nEX/MEM.cond = (ID/EX.A == <span class=\"hljs-number\">0</span>);</code></pre></div>\n<h3 id=\"iv-MEM\"><a href=\"#iv-MEM\" class=\"headerlink\" title=\"iv. MEM\"></a>iv. MEM</h3><h4 id=\"A-ALU-MEM\"><a href=\"#A-ALU-MEM\" class=\"headerlink\" title=\"A. ALU MEM\"></a>A. ALU MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;</code></pre></div>\n<h4 id=\"B-Load-Store-MEM\"><a href=\"#B-Load-Store-MEM\" class=\"headerlink\" title=\"B. Load Store MEM\"></a>B. Load Store MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.OR = EX/MEM.IR;\n<span class=\"hljs-number\">1.</span> MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n<span class=\"hljs-number\">2.</span> Mem[EX/MEM.ALUOutput] = EX/MEM.B;</code></pre></div>\n<h3 id=\"v-WB\"><a href=\"#v-WB\" class=\"headerlink\" title=\"v. WB\"></a>v. WB</h3><h4 id=\"A-ALU-WB\"><a href=\"#A-ALU-WB\" class=\"headerlink\" title=\"A. ALU WB\"></a>A. ALU WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1.</span> Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n<span class=\"hljs-number\">2.</span> Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;</code></pre></div>\n<h4 id=\"B-Load-Store-WB\"><a href=\"#B-Load-Store-WB\" class=\"headerlink\" title=\"B. Load Store WB\"></a>B. Load Store WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">For load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;</code></pre></div>\n<h2 id=\"Control-the-Pipeline\"><a href=\"#Control-the-Pipeline\" class=\"headerlink\" title=\"Control the Pipeline\"></a>Control the Pipeline</h2><p>instruction issue:</p>\n<blockquote>\n<p>一条指令从ID移入EX的过程</p>\n</blockquote>\n<p>对于整数流水线，所有数据冒险都可以在ID进行检查。</p>\n<p>如果存在数据冒险，这个指令将会在issue之前停顿。</p>\n<p>同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。</p>\n<center><img src=\"image-20191021115323894.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\n<p>pipeline overhead</p>\n<p>due to stage imbalance, pipeline register setup</p>\n<h3 id=\"Deal-with-forwarding\"><a href=\"#Deal-with-forwarding\" class=\"headerlink\" title=\"Deal with forwarding\"></a>Deal with forwarding</h3><center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n<h1 id=\"6-扩展MIPS流水线，以处理多周期操作\"><a href=\"#6-扩展MIPS流水线，以处理多周期操作\" class=\"headerlink\" title=\"6. 扩展MIPS流水线，以处理多周期操作\"></a>6. 扩展MIPS流水线，以处理多周期操作</h1><p>扩展mips流水线，以处理浮点运算</p>\n<p>浮点运算的问题</p>\n<blockquote>\n<p>要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能</p>\n<p>如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。</p>\n<p>所以</p>\n<ul>\n<li>为了完成操作，EX周期可能要根据需要重复多次</li>\n<li>可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。</li>\n</ul>\n</blockquote>\n<p>4个独立的功能单元</p>\n<ul>\n<li>主整数单元，处理load, store, 整数ALU operation, branch</li>\n<li>浮点与整数乘法器</li>\n<li>浮点加法器，处理浮点加、减和转换</li>\n<li>浮点和整型除法器</li>\n</ul>\n<p>假定这些功能单元的执行级没有实现流水化</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n<p>两个指标</p>\n<ul>\n<li><p>latency</p>\n<p>the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。</p>\n<blockquote>\n<p>Essentially, pipeline <strong>latency</strong> is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the <strong>EX stage</strong> to the stage that produces the result </p>\n</blockquote>\n</li>\n<li><p>initiation/repeat interval</p>\n<p>同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行</p>\n</li>\n</ul>\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<p><img src=\"IMG_C3E4F59B24C4.png\" srcset=\"/img/loading.gif\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></p>\n<p>instruction issue: 从ID到EX的阶段</p>\n<p><center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center></p>\n<p><center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center></p>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h1><a name=\"pipline\">附录C流水线</a></h1>\n\n<h2 id=\"1-什么是流水线\"><a href=\"#1-什么是流水线\" class=\"headerlink\" title=\"1 什么是流水线\"></a>1 什么是流水线</h2><p>流水线是一种将多条指令 <strong><em>重叠执行</em></strong> 的实现技术  </p>\n<p>一条执行包含多种操作，流水线充分利用了这些 <strong><em>操作之间的并行性</em></strong><br><br/></p>\n<p>为了能更形象地理解这个问题，不妨用汽车装配线来做类比    </p>\n<blockquote>\n<p>汽车装配线的每一环节负责一项任务，所有环节是并行的（也就是不同的汽车同时在不同的环节上）  </p>\n<p>在流水线中，指令就像是一辆待装配的汽车，不同环节完成指令的一部分,这些环节的每一步称为 <strong><em>流水级或者流水段</em></strong>。流水级前后相连形成流水线  </p>\n<p>汽车装配线的 <strong><em>吞吐量</em></strong> 定义为单位时间生产的汽车数量，由完整汽车退出装配线的频率决定</p>\n<p>流水线的吞吐量由指令退出流水线的频率决定。一条指令在流水线中下移一步需要的时间为 <strong><em>处理器周期</em></strong> 。因为各个环节同时执行，所以处理器周期由最缓慢的流水线级确定。</p>\n</blockquote>\n<p>可以想见，要使流水线性能高，平衡各流水线级很重要  </p>\n<blockquote>\n<p>因为处理器周期由最缓慢的流水线级确定，我们想要使最缓慢环节的加快，就要平衡各流水线级。  [木桶原理]</p>\n</blockquote>\n<p>如果各级达到完美平衡，那么每条指令在流水线处理器中的时间为  </p>\n<script type=\"math/tex; mode=display\">\\frac{非流水线机器上每条指令的时间}{流水级的数目}</script><p>在这些条件下，流水线加速比=流水级的数目</p>\n<p><br/></p>\n<h1 id=\"2-RISC指令集\"><a href=\"#2-RISC指令集\" class=\"headerlink\" title=\"2 RISC指令集\"></a>2 RISC指令集</h1><p>我们以RISC指令集为例来了解一下流水线实现。一下，我们会介绍RISC指令集以及没有流水线的实现方式。</p>\n<p>RISC指令集子集中每条指令都可以在5个时钟周期以内实现。以MIPS指令集为例介绍这5个时钟周期</p>\n<ul>\n<li><strong><em>指令提取周期(IF(Instruction Fetch))</em></strong>  </li>\n<li><strong><em>指令译码/寄存器提取周期(ID)</em></strong>  </li>\n<li><strong><em>执行/有效地址周期(EX)</em></strong>  </li>\n<li><strong><em>存储器访问(MEM)</em></strong></li>\n<li><strong><em>写回周期(WB)</em></strong></li>\n</ul>\n<center><img=\"/Users/jones/Library/Application Support/typora-user-images/image-20191219230108716.png\" alt=\"image-20191219230108716\" style=\"zoom:50%;\" /></center>\n\n<p><a href=\"http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html\" target=\"_blank\" rel=\"noopener\">http://web.cs.iastate.edu/~prabhu/Tutorial/PIPELINE/DLXimplem.html</a></p>\n<p><br/></p>\n<h1 id=\"3-RISC处理器经典五级流水线\"><a href=\"#3-RISC处理器经典五级流水线\" class=\"headerlink\" title=\"3 RISC处理器经典五级流水线\"></a>3 RISC处理器经典五级流水线</h1><center><img src=\"ca20190908-1.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n<center><img src=\"ca20190908-2.png\" srcset=\"/img/loading.gif\" width=\"600\"></center>\n\n<p><br/></p>\n<p>在RISC流水线中，多条指令的执行重叠不会引入多少冲突，因为以下三点</p>\n<h4 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A.\"></a>A.</h4><p>使用分离的指令存储器和数据存储器。</p>\n<p>这样做是因为指令提取和数据访问都需要访问存储器，会引发冲突，所以分离指令和数据存储器。</p>\n<p>注意：如果流水线处理器时钟周期=多周期处理器时钟周期，存储器需要提供<strong>5倍带宽</strong></p>\n<h4 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B.\"></a>B.</h4><p>两个阶段使用了寄存器堆：<strong>ID</strong>阶段decode, <strong>WB</strong>阶段writeback写入</p>\n<p>因此，每个时钟周期寄存器需要两次读取(A=Reg[rs], B=Reg[rt]) 和一次写入</p>\n<p>为了出气对相同寄存器堆多次读取和一次写入，<strong><em>我们在时钟周期的前半部分写寄存器，后半部分读寄存器</em></strong></p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C.\"></a>C.</h4><p>程序计数器在IF阶段要递增</p>\n<p>ID阶段要计算潜在的分支目标。若分支在ID改变程序计数器？</p>\n<p><br/></p>\n<p>除了要确保流水线中的指令不会在相同时间使用相同的硬件资源，还要确保不同流水级的指令不会互相干扰。这是通过在流水级之间引入 <u>流水线寄存器</u>来实现的。将一个给定的流水级得出的结果存储到流水线寄存器，并在下一个时钟周期作为下一个流水级的输入。</p>\n<center><img src=\"image-20191013133054888.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013133054888\" style=\"zoom: 30%;\" /></center>\n\n<h1 id=\"4-流水化的主要阻碍-流水线冒险\"><a href=\"#4-流水化的主要阻碍-流水线冒险\" class=\"headerlink\" title=\"4 流水化的主要阻碍-流水线冒险\"></a>4 流水化的主要阻碍-流水线冒险</h1><p>冒险降低来了流水化所能带来的理想加速比<br>冒险共有一下三类  </p>\n<ol>\n<li><p>结构冒险  </p>\n<p>在重叠执行模式下，硬件无法同时支持指令的所有可能组合，就会出现资源冲突 [比如大家都想访问存储器]</p>\n</li>\n<li><p>数据冒险  </p>\n<p>指令之间存在先后顺序，一条指令取决于先前指令的结果</p>\n</li>\n<li><p>控制冒险 </p>\n<p>分支指令以及其他改变程序计数器的指令会导致控制冒险</p>\n</li>\n</ol>\n<p>为了避免冒险，要求流水线中的一些指令延迟时，其他指令能够继续执行 。</p>\n<div class=\"note note-warning\">\n            <p>这里讨论的流水线，当一条指令被stall时，在指令停顿之后发射的<strong><em>所有指令也会被停顿</em></strong>，之前发射的指令不会被停顿</p>\n          </div>\n<p><br/></p>\n<h2 id=\"4-1-带有停顿的流水线性能\"><a href=\"#4-1-带有停顿的流水线性能\" class=\"headerlink\" title=\"4.1 带有停顿的流水线性能\"></a>4.1 带有停顿的流水线性能</h2><p>$<br>流水化加速比=\\frac{非流水化指令平均执行时间}{流水化指令平均执行时间}$<br>$=\\frac{非流水化CPI\\times 非流水化时钟周期}{流水化CPI\\times 流水化时钟周期}$<br>$=\\frac{非流水化CPI}{流水化CPI}\\times \\frac{非流水化时钟周期}{流水化时钟周期}$</p>\n<p><br/></p>\n<p>流水化处理器的理想CPI几乎总是等于1，算上停顿<br>$<br>流水化CPI=理想CPI+每条指令的流水线停顿时钟周期$<br>$=1+每条指令的流水线停顿时间周期$</p>\n<p>所以</p>\n<script type=\"math/tex; mode=display\">加速比=\\frac{非流水化CPI}{1+每条指令的流水线停顿周期}</script><p>如果所有指令周期数相同，等于流水级数目(流水线深度)，那么非流水化CPI=流水线深度</p>\n<script type=\"math/tex; mode=display\">加速比=\\frac{流水深度}{1+每条指令的流水线停顿周期}</script><div class=\"note note-warning\">\n            <p><u>所以，如果没有流水线停顿，加速比=流水线深度</u></p>\n          </div>\n<h2 id=\"4-2-结构冒险\"><a href=\"#4-2-结构冒险\" class=\"headerlink\" title=\"4.2 结构冒险\"></a>4.2 结构冒险</h2><p>i. 什么是结构冒险</p>\n<blockquote>\n<p>指令重叠执行需要实现功能单元的流水化和资源的复制，以允许在流水线中出现所有可能的指令组合</p>\n<p>如果由于资源冲突而不能容许某些指令组合，就说出现结构冒险</p>\n</blockquote>\n<p>ii. 解决方式</p>\n<p>在发生结构冒险时，使流水线停顿一个时钟周期</p>\n<p>停顿称为 <u>流水线气泡</u>，他们漂浮穿过流水线，占有空间但是不执行有效工作。导致CPI增大</p>\n<p><br/></p>\n<h2 id=\"4-3-数据冒险\"><a href=\"#4-3-数据冒险\" class=\"headerlink\" title=\"4.3 数据冒险\"></a>4.3 数据冒险</h2><p>i. 数据冒险是什么</p>\n<blockquote>\n<p>有些指令依赖于之前指令的结果</p>\n</blockquote>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">DADD</span> <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R2</span>, <span class=\"hljs-built_in\">R3</span>\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span>\n<span class=\"hljs-symbol\">XOR</span>  <span class=\"hljs-built_in\">R10</span>,<span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R11</span></code></pre></div>\n<p>DADD后的所有指令都用到了DADD指令的结果R1</p>\n<p>所以在DADD的结果writeback之前，下面的指令都是不能execute的</p>\n<center><img src=\"image-20191013143518878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013143518878\" style=\"zoom:30%;\" /></center>\n\n<p>ii. 解决方法</p>\n<p>A. 转发(forwarding)</p>\n<p>转发是一个什么思想呢？ </p>\n<blockquote>\n<p>DSUB需要DADD的结果x, 那么不妨DADD在算出x之后，就把结果给到DSUB需要这个x的位置，而不用等到writeback</p>\n</blockquote>\n<p>转发的工作方式</p>\n<ol>\n<li>来自EX/MEM和MEM/WB流水线寄存器的输入总是被反馈回ALU的输入端</li>\n<li>如果转发硬件检测到前一个ALU操作已经对当前ALU操作的原寄存器进行了写入操作，则控制逻辑选择转发结果作为ALU输入，而不是选择从寄存器堆中读区的值</li>\n</ol>\n<center><img src=\"https://miaochenlu.github.io/picture/屏幕快照 2019-10-13 下午2.56.04.png\" srcset=\"/img/loading.gif\" style=\"zoom: 30%;\" /></center>\n\n<p>B, 需要停顿的数据冒险</p>\n<p>并非所有的潜在数据冒险都可以通过转发处理</p>\n<div class=\"hljs\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">LD</span>   <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-number\">0</span>(<span class=\"hljs-built_in\">R2</span>)\n<span class=\"hljs-symbol\">DSUB</span> <span class=\"hljs-built_in\">R4</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R5</span>\n<span class=\"hljs-keyword\">AND </span> <span class=\"hljs-built_in\">R6</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R7</span>\n<span class=\"hljs-symbol\">OR</span>   <span class=\"hljs-built_in\">R8</span>, <span class=\"hljs-built_in\">R1</span>, <span class=\"hljs-built_in\">R9</span></code></pre></div>\n<center><img src=\"image-20191013151122898.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151122898\" style=\"zoom:30%;\" /></center>\n<center><img src=\"image-20191013151314878.png\" srcset=\"/img/loading.gif\" alt=\"image-20191013151314878\" style=\"zoom:25%;\" /></center>\n\n<h3 id=\"More-about-data-dependences-and-hazards\"><a href=\"#More-about-data-dependences-and-hazards\" class=\"headerlink\" title=\"More about data dependences and hazards\"></a>More about data dependences and hazards</h3><h4 id=\"A-data-dependences\"><a href=\"#A-data-dependences\" class=\"headerlink\" title=\"A. data dependences\"></a>A. data dependences</h4><ol>\n<li>数据相关[真数据相关]</li>\n</ol>\n<p>指令i生成的结果可能会被指令j用到</p>\n<p>指令j数据相关于指令k, 指令k数据相关于指令i</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191223102354535.png\" alt=\"image-20191223102354535\" style=\"zoom:50%;\" /></center>\n\n<ol>\n<li>名称相关</li>\n</ol>\n<p>当两条指令使用相同的寄存器或者存储器位置[称为名称]， 但与该名称相关的指令之间并没有数据流动时，就会发生名称相关。</p>\n<ul>\n<li><p>Anti-dependence: S1 -&gt; S2 </p>\n<p>(i)  S1 executes before S2<br>(ii) S1 reads from a location that is overwritten later by S2</p>\n</li>\n</ul>\n<div class=\"note note-warning\">\n            <p>WAR</p><ul><li><p>Output dependence: S1 -&gt; S2 </p><p>(i)  S1 executes before S2<br>(ii) S1 and S2 write to the same location </p></li></ul>\n          </div>\n<p>WAW</p>\n<p>由于没有在指令之间传递值, 所以antidependence和output dependence只是名称相关，不是真数据相关。改变这些指令中使用的名称[寄存器号或者存储器位置],  就可以使这些指令不再冲突。</p>\n<h4 id=\"B-data-hazards\"><a href=\"#B-data-hazards\" class=\"headerlink\" title=\"B. data hazards\"></a>B. data hazards</h4><ul>\n<li>RAW</li>\n<li>WAW: 对应于output dependence。 只有在前一指令stall时允许后一指令继续执行的流水线中，才会存在WAW冒险</li>\n<li>WAR: 对应于antidependence。</li>\n</ul>\n<h2 id=\"4-4-分支冒险\"><a href=\"#4-4-分支冒险\" class=\"headerlink\" title=\"4.4 分支冒险\"></a>4.4 分支冒险</h2><h3 id=\"i-分支冒险是什么\"><a href=\"#i-分支冒险是什么\" class=\"headerlink\" title=\"i. 分支冒险是什么\"></a>i. 分支冒险是什么</h3><p>执行分支指令时，修改后的PC可能等于也可能不等于PC+4。</p>\n<p>如果分支讲PC改到其目标地址，就是选中了分支；否则就是没有选中分支。一般等到ID末尾，完成地址计算和对比之后才会改变PC</p>\n<p>那么还不知到分支指令跳到哪里，pipeline按顺序执行的指令可能不会被执行到。</p>\n<h3 id=\"ii-解决方法\"><a href=\"#ii-解决方法\" class=\"headerlink\" title=\"ii. 解决方法\"></a>ii. 解决方法</h3><p>一旦在ID期间检测到分支，就对该分支之后的指令重新取值。但是这样处理的问题是，如果分支没有被选中，所以事实上已经正确提取了指令，所以IF的重复没有必要</p>\n<p><img src=\"image-20191021095111.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095111\" style=\"zoom:50%;\" /></p>\n<p>所以，如何降低流水线分支代价？</p>\n<p>4种简单的编译时机制</p>\n<h4 id=\"A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"><a href=\"#A-冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\" class=\"headerlink\" title=\"A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标\"></a>A. 冻结或者冲刷流水线，保留或删除分支之后的所有指令，直到知道分支目标</h4><h4 id=\"B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"><a href=\"#B-将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\" class=\"headerlink\" title=\"B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。\"></a>B. 将每个分支看作未选中分支，允许硬件继续执行，就好像分支未被执行一样。</h4><p>这种预测未选中机制的实现方式是继续提取指令，就好像分支指令时一条正常指令一样。但是，如果分支被选中，就要将已经提取的指令转化为空操作，重新开始在目标地址提取指令。</p>\n<p>这一机制的复杂性在于要知道处理器可能何时被指令改变，以及如何撤销这种改变</p>\n<center><img src=\"image-20191014112116582.png\" srcset=\"/img/loading.gif\" alt=\"image-20191014112116582\" style=\"zoom:35%;\" /></center>\n\n<h4 id=\"C-将所有分支都看作选中分支\"><a href=\"#C-将所有分支都看作选中分支\" class=\"headerlink\" title=\"C. 将所有分支都看作选中分支\"></a>C. 将所有分支都看作选中分支</h4><p>只要对分支指令进行了译码并且计算了目标地址，就假定该分支被选中，开始在目标位置提取和执行。</p>\n<p>但是在我们的五级流水线中，不可能在知道分支输出结果之前知道目标地址，所以这对我们没什么用。</p>\n<h4 id=\"D-延迟分支\"><a href=\"#D-延迟分支\" class=\"headerlink\" title=\"D. 延迟分支\"></a>D. 延迟分支</h4><blockquote>\n<p>分支指令</p>\n<p>依序后续指令[位于delay slots]</p>\n<p>选中时的分支指令</p>\n</blockquote>\n<p>获得编译器支持，编译器让后续指令有效并且可用</p>\n<center><img src=\"image-20191021095901298.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021095901298\" style=\"zoom: 40%;\" ></center>\n\n<p>延迟调度有局限性，这个局限性是因为</p>\n<blockquote>\n<ol>\n<li>可以排在延迟时隙[delay slots]中的指令有限制</li>\n<li>编译时预测一个分支是否可能被选中的能力有限。为了提高编译器填充delay slots的能力，大多数具有条件分支的处理器引入了<em>canceling</em> or <em>nullifying</em> branch . 在取消分支中，指令包含了预测分支的方向。当分支行为和预期一致时，分支延迟时隙中的指令就想普通的延迟分支一样执行。预测错误时，分支延迟时隙中的指令转为空操作。</li>\n</ol>\n</blockquote>\n<p>看一下这些不同的解决方法效率有什么差别</p>\n<center><img src=\"image-20191021101747938.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021101747938\" style=\"zoom:50%;\" ></center>\n\n<p>考虑flush pipeline</p>\n<p>unconditional branch指的是像j, jal这种的，这些直到Decode才会知道分支目标，所以penalty=2</p>\n<p>其他conditional，像beq等，需要EXE才知道是否要跳转，所以penalty=3</p>\n<p>这样，考虑predicted untaken</p>\n<p>unconditional 指令被预测不执行，但是一定会执行，代价是2</p>\n<p>conditional的如果没有执行，和预测一致，代价为0。如果和预测不一致，代价为3</p>\n<p>考虑predicted taken</p>\n<p>如果和预测一致。那么在Branch指令的EXE阶段才能知道分支目标，所以要stall 2个时钟周期才能跳转</p>\n<p><br></p>\n<p>当流水线越来越深，分支的潜在代价增加，使用延迟分支是不够的。要更积极地去预测分支。静态机制[依赖编译时信息，成本低]，动态预测[依据程序特性]</p>\n<h4 id=\"i-静态分支预测\"><a href=\"#i-静态分支预测\" class=\"headerlink\" title=\"i. 静态分支预测\"></a>i. 静态分支预测</h4><p>事先收集数据，根据数据来预测分支</p>\n<h4 id=\"ii-动态分支预测\"><a href=\"#ii-动态分支预测\" class=\"headerlink\" title=\"ii. 动态分支预测\"></a>ii. 动态分支预测</h4><p>使用分支预测缓冲区[Branch-Prediction Buffer].</p>\n<p>这是一个cache，分支指令地址的低位部分用来索引，所有访问都会hit。</p>\n<p>这个存储器包含一个bit来标示这个分支最近是否被选中。这个bit可以用来为接下来的这条分支提供指导。如果预测结果和bit不一致，反转bit; 一致则不反转</p>\n<p>但是只有1bit来标示会存在一点问题，比如分支一直被选中，但是某一次没有被选中，bit也会反转，这种反转其实没有必要，会影响效率。</p>\n<p>所以这里提出了2位预测机制。</p>\n<p>两位预测机制，预测必须连续错过两次才会进行修改。</p>\n<center><img src=\"image-20191021103246990.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021103246990\" style=\"zoom:50%;\" ></center>\n\n<h1 id=\"5-如何实现流水线\"><a href=\"#5-如何实现流水线\" class=\"headerlink\" title=\"5. 如何实现流水线\"></a>5. 如何实现流水线</h1><p>MIPS CPU多周期实现</p>\n<center><img src=\"image-20191021105802697.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021105802697\" style=\"zoom:45%;\" ></center>\n\n<h2 id=\"Basic-Pipeline\"><a href=\"#Basic-Pipeline\" class=\"headerlink\" title=\"Basic Pipeline\"></a>Basic Pipeline</h2><center><img src=\"image-20191021110018403.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021110018403\" style=\"zoom:45%;\" ></center>\n\n<h3 id=\"i-IF\"><a href=\"#i-IF\" class=\"headerlink\" title=\"i. IF\"></a>i. IF</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">IF/ID.IR = Mem[PC];\t<span class=\"hljs-comment\">//取指令</span>\n<span class=\"hljs-keyword\">if</span>((EX/MEM.opcode == branch) &amp;&amp; EX/MEM.cond) &#123;\n  IF/IR.NPC = EX/MEM.ALUOutput;\n  PC = EX/MEM.ALUOutput;\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  IF/IR.NPC = PC + <span class=\"hljs-number\">4</span>;\n  PC = PC + <span class=\"hljs-number\">4</span>;\n&#125;</code></pre></div>\n<h3 id=\"ii-ID\"><a href=\"#ii-ID\" class=\"headerlink\" title=\"ii. ID\"></a>ii. ID</h3><div class=\"hljs\"><pre><code class=\"hljs cpp\">ID/EX.A = Regs[IF/ID.IR[rs]];\nID/EX.B = Regs[IF/ID.IR[rt]];\nID/EX.NPC = IF/ID.NPC;\nID/EX.IR = IF/ID.IR;\nID/EX.Imm = sign-extend(IF/ID.IR[immediate]);</code></pre></div>\n<h3 id=\"iii-EX\"><a href=\"#iii-EX\" class=\"headerlink\" title=\"iii. EX\"></a>iii. EX</h3><h4 id=\"A-ALU-EX\"><a href=\"#A-ALU-EX\" class=\"headerlink\" title=\"A. ALU EX\"></a>A. ALU EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR = ID/EX.IR;\n执行以下之一\n<span class=\"hljs-number\">1.</span> EX/MEM.ALUOutput = ID/EX.A func ID/EX.B;\n<span class=\"hljs-number\">2.</span> EX/MEM.ALUOutput = ID/EX.A op ID/EX.Imm</code></pre></div>\n<h4 id=\"B-Load-Store-EX\"><a href=\"#B-Load-Store-EX\" class=\"headerlink\" title=\"B. Load Store EX\"></a>B. Load Store EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.IR to ID/EX.IR;\nEX/MEM.ALUOutput = ID/EX.A + ID/EX.imm;\nEX/MEM.B = ID/EX.B;</code></pre></div>\n<h4 id=\"C-Branch-EX\"><a href=\"#C-Branch-EX\" class=\"headerlink\" title=\"C. Branch EX\"></a>C. Branch EX</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">EX/MEM.ALUOutput = ID/EX.NPC + (ID/EX.Imm &lt;&lt; <span class=\"hljs-number\">2</span>);\nEX/MEM.cond = (ID/EX.A == <span class=\"hljs-number\">0</span>);</code></pre></div>\n<h3 id=\"iv-MEM\"><a href=\"#iv-MEM\" class=\"headerlink\" title=\"iv. MEM\"></a>iv. MEM</h3><h4 id=\"A-ALU-MEM\"><a href=\"#A-ALU-MEM\" class=\"headerlink\" title=\"A. ALU MEM\"></a>A. ALU MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.IR = EX/MEM.IR;\nMEM/WB.ALUOutput = EX/MEM.ALUOutput;</code></pre></div>\n<h4 id=\"B-Load-Store-MEM\"><a href=\"#B-Load-Store-MEM\" class=\"headerlink\" title=\"B. Load Store MEM\"></a>B. Load Store MEM</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">MEM/WB.OR = EX/MEM.IR;\n<span class=\"hljs-number\">1.</span> MEM/WB.LMD = Mem[EX/MEM.ALUOutput];\n<span class=\"hljs-number\">2.</span> Mem[EX/MEM.ALUOutput] = EX/MEM.B;</code></pre></div>\n<h3 id=\"v-WB\"><a href=\"#v-WB\" class=\"headerlink\" title=\"v. WB\"></a>v. WB</h3><h4 id=\"A-ALU-WB\"><a href=\"#A-ALU-WB\" class=\"headerlink\" title=\"A. ALU WB\"></a>A. ALU WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-number\">1.</span> Regs[MEM/WB.IR[rd]] = MEM/WB.ALUOutput;\n<span class=\"hljs-number\">2.</span> Resg[MEM/WB.IR[rt]] = MEM/WB.ALUOutput;</code></pre></div>\n<h4 id=\"B-Load-Store-WB\"><a href=\"#B-Load-Store-WB\" class=\"headerlink\" title=\"B. Load Store WB\"></a>B. Load Store WB</h4><div class=\"hljs\"><pre><code class=\"hljs cpp\">For load only\nRegs[MEM/WB.IR[rt]] = MEM/WB.LMD;</code></pre></div>\n<h2 id=\"Control-the-Pipeline\"><a href=\"#Control-the-Pipeline\" class=\"headerlink\" title=\"Control the Pipeline\"></a>Control the Pipeline</h2><p>instruction issue:</p>\n<blockquote>\n<p>一条指令从ID移入EX的过程</p>\n</blockquote>\n<p>对于整数流水线，所有数据冒险都可以在ID进行检查。</p>\n<p>如果存在数据冒险，这个指令将会在issue之前停顿。</p>\n<p>同样，我们可以确定在ID期间需要哪种转发，并设定适当的控制。</p>\n<center><img src=\"image-20191021115323894.png\" srcset=\"/img/loading.gif\" alt=\"image-20191021115323894\" style=\"zoom:35%;\" /></center>\n\n\n\n<p>pipeline overhead</p>\n<p>due to stage imbalance, pipeline register setup</p>\n<h3 id=\"Deal-with-forwarding\"><a href=\"#Deal-with-forwarding\" class=\"headerlink\" title=\"Deal with forwarding\"></a>Deal with forwarding</h3><center><img=\"https://miaochenlu.github.io/picture/image-20191222210658336.png\" alt=\"image-20191222210658336\" style=\"zoom:50%;\" /></center>\n\n\n\n\n<h1 id=\"6-扩展MIPS流水线，以处理多周期操作\"><a href=\"#6-扩展MIPS流水线，以处理多周期操作\" class=\"headerlink\" title=\"6. 扩展MIPS流水线，以处理多周期操作\"></a>6. 扩展MIPS流水线，以处理多周期操作</h1><p>扩展mips流水线，以处理浮点运算</p>\n<p>浮点运算的问题</p>\n<blockquote>\n<p>要求所有浮点运算在1个周期内完成时不现实的，甚至2个时钟周期都不太可能</p>\n<p>如果想要在一个时钟周期内完成，就必须降低clock rate, 或者增加大量的逻辑单元。</p>\n<p>所以</p>\n<ul>\n<li>为了完成操作，EX周期可能要根据需要重复多次</li>\n<li>可能存在多个浮点功能单元，如果待发射指令会导致浮点所用功能单元的结构冒险，或者数据冒险，就会出现停顿。</li>\n</ul>\n</blockquote>\n<p>4个独立的功能单元</p>\n<ul>\n<li>主整数单元，处理load, store, 整数ALU operation, branch</li>\n<li>浮点与整数乘法器</li>\n<li>浮点加法器，处理浮点加、减和转换</li>\n<li>浮点和整型除法器</li>\n</ul>\n<p>假定这些功能单元的执行级没有实现流水化</p>\n<center><img=\"https://miaochenlu.github.io/picture/image-20191111101801471.png\" alt=\"image-20191111101801471\" style=\"zoom:50%;\" /></center>\n\n<p>两个指标</p>\n<ul>\n<li><p>latency</p>\n<p>the number of intervening cycles between an instruction that produces a result and an instruction that uses the result. 一条指令产生结果后，下一条指令等待多久才可以使用这个结果。注意，是等待。</p>\n<blockquote>\n<p>Essentially, pipeline <strong>latency</strong> is 1 cycle less than the depth of the execution pipeline, which is the number of stages from the <strong>EX stage</strong> to the stage that produces the result </p>\n</blockquote>\n</li>\n<li><p>initiation/repeat interval</p>\n<p>同一类型的指令执行之间必须间隔的周期数。比如，integer ALU的一条指令开始执行，下一条integer ALU指令需要在他后面一个周期才能开始执行</p>\n</li>\n</ul>\n<center><img=\"https://miaochenlu.github.io/picture/IMG_C3E4F59B24C4-1.png\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></center>\n\n<p><img src=\"IMG_C3E4F59B24C4.png\" srcset=\"/img/loading.gif\" alt=\"IMG_C3E4F59B24C4-1\" style=\"zoom:50%;\" /></p>\n<p>instruction issue: 从ID到EX的阶段</p>\n<p><center><img=\"image-20191111103138887.png\" alt=\"image-20191111103138887\" style=\"zoom:50%;\" /></center></p>\n<p><center><img=\"image-20191111104720076.png\" alt=\"image-20191111104720076\" style=\"zoom:50%;\" /></center></p>\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103409484.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103409484\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111103455864.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103455864\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <td>\n      <img src=\"image-20191111103637824.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111103637824\" style=\"zoom:50%;\" />\n    </td>\n    <td>\n      <img src=\"image-20191111104058863.png\" srcset=\"/img/loading.gif\" alt=\"image-20191111104058863\" style=\"zoom:50%;\" />\n    </td>\n  </tr>\n</table>\n\n\n\n"},{"title":"Factory Method 工厂模式","date":"2020-08-14T05:51:37.000Z","index_img":"/img/image-20200814150354579.png","key":"DP-factory","_content":"\n\n\n## Factory Method属于对象创建模式\n\n通过对象创建模式绕开`new`, 来避免对象创建 (`new`) 过程中所导致的紧耦合(依赖具体类 )，从而支持对象创建的稳定。他是接口抽象之后的第一步工作。\n\n典型模式有\n\n* Factory Method\n* Abstract Factory\n* Prototype\n* Builder\n\n\n\n## 动机\n\n在软件系统中，经常面临着创建对象的工作；由于需求的变化， 需要创建的对象的具体类型经常变化。\n\n如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种\"封装机制\"来避免客户程序和这种\"具体对象创建工作\"的紧耦合？\n\n\n\n## 模式定义\n\n定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦， 手段：虚函数）到子类。\n\n\n\n## 代码示例\n\n初始代码，一个文件分割器。\n\n这个代码会有什么问题呢？要从变化的场景去看。\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tFileSplitter* splitter = new FileSplitter();\n        splitter->split;\n    }\n}\n```\n\n```cpp\nclass FileSpitter {\npublic:\n    void split() {\n        //...\n    }\n}\n```\n\n\n\n最开始我们讲过一个原则：面向接口的编程。一个对象的类型应该声明成抽象类或者接口，而不应该声明成具体的类。如果声明成具体的类，就把他定死了，无法应对未来的变化。\n\n\n\n假设我们产生了新的需求：\n\n需要支持二进制文件，txt文件，图片文件，视频文件的分割\n\n```cpp\nclass ISplitter { //接口\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\nclass BinarySpliter: public ISplitter {\n};\n\nclass TxtSplitter: public ISplitter {\n};\n\nclass PictureSplitter: public ISplitter {\n};\n\nclass VideoSplitter: public ISplitter {  \n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n/*******************问题产生了******************/\n\t\tISplitter* splitter = new BinarySplitter(); //??????怎么又依赖细节了？？？\n        splitter->split;\n    }\n}\n```\n\n{% note warning %}\n\n`new`不能new抽象类，`new`只能new具体类。但是我们需要的是多态`new`。怎么解决呢？\n\n{% endnote %}\n\n* 开始重构\n\n```cpp\nclass SplitterFactory {\npublic:\n    ISplitter* CreateSplitter() {\n        //return new ISplitter(...);//这样也是不对的，因为不能new抽象类\n        return new BinarySplitter();\n    }\n}\nclass ISplitter { //接口\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tSplitterFactory factory;\n\t\tISplitter* splitter = factory.CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n但是这种实现根本没有解决问题，`ISplitter* splitter = factory.CreateSplitter();`依然依赖于具体的类BinarySplitter\n\n* 继续重构\n\n```cpp\n//抽象类\nclass ISplitter {\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\n//工厂基类\nclass SplitterFactory {\npublic:\n\tvirtual void ISplitter* CreateSplitter() = 0;\n    virtual ~SplitterFactory(){}\n    }\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tSplitterFactory* factory;\n//多态了\n\t\tISplitter* splitter = factory->CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n\n\n* 继续完善\n\n```cpp\n//具体类\nclass BinarySpliter: public ISplitter {\n};\n\nclass TxtSplitter: public ISplitter {\n};\n\nclass PictureSplitter: public ISplitter {\n};\n\nclass VideoSplitter: public ISplitter {  \n};\n\n//具体工厂\nBinarySplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new BinarySplitter();\n    }\n};\n\nTxtSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new TxtSplitter();\n    }\n};\n\nPictureSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new PictureSplitter();\n    }\n};\n\nVideoSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new VideoSplitter();\n    }\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    SplitterFactory* factory;\npublic:\n    MainForm(SplitterFactory* factory) {\n        this->factory = factory;\n    }\n    \n    void Button1_Click() {\n//多态new\n\t\tISplitter* splitter = factory->CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200814150354579.png\" alt=\"image-20200814150354579\" style=\"zoom:50%;\" />\n\n## 总结\n\n* Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。\n\n* Factory Method模式通过面向对象的手法，将所要创建的具体对 象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。\n\n* Factory Method模式解决\"单个对象\"的需求变化。缺点在于要求创建方法/参数相同。\n\n","source":"_posts/FactoryMethod.md","raw":"---\ntitle: Factory Method 工厂模式\ndate: 2020-08-14 13:51:37\nindex_img: /img/image-20200814150354579.png\ntags: Design Patterns\ncategories: Design Patterns\nkey: DP-factory\n---\n\n\n\n## Factory Method属于对象创建模式\n\n通过对象创建模式绕开`new`, 来避免对象创建 (`new`) 过程中所导致的紧耦合(依赖具体类 )，从而支持对象创建的稳定。他是接口抽象之后的第一步工作。\n\n典型模式有\n\n* Factory Method\n* Abstract Factory\n* Prototype\n* Builder\n\n\n\n## 动机\n\n在软件系统中，经常面临着创建对象的工作；由于需求的变化， 需要创建的对象的具体类型经常变化。\n\n如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种\"封装机制\"来避免客户程序和这种\"具体对象创建工作\"的紧耦合？\n\n\n\n## 模式定义\n\n定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦， 手段：虚函数）到子类。\n\n\n\n## 代码示例\n\n初始代码，一个文件分割器。\n\n这个代码会有什么问题呢？要从变化的场景去看。\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tFileSplitter* splitter = new FileSplitter();\n        splitter->split;\n    }\n}\n```\n\n```cpp\nclass FileSpitter {\npublic:\n    void split() {\n        //...\n    }\n}\n```\n\n\n\n最开始我们讲过一个原则：面向接口的编程。一个对象的类型应该声明成抽象类或者接口，而不应该声明成具体的类。如果声明成具体的类，就把他定死了，无法应对未来的变化。\n\n\n\n假设我们产生了新的需求：\n\n需要支持二进制文件，txt文件，图片文件，视频文件的分割\n\n```cpp\nclass ISplitter { //接口\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\nclass BinarySpliter: public ISplitter {\n};\n\nclass TxtSplitter: public ISplitter {\n};\n\nclass PictureSplitter: public ISplitter {\n};\n\nclass VideoSplitter: public ISplitter {  \n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n/*******************问题产生了******************/\n\t\tISplitter* splitter = new BinarySplitter(); //??????怎么又依赖细节了？？？\n        splitter->split;\n    }\n}\n```\n\n{% note warning %}\n\n`new`不能new抽象类，`new`只能new具体类。但是我们需要的是多态`new`。怎么解决呢？\n\n{% endnote %}\n\n* 开始重构\n\n```cpp\nclass SplitterFactory {\npublic:\n    ISplitter* CreateSplitter() {\n        //return new ISplitter(...);//这样也是不对的，因为不能new抽象类\n        return new BinarySplitter();\n    }\n}\nclass ISplitter { //接口\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tSplitterFactory factory;\n\t\tISplitter* splitter = factory.CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n但是这种实现根本没有解决问题，`ISplitter* splitter = factory.CreateSplitter();`依然依赖于具体的类BinarySplitter\n\n* 继续重构\n\n```cpp\n//抽象类\nclass ISplitter {\npublic:\n    virtual void split() = 0;\n    virtual ~ISplitter() {}\n};\n//工厂基类\nclass SplitterFactory {\npublic:\n\tvirtual void ISplitter* CreateSplitter() = 0;\n    virtual ~SplitterFactory(){}\n    }\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\npublic:\n    void Button1_Click() {\n\t\tSplitterFactory* factory;\n//多态了\n\t\tISplitter* splitter = factory->CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n\n\n* 继续完善\n\n```cpp\n//具体类\nclass BinarySpliter: public ISplitter {\n};\n\nclass TxtSplitter: public ISplitter {\n};\n\nclass PictureSplitter: public ISplitter {\n};\n\nclass VideoSplitter: public ISplitter {  \n};\n\n//具体工厂\nBinarySplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new BinarySplitter();\n    }\n};\n\nTxtSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new TxtSplitter();\n    }\n};\n\nPictureSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new PictureSplitter();\n    }\n};\n\nVideoSplitterFactory: public SplitterFactory {\npublic:\n    virutal ISplitter* CreateSplitter() {\n        return new VideoSplitter();\n    }\n};\n```\n\n```cpp\nclass MainForm: public Form {\n    SplitterFactory* factory;\npublic:\n    MainForm(SplitterFactory* factory) {\n        this->factory = factory;\n    }\n    \n    void Button1_Click() {\n//多态new\n\t\tISplitter* splitter = factory->CreateSplitter();\n        splitter->split;\n    }\n}\n```\n\n\n\n## 结构\n\n<img src=\"image-20200814150354579.png\" alt=\"image-20200814150354579\" style=\"zoom:50%;\" />\n\n## 总结\n\n* Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。\n\n* Factory Method模式通过面向对象的手法，将所要创建的具体对 象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。\n\n* Factory Method模式解决\"单个对象\"的需求变化。缺点在于要求创建方法/参数相同。\n\n","slug":"FactoryMethod","published":1,"updated":"2020-08-14T07:11:27.769Z","_id":"ckdtw6w4w00007ruf190kg84m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Factory-Method属于对象创建模式\"><a href=\"#Factory-Method属于对象创建模式\" class=\"headerlink\" title=\"Factory Method属于对象创建模式\"></a>Factory Method属于对象创建模式</h2><p>通过对象创建模式绕开<code>new</code>, 来避免对象创建 (<code>new</code>) 过程中所导致的紧耦合(依赖具体类 )，从而支持对象创建的稳定。他是接口抽象之后的第一步工作。</p>\n<p>典型模式有</p>\n<ul>\n<li>Factory Method</li>\n<li>Abstract Factory</li>\n<li>Prototype</li>\n<li>Builder</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件系统中，经常面临着创建对象的工作；由于需求的变化， 需要创建的对象的具体类型经常变化。</p>\n<p>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种”封装机制”来避免客户程序和这种”具体对象创建工作”的紧耦合？</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦， 手段：虚函数）到子类。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>初始代码，一个文件分割器。</p>\n<p>这个代码会有什么问题呢？要从变化的场景去看。</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tFileSplitter* splitter = <span class=\"hljs-keyword\">new</span> FileSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSpitter</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>最开始我们讲过一个原则：面向接口的编程。一个对象的类型应该声明成抽象类或者接口，而不应该声明成具体的类。如果声明成具体的类，就把他定死了，无法应对未来的变化。</p>\n<p>假设我们产生了新的需求：</p>\n<p>需要支持二进制文件，txt文件，图片文件，视频文件的分割</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span> <span class=\"hljs-comment\">//接口</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySpliter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TxtSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PictureSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VideoSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;  \n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n<span class=\"hljs-comment\">/*******************问题产生了******************/</span>\n\t\tISplitter* splitter = <span class=\"hljs-keyword\">new</span> BinarySplitter(); <span class=\"hljs-comment\">//??????怎么又依赖细节了？？？</span>\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"note note-warning\">\n            <p><code>new</code>不能new抽象类，<code>new</code>只能new具体类。但是我们需要的是多态<code>new</code>。怎么解决呢？</p>\n          </div>\n<ul>\n<li>开始重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SplitterFactory</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//return new ISplitter(...);//这样也是不对的，因为不能new抽象类</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BinarySplitter();\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span> <span class=\"hljs-comment\">//接口</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tSplitterFactory factory;\n\t\tISplitter* splitter = factory.CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<p>但是这种实现根本没有解决问题，<code>ISplitter* splitter = factory.CreateSplitter();</code>依然依赖于具体的类BinarySplitter</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//抽象类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;\n<span class=\"hljs-comment\">//工厂基类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SplitterFactory</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~SplitterFactory()&#123;&#125;\n    &#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tSplitterFactory* factory;\n<span class=\"hljs-comment\">//多态了</span>\n\t\tISplitter* splitter = factory-&gt;CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>继续完善</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//具体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySpliter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TxtSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PictureSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VideoSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;  \n&#125;;\n\n<span class=\"hljs-comment\">//具体工厂</span>\nBinarySplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BinarySplitter();\n    &#125;\n&#125;;\n\nTxtSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TxtSplitter();\n    &#125;\n&#125;;\n\nPictureSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PictureSplitter();\n    &#125;\n&#125;;\n\nVideoSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> VideoSplitter();\n    &#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    SplitterFactory* factory;\n<span class=\"hljs-keyword\">public</span>:\n    MainForm(SplitterFactory* factory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;factory = factory;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n<span class=\"hljs-comment\">//多态new</span>\n\t\tISplitter* splitter = factory-&gt;CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200814150354579.png\" srcset=\"/img/loading.gif\" alt=\"image-20200814150354579\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。</p>\n</li>\n<li><p>Factory Method模式通过面向对象的手法，将所要创建的具体对 象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。</p>\n</li>\n<li><p>Factory Method模式解决”单个对象”的需求变化。缺点在于要求创建方法/参数相同。</p>\n</li>\n</ul>\n","site":{"data":{"fluid_config":{"favicon":"/img/favicon.png","apple_touch_icon":"/img/favicon.png","title_join_string":" - ","force_https":false,"highlight":{"enable":true,"style":"Atom One Dark","bg_color":true,"copy_btn":true},"fun_features":{"typing":{"enable":true,"typeSpeed":70,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"color":{"body_bg_color":"#eee","navbar_bg_color":"black","navbar_text_color":"white","text_color":"#3c4858","sec_text_color":"#718096","post_text_color":"#2c3e50","post_heading_color":"#1a202c","link_color":"#3c4858","link_hover_color":"#1abc9c","link_hover_bg_color":"#f8f9fa","board_color":"#fff"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":false,"baidu":null,"google":null,"tencent":{"sid":null,"cid":null},"tajs":null,"woyaola":null,"cnzz":null,"leancloud":{"app_id":"6ojk1lVz9eq7GQnBo6Q8zR5d-gzGzoHsz","app_key":"bOrBPlujAz77Ma6N5tY9wWJN","server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Explorer","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner_parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/img/default.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"It&apos; s Us Make The World Different"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/img/default.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":100},"views":{"enable":true,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":false,"content":"本文最后更新于：","relative":false},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":0},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":true,"specific":false,"engine":"mathjax"},"mermaid":{"enable":true,"specific":false,"options":{"theme":"default"}},"comments":{"enable":false,"type":"gitalk"}},"utterances":{"repo":null,"issue_term":null,"label":"utterances","theme":"github-light","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":"cde2629d6201340c948b","clientSecret":"621727333cc595103f634cf6deaba53bd8784fe6","repo":"blog-comments","owner":"miaochenlu","admin":null,"id":"location.pathname","language":"zh-CN","labels":"['Gitalk']","perPage":15,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"archive":{"banner_img":"/img/achive.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length"},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/img/avatar.png","name":"Chenlu Miao","introduce":"李德胜永远滴神","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/miaochenlu","tip":"GitHub"},{"class":"iconfont icon-mail","link":"mailto:clmiao@zju.edu.cn","tip":"邮箱"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}},"excerpt":"","more":"<h2 id=\"Factory-Method属于对象创建模式\"><a href=\"#Factory-Method属于对象创建模式\" class=\"headerlink\" title=\"Factory Method属于对象创建模式\"></a>Factory Method属于对象创建模式</h2><p>通过对象创建模式绕开<code>new</code>, 来避免对象创建 (<code>new</code>) 过程中所导致的紧耦合(依赖具体类 )，从而支持对象创建的稳定。他是接口抽象之后的第一步工作。</p>\n<p>典型模式有</p>\n<ul>\n<li>Factory Method</li>\n<li>Abstract Factory</li>\n<li>Prototype</li>\n<li>Builder</li>\n</ul>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在软件系统中，经常面临着创建对象的工作；由于需求的变化， 需要创建的对象的具体类型经常变化。</p>\n<p>如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一 种”封装机制”来避免客户程序和这种”具体对象创建工作”的紧耦合？</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦， 手段：虚函数）到子类。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>初始代码，一个文件分割器。</p>\n<p>这个代码会有什么问题呢？要从变化的场景去看。</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tFileSplitter* splitter = <span class=\"hljs-keyword\">new</span> FileSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileSpitter</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//...</span>\n    &#125;\n&#125;</code></pre></div>\n<p>最开始我们讲过一个原则：面向接口的编程。一个对象的类型应该声明成抽象类或者接口，而不应该声明成具体的类。如果声明成具体的类，就把他定死了，无法应对未来的变化。</p>\n<p>假设我们产生了新的需求：</p>\n<p>需要支持二进制文件，txt文件，图片文件，视频文件的分割</p>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span> <span class=\"hljs-comment\">//接口</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySpliter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TxtSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PictureSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VideoSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;  \n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n<span class=\"hljs-comment\">/*******************问题产生了******************/</span>\n\t\tISplitter* splitter = <span class=\"hljs-keyword\">new</span> BinarySplitter(); <span class=\"hljs-comment\">//??????怎么又依赖细节了？？？</span>\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<div class=\"note note-warning\">\n            <p><code>new</code>不能new抽象类，<code>new</code>只能new具体类。但是我们需要的是多态<code>new</code>。怎么解决呢？</p>\n          </div>\n<ul>\n<li>开始重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SplitterFactory</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-comment\">//return new ISplitter(...);//这样也是不对的，因为不能new抽象类</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BinarySplitter();\n    &#125;\n&#125;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span> <span class=\"hljs-comment\">//接口</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tSplitterFactory factory;\n\t\tISplitter* splitter = factory.CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<p>但是这种实现根本没有解决问题，<code>ISplitter* splitter = factory.CreateSplitter();</code>依然依赖于具体的类BinarySplitter</p>\n<ul>\n<li>继续重构</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//抽象类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ISplitter</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">split</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~ISplitter() &#123;&#125;\n&#125;;\n<span class=\"hljs-comment\">//工厂基类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SplitterFactory</span> &#123;</span>\n<span class=\"hljs-keyword\">public</span>:\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>= <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">virtual</span> ~SplitterFactory()&#123;&#125;\n    &#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    TextBox* txtFilePath;\n    TextBox* txtFileNumber;\n    ProgressBar* progressBar;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n\t\tSplitterFactory* factory;\n<span class=\"hljs-comment\">//多态了</span>\n\t\tISplitter* splitter = factory-&gt;CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<ul>\n<li>继续完善</li>\n</ul>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//具体类</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySpliter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TxtSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PictureSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;\n&#125;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VideoSplitter</span>:</span> <span class=\"hljs-keyword\">public</span> ISplitter &#123;  \n&#125;;\n\n<span class=\"hljs-comment\">//具体工厂</span>\nBinarySplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> BinarySplitter();\n    &#125;\n&#125;;\n\nTxtSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TxtSplitter();\n    &#125;\n&#125;;\n\nPictureSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PictureSplitter();\n    &#125;\n&#125;;\n\nVideoSplitterFactory: <span class=\"hljs-keyword\">public</span> SplitterFactory &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\">virutal ISplitter* <span class=\"hljs-title\">CreateSplitter</span><span class=\"hljs-params\">()</span> </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> VideoSplitter();\n    &#125;\n&#125;;</code></pre></div>\n<div class=\"hljs\"><pre><code class=\"hljs cpp\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainForm</span>:</span> <span class=\"hljs-keyword\">public</span> Form &#123;\n    SplitterFactory* factory;\n<span class=\"hljs-keyword\">public</span>:\n    MainForm(SplitterFactory* factory) &#123;\n        <span class=\"hljs-keyword\">this</span>-&gt;factory = factory;\n    &#125;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Button1_Click</span><span class=\"hljs-params\">()</span> </span>&#123;\n<span class=\"hljs-comment\">//多态new</span>\n\t\tISplitter* splitter = factory-&gt;CreateSplitter();\n        splitter-&gt;split;\n    &#125;\n&#125;</code></pre></div>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p><img src=\"image-20200814150354579.png\" srcset=\"/img/loading.gif\" alt=\"image-20200814150354579\" style=\"zoom:50%;\" /></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导 致软件的脆弱。</p>\n</li>\n<li><p>Factory Method模式通过面向对象的手法，将所要创建的具体对 象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。</p>\n</li>\n<li><p>Factory Method模式解决”单个对象”的需求变化。缺点在于要求创建方法/参数相同。</p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/DesignPatterns/Observer/image-20200806160700160.png","slug":"image-20200806160700160.png","post":"ckdpnxffd000idbuf7cwmcftl","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Bridge/image-20200811150059187.png","slug":"image-20200811150059187.png","post":"ckdpnxffi000mdbuf0lsh6v4r","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/StrategyMethod/image-20200805135526277.png","slug":"image-20200805135526277.png","post":"ckdpnxfff000ldbufh1w4ev3p","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807142228605.png","slug":"image-20200807142228605.png","post":"ckdpnxffb000hdbufe88igkf2","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143722316.png","slug":"image-20200807143722316.png","post":"ckdpnxffb000hdbufe88igkf2","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807143823919.png","slug":"image-20200807143823919.png","post":"ckdpnxffb000hdbufe88igkf2","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/Decorator/image-20200807160507597.png","slug":"image-20200807160507597.png","post":"ckdpnxffb000hdbufe88igkf2","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191024075.png","slug":"image-20200710191024075.png","post":"ckdpnxffm000ndbuf1d9mgw17","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191212499.png","slug":"image-20200710191212499.png","post":"ckdpnxffm000ndbuf1d9mgw17","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710191917988.png","slug":"image-20200710191917988.png","post":"ckdpnxffm000ndbuf1d9mgw17","modified":0,"renderable":0},{"_id":"source/_posts/DesignPatterns/TemplateMethod/image-20200710192039991.png","slug":"image-20200710192039991.png","post":"ckdpnxffm000ndbuf1d9mgw17","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20190917211449784.png","slug":"image-20190917211449784.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007133946196.png","slug":"image-20191007133946196.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007160446233.png","slug":"image-20191007160446233.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007154637608.png","slug":"image-20191007154637608.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208204804983.png","slug":"image-20191208204804983.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213207928.png","slug":"image-20191208213207928.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213148539.png","slug":"image-20191208213148539.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208213224033.png","slug":"image-20191208213224033.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209104433202.png","slug":"image-20191209104433202.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216210721189.png","slug":"image-20191216210721189.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222600418.png","slug":"image-20191216222600418.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217202233856.png","slug":"image-20191217202233856.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222740597.png","slug":"image-20191216222740597.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217203849064.png","slug":"image-20191217203849064.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103037853.png","slug":"image-20190930103037853.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115804883.png","slug":"image-20190930115804883.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/ca20190908-1.png","slug":"ca20190908-1.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/IMG_C3E4F59B24C4.png","slug":"IMG_C3E4F59B24C4.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007125121828.png","slug":"image-20191007125121828.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007140913262.png","slug":"image-20191007140913262.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20200101212239647.png","slug":"image-20200101212239647.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007153614734.png","slug":"image-20191007153614734.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_E9E135911744-1.png","slug":"IMG_E9E135911744-1.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208205644462.png","slug":"image-20191208205644462.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208210849569.png","slug":"image-20191208210849569.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209104458720.png","slug":"image-20191209104458720.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209103141041.png","slug":"image-20191209103141041.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216210659441.png","slug":"image-20191216210659441.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222544839.png","slug":"image-20191216222544839.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930102855084.png","slug":"image-20190930102855084.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103000391.png","slug":"image-20190930103000391.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930103101742.png","slug":"image-20190930103101742.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115734010.png","slug":"image-20190930115734010.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115635931.png","slug":"image-20190930115635931.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013143518878.png","slug":"image-20191013143518878.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013151122898.png","slug":"image-20191013151122898.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191014112116582.png","slug":"image-20191014112116582.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021095901298.png","slug":"image-20191021095901298.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021103246990.png","slug":"image-20191021103246990.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013151314878.png","slug":"image-20191013151314878.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103455864.png","slug":"image-20191111103455864.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103637824.png","slug":"image-20191111103637824.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111104058863.png","slug":"image-20191111104058863.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191005234836200.png","slug":"image-20191005234836200.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111104720076.png","slug":"image-20191111104720076.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021110018403.png","slug":"image-20191021110018403.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_2C62CE9D9D16-1.jpeg","slug":"IMG_2C62CE9D9D16-1.jpeg","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209100308445.png","slug":"image-20191209100308445.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/ca20190908-2.png","slug":"ca20190908-2.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021105802697.png","slug":"image-20191021105802697.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/9FC21EC72573A17040AD0FCD3C37A790.png","slug":"9FC21EC72573A17040AD0FCD3C37A790.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20190917211816031.png","slug":"image-20190917211816031.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20190917213738345.png","slug":"image-20190917213738345.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191005234914576.png","slug":"image-20191005234914576.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191006000007082.png","slug":"image-20191006000007082.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007133601513.png","slug":"image-20191007133601513.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-20191007161859322.png","slug":"image-20191007161859322.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/image-2019100742053.png","slug":"image-2019100742053.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page102image35767104.png","slug":"page102image35767104.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page40image34686176.png","slug":"page40image34686176.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page44image34725184.png","slug":"page44image34725184.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page49image35151168.png","slug":"page49image35151168.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page52image35155536.png","slug":"page52image35155536.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page63image36690640.png","slug":"page63image36690640.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103409484.png","slug":"image-20191111103409484.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208194519623.png","slug":"image-20191208194519623.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930101228492.png","slug":"image-20190930101228492.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930102555608.png","slug":"image-20190930102555608.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20190930115553486.png","slug":"image-20190930115553486.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101250484.png","slug":"image-20191014101250484.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101429477.png","slug":"image-20191014101429477.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014101703881.png","slug":"image-20191014101703881.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014102744097-6809392.png","slug":"image-20191014102744097-6809392.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191014102744097.png","slug":"image-20191014102744097.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224444341.png","slug":"image-20191218224444341.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224500000.png","slug":"image-20191218224500000.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/instructionSet/image-20191218224924929.png","slug":"image-20191218224924929.png","post":"ckdpp3i3g00060rufa1252m9a","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208204528711.png","slug":"image-20191208204528711.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191013133054888.png","slug":"image-20191013133054888.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021095111.png","slug":"image-20191021095111.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021101747938.png","slug":"image-20191021101747938.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191021115323894.png","slug":"image-20191021115323894.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/pipeline/image-20191111103138887.png","slug":"image-20191111103138887.png","post":"ckdpp3i3h00080ruf90ew72qh","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-2019120874232.png","slug":"image-2019120874232.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105418930.png","slug":"image-20191209105418930.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216214128113.png","slug":"image-20191216214128113.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222905001.png","slug":"image-20191216222905001.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_17517EAA2585-1.png","slug":"IMG_17517EAA2585-1.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/IMG_8BFCBD97FD85-1.png","slug":"IMG_8BFCBD97FD85-1.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208134608723.png","slug":"image-20191208134608723.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208135106480.png","slug":"image-20191208135106480.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208135244903.png","slug":"image-20191208135244903.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208201918610.png","slug":"image-20191208201918610.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208202025669.png","slug":"image-20191208202025669.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208202722945.png","slug":"image-20191208202722945.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208205754992.png","slug":"image-20191208205754992.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208214954621.png","slug":"image-20191208214954621.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208215035983.png","slug":"image-20191208215035983.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191208220714030.png","slug":"image-20191208220714030.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105411600.png","slug":"image-20191209105411600.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105429474.png","slug":"image-20191209105429474.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105442259.png","slug":"image-20191209105442259.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105451917.png","slug":"image-20191209105451917.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209105459461.png","slug":"image-20191209105459461.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209113803942.png","slug":"image-20191209113803942.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191209113823956.png","slug":"image-20191209113823956.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216102829183.png","slug":"image-20191216102829183.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216104938324.png","slug":"image-20191216104938324.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216110406290.png","slug":"image-20191216110406290.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216120558419.png","slug":"image-20191216120558419.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216121018499.png","slug":"image-20191216121018499.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130127847.png","slug":"image-20191216130127847.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130657742.png","slug":"image-20191216130657742.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130845614.png","slug":"image-20191216130845614.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130921114.png","slug":"image-20191216130921114.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216130953500.png","slug":"image-20191216130953500.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131127165.png","slug":"image-20191216131127165.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131242663.png","slug":"image-20191216131242663.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131302430.png","slug":"image-20191216131302430.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131334869.png","slug":"image-20191216131334869.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131357343.png","slug":"image-20191216131357343.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131420435.png","slug":"image-20191216131420435.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131449208.png","slug":"image-20191216131449208.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131514362.png","slug":"image-20191216131514362.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131536642.png","slug":"image-20191216131536642.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216131556362.png","slug":"image-20191216131556362.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191216222618484.png","slug":"image-20191216222618484.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217210134473.png","slug":"image-20191217210134473.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/ComputerArchitecture/Storage/image-20191217210322625.png","slug":"image-20191217210322625.png","post":"ckdpp3i3f00050ruf9jsp4fv0","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page42image34731632.png","slug":"page42image34731632.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/PhysicalLayer/page41image34714624.png","slug":"page41image34714624.png","post":"ckdpp3i1500000ruf62mqhhxz","modified":0,"renderable":0},{"_id":"source/_posts/FactoryMethod/image-20200814150354579.png","slug":"image-20200814150354579.png","post":"ckdtw6w4w00007ruf190kg84m","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckdpnxffi000mdbuf0lsh6v4r","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdpnxffu000tdbufcvcx13aw"},{"post_id":"ckdpnxffb000hdbufe88igkf2","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdpnxffw000xdbufgt5l8j9y"},{"post_id":"ckdpnxffm000ndbuf1d9mgw17","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdpnxffz000zdbufaa7xbk33"},{"post_id":"ckdpnxffd000idbuf7cwmcftl","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdpnxffz0011dbufcv2k08vg"},{"post_id":"ckdpnxfff000ldbufh1w4ev3p","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdpnxfg00013dbufe2fx9x17"},{"post_id":"ckdpp3i1500000ruf62mqhhxz","category_id":"ckdpp3i1f00010rufcid7hlmq","_id":"ckdpp3i2300040ruffew48ock"},{"post_id":"ckdpp3i3f00050ruf9jsp4fv0","category_id":"ckdpnxfcg0004dbufhkn782si","_id":"ckdpp3i3l000a0rufhwks8pk8"},{"post_id":"ckdpp3i3g00060rufa1252m9a","category_id":"ckdpnxfcg0004dbufhkn782si","_id":"ckdpp3i3t000c0ruf2gqt3qs5"},{"post_id":"ckdpp3i3h00080ruf90ew72qh","category_id":"ckdpnxfcg0004dbufhkn782si","_id":"ckdpp3i3w000d0rufbb8ka3b2"},{"post_id":"ckdtw6w4w00007ruf190kg84m","category_id":"ckdpnxfff000jdbufbbnz5hfx","_id":"ckdtw6w5300027ruf9sip0gle"}],"PostTag":[{"post_id":"ckdpnxffi000mdbuf0lsh6v4r","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxffq000qdbuf3ky07nza"},{"post_id":"ckdpnxffb000hdbufe88igkf2","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxfft000sdbuffnwtezd2"},{"post_id":"ckdpnxffm000ndbuf1d9mgw17","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxffw000wdbufhgf07fkt"},{"post_id":"ckdpnxffr000rdbufgiia5ngu","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxffy000ydbufcp196sjv"},{"post_id":"ckdpnxffd000idbuf7cwmcftl","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxffz0010dbufcg7td15k"},{"post_id":"ckdpnxfff000ldbufh1w4ev3p","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdpnxffz0012dbufc6d530b7"},{"post_id":"ckdpp3i1500000ruf62mqhhxz","tag_id":"ckdpp3i1l00020ruf1ivvbl3y","_id":"ckdpp3i2000030ruf0wsw7y19"},{"post_id":"ckdpp3i3f00050ruf9jsp4fv0","tag_id":"ckdpnxfcj0005dbuf4ocjgdwk","_id":"ckdpp3i3h00070rufdzuv3q9g"},{"post_id":"ckdpp3i3g00060rufa1252m9a","tag_id":"ckdpnxfcj0005dbuf4ocjgdwk","_id":"ckdpp3i3k00090ruf5d9d54rt"},{"post_id":"ckdpp3i3h00080ruf90ew72qh","tag_id":"ckdpnxfcj0005dbuf4ocjgdwk","_id":"ckdpp3i3t000b0ruf7a087cr9"},{"post_id":"ckdtw6w4w00007ruf190kg84m","tag_id":"ckdpnxfff000kdbuf2qr6dop5","_id":"ckdtw6w5300017ruf7pizfhp9"}],"Tag":[{"name":"Computer Architecture","_id":"ckdpnxfcj0005dbuf4ocjgdwk"},{"name":"Design Patterns","_id":"ckdpnxfff000kdbuf2qr6dop5"},{"name":"Computer Network","_id":"ckdpp3i1l00020ruf1ivvbl3y"}]}}